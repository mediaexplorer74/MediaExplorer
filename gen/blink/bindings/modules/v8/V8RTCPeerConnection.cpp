// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8RTCPeerConnection.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8VoidCallback.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "bindings/modules/v8/V8MediaStreamTrack.h"
#include "bindings/modules/v8/V8RTCDTMFSender.h"
#include "bindings/modules/v8/V8RTCDataChannel.h"
#include "bindings/modules/v8/V8RTCErrorCallback.h"
#include "bindings/modules/v8/V8RTCIceCandidate.h"
#include "bindings/modules/v8/V8RTCSessionDescription.h"
#include "bindings/modules/v8/V8RTCSessionDescriptionCallback.h"
#include "bindings/modules/v8/V8RTCStatsCallback.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8RTCPeerConnection::wrapperTypeInfo = { gin::kEmbedderBlink, V8RTCPeerConnection::domTemplate, V8RTCPeerConnection::refObject, V8RTCPeerConnection::derefObject, V8RTCPeerConnection::trace, V8RTCPeerConnection::toActiveDOMObject, 0, V8RTCPeerConnection::preparePrototypeObject, V8RTCPeerConnection::installConditionallyEnabledProperties, "RTCPeerConnection", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in RTCPeerConnection.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& RTCPeerConnection::s_wrapperTypeInfo = V8RTCPeerConnection::wrapperTypeInfo;

namespace RTCPeerConnectionV8Internal {

static void localDescriptionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "localDescription", "RTCPeerConnection", holder, info.GetIsolate());
    RawPtr<RTCSessionDescription> cppValue(impl->localDescription(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "localDescription"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void localDescriptionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::localDescriptionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void remoteDescriptionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "remoteDescription", "RTCPeerConnection", holder, info.GetIsolate());
    RawPtr<RTCSessionDescription> cppValue(impl->remoteDescription(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "remoteDescription"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void remoteDescriptionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::remoteDescriptionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void signalingStateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    v8SetReturnValueString(info, impl->signalingState(), info.GetIsolate());
}

static void signalingStateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::signalingStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void iceGatheringStateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    v8SetReturnValueString(info, impl->iceGatheringState(), info.GetIsolate());
}

static void iceGatheringStateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::iceGatheringStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void iceConnectionStateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    v8SetReturnValueString(info, impl->iceConnectionState(), info.GetIsolate());
}

static void iceConnectionStateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::iceConnectionStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onnegotiationneededAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->onnegotiationneeded());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onnegotiationneededAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onnegotiationneededAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onnegotiationneededAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onnegotiationneeded(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOnnegotiationneeded(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onnegotiationneededAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onnegotiationneededAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onicecandidateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->onicecandidate());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onicecandidateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onicecandidateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onicecandidateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onicecandidate(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOnicecandidate(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onicecandidateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onicecandidateAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onsignalingstatechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->onsignalingstatechange());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onsignalingstatechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onsignalingstatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onsignalingstatechange(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOnsignalingstatechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onsignalingstatechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onaddstreamAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->onaddstream());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onaddstreamAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onaddstreamAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onaddstreamAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onaddstream(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOnaddstream(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onaddstreamAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onaddstreamAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onremovestreamAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->onremovestream());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onremovestreamAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onremovestreamAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onremovestreamAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onremovestream(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOnremovestream(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onremovestreamAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onremovestreamAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void oniceconnectionstatechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->oniceconnectionstatechange());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oniceconnectionstatechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void oniceconnectionstatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->oniceconnectionstatechange(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOniceconnectionstatechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oniceconnectionstatechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void ondatachannelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    EventListener* cppValue(impl->ondatachannel());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondatachannelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    RTCPeerConnectionV8Internal::ondatachannelAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void ondatachannelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->ondatachannel(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex);
    impl->setOndatachannel(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondatachannelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    RTCPeerConnectionV8Internal::ondatachannelAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createOfferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createOffer", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCSessionDescriptionCallback* successCallback;
    RTCErrorCallback* failureCallback;
    Dictionary rtcOfferOptions;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8RTCSessionDescriptionCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        if (!isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        } else {
            failureCallback = nullptr;
        }
        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('rtcOfferOptions') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        rtcOfferOptions = Dictionary(info[2], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->createOffer(successCallback, failureCallback, rtcOfferOptions, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void createOfferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createOfferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createAnswerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createAnswer", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCSessionDescriptionCallback* successCallback;
    RTCErrorCallback* failureCallback;
    Dictionary mediaConstraints;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8RTCSessionDescriptionCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        if (!isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        } else {
            failureCallback = nullptr;
        }
        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        mediaConstraints = Dictionary(info[2], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->createAnswer(successCallback, failureCallback, mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void createAnswerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createAnswerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLocalDescriptionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLocalDescription", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCSessionDescription* description;
    VoidCallback* successCallback;
    RTCErrorCallback* failureCallback;
    {
        description = V8RTCSessionDescription::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            successCallback = V8VoidCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        } else {
            successCallback = nullptr;
        }
        if (!isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Local<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        } else {
            failureCallback = nullptr;
        }
    }
    impl->setLocalDescription(description, successCallback, failureCallback, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setLocalDescriptionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::setLocalDescriptionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setRemoteDescriptionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRemoteDescription", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCSessionDescription* description;
    VoidCallback* successCallback;
    RTCErrorCallback* failureCallback;
    {
        description = V8RTCSessionDescription::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            successCallback = V8VoidCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        } else {
            successCallback = nullptr;
        }
        if (!isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Local<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        } else {
            failureCallback = nullptr;
        }
    }
    impl->setRemoteDescription(description, successCallback, failureCallback, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setRemoteDescriptionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::setRemoteDescriptionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void updateIceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "updateIce", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    Dictionary configuration;
    Dictionary mediaConstraints;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('configuration') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        configuration = Dictionary(info[0], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        mediaConstraints = Dictionary(info[1], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->updateIce(configuration, mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void updateIceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::updateIceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addIceCandidate1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIceCandidate", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCIceCandidate* candidate;
    {
        candidate = V8RTCIceCandidate::toImplWithTypeCheck(info.GetIsolate(), info[0]);
    }
    impl->addIceCandidate(candidate, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void addIceCandidate2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIceCandidate", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCIceCandidate* candidate;
    VoidCallback* successCallback;
    RTCErrorCallback* failureCallback;
    {
        candidate = V8RTCIceCandidate::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8VoidCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (info.Length() <= 2 || !info[2]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        failureCallback = V8RTCErrorCallback::create(v8::Local<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
    }
    impl->addIceCandidate(candidate, successCallback, failureCallback, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void addIceCandidateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIceCandidate", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 1:
        if (true) {
            addIceCandidate1Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            addIceCandidate2Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            setArityTypeError(exceptionState, "[1, 3]", info.Length());
            exceptionState.throwIfNeeded();
            return;
        }
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void addIceCandidateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::addIceCandidateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getLocalStreamsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->getLocalStreams(), info.Holder(), info.GetIsolate()));
}

static void getLocalStreamsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getLocalStreamsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getRemoteStreamsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->getRemoteStreams(), info.Holder(), info.GetIsolate()));
}

static void getRemoteStreamsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getRemoteStreamsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getStreamByIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getStreamById", "RTCPeerConnection", 1, info.Length()), info.GetIsolate());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    V8StringResource<> streamId;
    {
        streamId = info[0];
        if (!streamId.prepare())
            return;
    }
    v8SetReturnValue(info, impl->getStreamById(streamId));
}

static void getStreamByIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getStreamByIdMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addStream", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    MediaStream* stream;
    Dictionary mediaConstraints;
    {
        stream = V8MediaStream::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!stream && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'MediaStream'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        mediaConstraints = Dictionary(info[1], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->addStream(stream, mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void addStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::addStreamMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void removeStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "removeStream", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    MediaStream* stream;
    {
        stream = V8MediaStream::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!stream && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'MediaStream'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->removeStream(stream, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void removeStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::removeStreamMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getStatsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getStats", "RTCPeerConnection", 1, info.Length()), info.GetIsolate());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    RTCStatsCallback* successCallback;
    MediaStreamTrack* selector;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getStats", "RTCPeerConnection", "The callback provided as parameter 1 is not a function."));
            return;
        }
        successCallback = V8RTCStatsCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        selector = V8MediaStreamTrack::toImplWithTypeCheck(info.GetIsolate(), info[1]);
    }
    impl->getStats(successCallback, selector);
}

static void getStatsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getStatsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createDataChannelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDataChannel", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    V8StringResource<TreatNullAndUndefinedAsNullString> label;
    Dictionary options;
    {
        label = info[0];
        if (!label.prepare())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        options = Dictionary(info[1], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    RawPtr<RTCDataChannel> result = impl->createDataChannel(label, options, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDataChannelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createDataChannelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createDTMFSenderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDTMFSender", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    MediaStreamTrack* track;
    {
        track = V8MediaStreamTrack::toImplWithTypeCheck(info.GetIsolate(), info[0]);
    }
    RawPtr<RTCDTMFSender> result = impl->createDTMFSender(track, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDTMFSenderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createDTMFSenderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void closeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "close", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toImpl(info.Holder());
    impl->close(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void closeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    RTCPeerConnectionV8Internal::closeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Dictionary rtcConfiguration;
    Dictionary mediaConstraints;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('rtcConfiguration') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        rtcConfiguration = Dictionary(info[0], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        mediaConstraints = Dictionary(info[1], info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<RTCPeerConnection> impl = RTCPeerConnection::create(executionContext, rtcConfiguration, mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8RTCPeerConnection::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace RTCPeerConnectionV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8RTCPeerConnectionAccessors[] = {
    {"localDescription", RTCPeerConnectionV8Internal::localDescriptionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"remoteDescription", RTCPeerConnectionV8Internal::remoteDescriptionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"signalingState", RTCPeerConnectionV8Internal::signalingStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"iceGatheringState", RTCPeerConnectionV8Internal::iceGatheringStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"iceConnectionState", RTCPeerConnectionV8Internal::iceConnectionStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onnegotiationneeded", RTCPeerConnectionV8Internal::onnegotiationneededAttributeGetterCallback, RTCPeerConnectionV8Internal::onnegotiationneededAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onicecandidate", RTCPeerConnectionV8Internal::onicecandidateAttributeGetterCallback, RTCPeerConnectionV8Internal::onicecandidateAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onsignalingstatechange", RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeGetterCallback, RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onaddstream", RTCPeerConnectionV8Internal::onaddstreamAttributeGetterCallback, RTCPeerConnectionV8Internal::onaddstreamAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onremovestream", RTCPeerConnectionV8Internal::onremovestreamAttributeGetterCallback, RTCPeerConnectionV8Internal::onremovestreamAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"oniceconnectionstatechange", RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeGetterCallback, RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"ondatachannel", RTCPeerConnectionV8Internal::ondatachannelAttributeGetterCallback, RTCPeerConnectionV8Internal::ondatachannelAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8RTCPeerConnectionMethods[] = {
    {"createOffer", RTCPeerConnectionV8Internal::createOfferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"createAnswer", RTCPeerConnectionV8Internal::createAnswerMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLocalDescription", RTCPeerConnectionV8Internal::setLocalDescriptionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setRemoteDescription", RTCPeerConnectionV8Internal::setRemoteDescriptionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"updateIce", RTCPeerConnectionV8Internal::updateIceMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"addIceCandidate", RTCPeerConnectionV8Internal::addIceCandidateMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getLocalStreams", RTCPeerConnectionV8Internal::getLocalStreamsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getRemoteStreams", RTCPeerConnectionV8Internal::getRemoteStreamsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getStreamById", RTCPeerConnectionV8Internal::getStreamByIdMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"addStream", RTCPeerConnectionV8Internal::addStreamMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"removeStream", RTCPeerConnectionV8Internal::removeStreamMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getStats", RTCPeerConnectionV8Internal::getStatsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"createDataChannel", RTCPeerConnectionV8Internal::createDataChannelMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"createDTMFSender", RTCPeerConnectionV8Internal::createDTMFSenderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"close", RTCPeerConnectionV8Internal::closeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

void V8RTCPeerConnection::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("RTCPeerConnection"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    RTCPeerConnectionV8Internal::constructor(info);
}

static void installV8RTCPeerConnectionTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "RTCPeerConnection", V8EventTarget::domTemplate(isolate), V8RTCPeerConnection::internalFieldCount,
        0, 0,
        V8RTCPeerConnectionAccessors, WTF_ARRAY_LENGTH(V8RTCPeerConnectionAccessors),
        V8RTCPeerConnectionMethods, WTF_ARRAY_LENGTH(V8RTCPeerConnectionMethods));
    functionTemplate->SetCallHandler(V8RTCPeerConnection::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8RTCPeerConnection::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8RTCPeerConnectionTemplate);
}

bool V8RTCPeerConnection::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8RTCPeerConnection::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

RTCPeerConnection* V8RTCPeerConnection::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

ActiveDOMObject* V8RTCPeerConnection::toActiveDOMObject(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

void V8RTCPeerConnection::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8RTCPeerConnection::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
