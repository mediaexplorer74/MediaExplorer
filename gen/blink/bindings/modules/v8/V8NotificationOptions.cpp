// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8NotificationOptions.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/modules/v8/UnionTypesModules.h"

namespace blink {

void V8NotificationOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, NotificationOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> bodyValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "body")).ToLocal(&bodyValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (bodyValue.IsEmpty() || bodyValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> body = bodyValue;
            if (!body.prepare(exceptionState))
                return;
            impl.setBody(body);
        }
    }

    {
        v8::Local<v8::Value> dataValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "data")).ToLocal(&dataValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (dataValue.IsEmpty() || dataValue->IsUndefined()) {
            // Do nothing.
        } else {
            ScriptValue data = ScriptValue(ScriptState::current(isolate), dataValue);
            impl.setData(data);
        }
    }

    {
        v8::Local<v8::Value> dirValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "dir")).ToLocal(&dirValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (dirValue.IsEmpty() || dirValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> dir = dirValue;
            if (!dir.prepare(exceptionState))
                return;
            static const char* validValues[] = {
                "auto",
                "ltr",
                "rtl",
            };
            if (!isValidEnum(dir, validValues, WTF_ARRAY_LENGTH(validValues), "NotificationDirection", exceptionState))
                return;
            impl.setDir(dir);
        }
    }

    {
        v8::Local<v8::Value> iconValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "icon")).ToLocal(&iconValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (iconValue.IsEmpty() || iconValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> icon = iconValue;
            if (!icon.prepare(exceptionState))
                return;
            impl.setIcon(icon);
        }
    }

    {
        v8::Local<v8::Value> langValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "lang")).ToLocal(&langValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (langValue.IsEmpty() || langValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> lang = langValue;
            if (!lang.prepare(exceptionState))
                return;
            impl.setLang(lang);
        }
    }

    {
        v8::Local<v8::Value> silentValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "silent")).ToLocal(&silentValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (silentValue.IsEmpty() || silentValue->IsUndefined()) {
            // Do nothing.
        } else {
            bool silent = toBoolean(isolate, silentValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setSilent(silent);
        }
    }

    {
        v8::Local<v8::Value> tagValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "tag")).ToLocal(&tagValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (tagValue.IsEmpty() || tagValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> tag = tagValue;
            if (!tag.prepare(exceptionState))
                return;
            impl.setTag(tag);
        }
    }

    {
        v8::Local<v8::Value> vibrateValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "vibrate")).ToLocal(&vibrateValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (vibrateValue.IsEmpty() || vibrateValue->IsUndefined()) {
            // Do nothing.
        } else {
            UnsignedLongOrUnsignedLongSequence vibrate;
            V8UnsignedLongOrUnsignedLongSequence::toImpl(isolate, vibrateValue, vibrate, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setVibrate(vibrate);
        }
    }

}

v8::Local<v8::Value> toV8(const NotificationOptions& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8NotificationOptions(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8NotificationOptions(const NotificationOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasBody()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "body"), v8String(isolate, impl.body()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "body"), v8String(isolate, String("")))))
            return false;
    }

    if (impl.hasData()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "data"), impl.data().v8Value())))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "data"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasDir()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "dir"), v8String(isolate, impl.dir()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "dir"), v8String(isolate, String("auto")))))
            return false;
    }

    if (impl.hasIcon()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "icon"), v8String(isolate, impl.icon()))))
            return false;
    }

    if (impl.hasLang()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "lang"), v8String(isolate, impl.lang()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "lang"), v8String(isolate, String("")))))
            return false;
    }

    if (impl.hasSilent()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "silent"), v8Boolean(impl.silent(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "silent"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasTag()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "tag"), v8String(isolate, impl.tag()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "tag"), v8String(isolate, String("")))))
            return false;
    }

    if (impl.hasVibrate()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vibrate"), toV8(impl.vibrate(), creationContext, isolate))))
            return false;
    }

    return true;
}

NotificationOptions NativeValueTraits<NotificationOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    NotificationOptions impl;
    V8NotificationOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
