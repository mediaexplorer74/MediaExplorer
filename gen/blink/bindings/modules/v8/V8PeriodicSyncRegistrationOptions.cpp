// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8PeriodicSyncRegistrationOptions.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8PeriodicSyncRegistrationOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PeriodicSyncRegistrationOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> minPeriodValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "minPeriod")).ToLocal(&minPeriodValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (minPeriodValue.IsEmpty() || minPeriodValue->IsUndefined()) {
            // Do nothing.
        } else {
            unsigned minPeriod = toUInt32(isolate, minPeriodValue, NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setMinPeriod(minPeriod);
        }
    }

    {
        v8::Local<v8::Value> networkStateValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "networkState")).ToLocal(&networkStateValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (networkStateValue.IsEmpty() || networkStateValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> networkState = networkStateValue;
            if (!networkState.prepare(exceptionState))
                return;
            static const char* validValues[] = {
                "any",
                "avoid-cellular",
                "online",
            };
            if (!isValidEnum(networkState, validValues, WTF_ARRAY_LENGTH(validValues), "SyncNetworkState", exceptionState))
                return;
            impl.setNetworkState(networkState);
        }
    }

    {
        v8::Local<v8::Value> powerStateValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "powerState")).ToLocal(&powerStateValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (powerStateValue.IsEmpty() || powerStateValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> powerState = powerStateValue;
            if (!powerState.prepare(exceptionState))
                return;
            static const char* validValues[] = {
                "auto",
                "avoid-draining",
            };
            if (!isValidEnum(powerState, validValues, WTF_ARRAY_LENGTH(validValues), "SyncPowerState", exceptionState))
                return;
            impl.setPowerState(powerState);
        }
    }

    {
        v8::Local<v8::Value> tagValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "tag")).ToLocal(&tagValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (tagValue.IsEmpty() || tagValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> tag = tagValue;
            if (!tag.prepare(exceptionState))
                return;
            impl.setTag(tag);
        }
    }

}

v8::Local<v8::Value> toV8(const PeriodicSyncRegistrationOptions& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PeriodicSyncRegistrationOptions(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8PeriodicSyncRegistrationOptions(const PeriodicSyncRegistrationOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasMinPeriod()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "minPeriod"), v8::Integer::NewFromUnsigned(isolate, impl.minPeriod()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "minPeriod"), v8::Integer::NewFromUnsigned(isolate, 0u))))
            return false;
    }

    if (impl.hasNetworkState()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "networkState"), v8String(isolate, impl.networkState()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "networkState"), v8String(isolate, String("network-online")))))
            return false;
    }

    if (impl.hasPowerState()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "powerState"), v8String(isolate, impl.powerState()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "powerState"), v8String(isolate, String("auto")))))
            return false;
    }

    if (impl.hasTag()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "tag"), v8String(isolate, impl.tag()))))
            return false;
    }

    return true;
}

PeriodicSyncRegistrationOptions NativeValueTraits<PeriodicSyncRegistrationOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PeriodicSyncRegistrationOptions impl;
    V8PeriodicSyncRegistrationOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
