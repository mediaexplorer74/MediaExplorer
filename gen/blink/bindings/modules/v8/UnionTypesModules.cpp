// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "bindings/modules/v8/UnionTypesModules.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/UnionTypesCore.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8DOMStringList.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8HTMLImageElement.h"
#include "bindings/core/v8/V8HTMLVideoElement.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8MessagePort.h"
#include "bindings/modules/v8/UnionTypesModules.h"
#include "bindings/modules/v8/V8CanvasGradient.h"
#include "bindings/modules/v8/V8CanvasPattern.h"
#include "bindings/modules/v8/V8Request.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "core/workers/AbstractWorker.h"

namespace blink {

ArrayBufferOrArrayBufferViewOrDictionary::ArrayBufferOrArrayBufferViewOrDictionary()
    : m_type(SpecificTypeNone)
{
}

PassRefPtr<DOMArrayBuffer> ArrayBufferOrArrayBufferViewOrDictionary::getAsArrayBuffer() const
{
    ASSERT(isArrayBuffer());
    return m_arrayBuffer;
}

void ArrayBufferOrArrayBufferViewOrDictionary::setArrayBuffer(PassRefPtr<DOMArrayBuffer> value)
{
    ASSERT(isNull());
    m_arrayBuffer = value;
    m_type = SpecificTypeArrayBuffer;
}

ArrayBufferOrArrayBufferViewOrDictionary ArrayBufferOrArrayBufferViewOrDictionary::fromArrayBuffer(PassRefPtr<DOMArrayBuffer> value)
{
    ArrayBufferOrArrayBufferViewOrDictionary container;
    container.setArrayBuffer(value);
    return container;
}

PassRefPtr<DOMArrayBufferView> ArrayBufferOrArrayBufferViewOrDictionary::getAsArrayBufferView() const
{
    ASSERT(isArrayBufferView());
    return m_arrayBufferView;
}

void ArrayBufferOrArrayBufferViewOrDictionary::setArrayBufferView(PassRefPtr<DOMArrayBufferView> value)
{
    ASSERT(isNull());
    m_arrayBufferView = value;
    m_type = SpecificTypeArrayBufferView;
}

ArrayBufferOrArrayBufferViewOrDictionary ArrayBufferOrArrayBufferViewOrDictionary::fromArrayBufferView(PassRefPtr<DOMArrayBufferView> value)
{
    ArrayBufferOrArrayBufferViewOrDictionary container;
    container.setArrayBufferView(value);
    return container;
}

Dictionary ArrayBufferOrArrayBufferViewOrDictionary::getAsDictionary() const
{
    ASSERT(isDictionary());
    return m_dictionary;
}

void ArrayBufferOrArrayBufferViewOrDictionary::setDictionary(Dictionary value)
{
    ASSERT(isNull());
    m_dictionary = value;
    m_type = SpecificTypeDictionary;
}

ArrayBufferOrArrayBufferViewOrDictionary ArrayBufferOrArrayBufferViewOrDictionary::fromDictionary(Dictionary value)
{
    ArrayBufferOrArrayBufferViewOrDictionary container;
    container.setDictionary(value);
    return container;
}

ArrayBufferOrArrayBufferViewOrDictionary::ArrayBufferOrArrayBufferViewOrDictionary(const ArrayBufferOrArrayBufferViewOrDictionary&) = default;
ArrayBufferOrArrayBufferViewOrDictionary::~ArrayBufferOrArrayBufferViewOrDictionary() = default;
ArrayBufferOrArrayBufferViewOrDictionary& ArrayBufferOrArrayBufferViewOrDictionary::operator=(const ArrayBufferOrArrayBufferViewOrDictionary&) = default;

DEFINE_TRACE(ArrayBufferOrArrayBufferViewOrDictionary)
{
}

void V8ArrayBufferOrArrayBufferViewOrDictionary::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ArrayBufferOrArrayBufferViewOrDictionary& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8ArrayBuffer::hasInstance(v8Value, isolate)) {
        RefPtr<DOMArrayBuffer> cppValue = V8ArrayBuffer::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBuffer(cppValue);
        return;
    }

    if (V8ArrayBufferView::hasInstance(v8Value, isolate)) {
        RefPtr<DOMArrayBufferView> cppValue = V8ArrayBufferView::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBufferView(cppValue);
        return;
    }

    if (isUndefinedOrNull(v8Value) || v8Value->IsObject()) {
        Dictionary cppValue = Dictionary(v8Value, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDictionary(cppValue);
        return;
    }

    exceptionState.throwTypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView or Dictionary)'");
}

v8::Local<v8::Value> toV8(const ArrayBufferOrArrayBufferViewOrDictionary& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case ArrayBufferOrArrayBufferViewOrDictionary::SpecificTypeNone:
        return v8::Null(isolate);
    case ArrayBufferOrArrayBufferViewOrDictionary::SpecificTypeArrayBuffer:
        return toV8(impl.getAsArrayBuffer(), creationContext, isolate);
    case ArrayBufferOrArrayBufferViewOrDictionary::SpecificTypeArrayBufferView:
        return toV8(impl.getAsArrayBufferView(), creationContext, isolate);
    case ArrayBufferOrArrayBufferViewOrDictionary::SpecificTypeDictionary:
        return impl.getAsDictionary().v8Value();
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

ArrayBufferOrArrayBufferViewOrDictionary NativeValueTraits<ArrayBufferOrArrayBufferViewOrDictionary>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ArrayBufferOrArrayBufferViewOrDictionary impl;
    V8ArrayBufferOrArrayBufferViewOrDictionary::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

ArrayBufferViewOrBlobOrStringOrFormData::ArrayBufferViewOrBlobOrStringOrFormData()
    : m_type(SpecificTypeNone)
{
}

PassRefPtr<DOMArrayBufferView> ArrayBufferViewOrBlobOrStringOrFormData::getAsArrayBufferView() const
{
    ASSERT(isArrayBufferView());
    return m_arrayBufferView;
}

void ArrayBufferViewOrBlobOrStringOrFormData::setArrayBufferView(PassRefPtr<DOMArrayBufferView> value)
{
    ASSERT(isNull());
    m_arrayBufferView = value;
    m_type = SpecificTypeArrayBufferView;
}

ArrayBufferViewOrBlobOrStringOrFormData ArrayBufferViewOrBlobOrStringOrFormData::fromArrayBufferView(PassRefPtr<DOMArrayBufferView> value)
{
    ArrayBufferViewOrBlobOrStringOrFormData container;
    container.setArrayBufferView(value);
    return container;
}

Blob* ArrayBufferViewOrBlobOrStringOrFormData::getAsBlob() const
{
    ASSERT(isBlob());
    return m_blob;
}

void ArrayBufferViewOrBlobOrStringOrFormData::setBlob(Blob* value)
{
    ASSERT(isNull());
    m_blob = value;
    m_type = SpecificTypeBlob;
}

ArrayBufferViewOrBlobOrStringOrFormData ArrayBufferViewOrBlobOrStringOrFormData::fromBlob(Blob* value)
{
    ArrayBufferViewOrBlobOrStringOrFormData container;
    container.setBlob(value);
    return container;
}

String ArrayBufferViewOrBlobOrStringOrFormData::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void ArrayBufferViewOrBlobOrStringOrFormData::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

ArrayBufferViewOrBlobOrStringOrFormData ArrayBufferViewOrBlobOrStringOrFormData::fromString(String value)
{
    ArrayBufferViewOrBlobOrStringOrFormData container;
    container.setString(value);
    return container;
}

DOMFormData* ArrayBufferViewOrBlobOrStringOrFormData::getAsFormData() const
{
    ASSERT(isFormData());
    return m_formData;
}

void ArrayBufferViewOrBlobOrStringOrFormData::setFormData(DOMFormData* value)
{
    ASSERT(isNull());
    m_formData = value;
    m_type = SpecificTypeFormData;
}

ArrayBufferViewOrBlobOrStringOrFormData ArrayBufferViewOrBlobOrStringOrFormData::fromFormData(DOMFormData* value)
{
    ArrayBufferViewOrBlobOrStringOrFormData container;
    container.setFormData(value);
    return container;
}

ArrayBufferViewOrBlobOrStringOrFormData::ArrayBufferViewOrBlobOrStringOrFormData(const ArrayBufferViewOrBlobOrStringOrFormData&) = default;
ArrayBufferViewOrBlobOrStringOrFormData::~ArrayBufferViewOrBlobOrStringOrFormData() = default;
ArrayBufferViewOrBlobOrStringOrFormData& ArrayBufferViewOrBlobOrStringOrFormData::operator=(const ArrayBufferViewOrBlobOrStringOrFormData&) = default;

DEFINE_TRACE(ArrayBufferViewOrBlobOrStringOrFormData)
{
    visitor->trace(m_blob);
    visitor->trace(m_formData);
}

void V8ArrayBufferViewOrBlobOrStringOrFormData::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ArrayBufferViewOrBlobOrStringOrFormData& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8Blob::hasInstance(v8Value, isolate)) {
        RawPtr<Blob> cppValue = V8Blob::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setBlob(cppValue);
        return;
    }

    if (V8FormData::hasInstance(v8Value, isolate)) {
        RawPtr<DOMFormData> cppValue = V8FormData::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setFormData(cppValue);
        return;
    }

    if (V8ArrayBufferView::hasInstance(v8Value, isolate)) {
        RefPtr<DOMArrayBufferView> cppValue = V8ArrayBufferView::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBufferView(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const ArrayBufferViewOrBlobOrStringOrFormData& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case ArrayBufferViewOrBlobOrStringOrFormData::SpecificTypeNone:
        return v8::Null(isolate);
    case ArrayBufferViewOrBlobOrStringOrFormData::SpecificTypeArrayBufferView:
        return toV8(impl.getAsArrayBufferView(), creationContext, isolate);
    case ArrayBufferViewOrBlobOrStringOrFormData::SpecificTypeBlob:
        return toV8(impl.getAsBlob(), creationContext, isolate);
    case ArrayBufferViewOrBlobOrStringOrFormData::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    case ArrayBufferViewOrBlobOrStringOrFormData::SpecificTypeFormData:
        return toV8(impl.getAsFormData(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

ArrayBufferViewOrBlobOrStringOrFormData NativeValueTraits<ArrayBufferViewOrBlobOrStringOrFormData>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ArrayBufferViewOrBlobOrStringOrFormData impl;
    V8ArrayBufferViewOrBlobOrStringOrFormData::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString()
    : m_type(SpecificTypeNone)
{
}

Blob* BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::getAsBlob() const
{
    ASSERT(isBlob());
    return m_blob;
}

void BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::setBlob(Blob* value)
{
    ASSERT(isNull());
    m_blob = value;
    m_type = SpecificTypeBlob;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::fromBlob(Blob* value)
{
    BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString container;
    container.setBlob(value);
    return container;
}

PassRefPtr<DOMArrayBuffer> BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::getAsArrayBuffer() const
{
    ASSERT(isArrayBuffer());
    return m_arrayBuffer;
}

void BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::setArrayBuffer(PassRefPtr<DOMArrayBuffer> value)
{
    ASSERT(isNull());
    m_arrayBuffer = value;
    m_type = SpecificTypeArrayBuffer;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::fromArrayBuffer(PassRefPtr<DOMArrayBuffer> value)
{
    BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString container;
    container.setArrayBuffer(value);
    return container;
}

PassRefPtr<DOMArrayBufferView> BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::getAsArrayBufferView() const
{
    ASSERT(isArrayBufferView());
    return m_arrayBufferView;
}

void BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::setArrayBufferView(PassRefPtr<DOMArrayBufferView> value)
{
    ASSERT(isNull());
    m_arrayBufferView = value;
    m_type = SpecificTypeArrayBufferView;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::fromArrayBufferView(PassRefPtr<DOMArrayBufferView> value)
{
    BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString container;
    container.setArrayBufferView(value);
    return container;
}

DOMFormData* BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::getAsFormData() const
{
    ASSERT(isFormData());
    return m_formData;
}

void BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::setFormData(DOMFormData* value)
{
    ASSERT(isNull());
    m_formData = value;
    m_type = SpecificTypeFormData;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::fromFormData(DOMFormData* value)
{
    BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString container;
    container.setFormData(value);
    return container;
}

String BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::getAsUSVString() const
{
    ASSERT(isUSVString());
    return m_uSVString;
}

void BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::setUSVString(String value)
{
    ASSERT(isNull());
    m_uSVString = value;
    m_type = SpecificTypeUSVString;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::fromUSVString(String value)
{
    BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString container;
    container.setUSVString(value);
    return container;
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString(const BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString&) = default;
BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::~BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString() = default;
BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString& BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::operator=(const BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString&) = default;

DEFINE_TRACE(BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString)
{
    visitor->trace(m_blob);
    visitor->trace(m_formData);
}

void V8BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8Blob::hasInstance(v8Value, isolate)) {
        RawPtr<Blob> cppValue = V8Blob::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setBlob(cppValue);
        return;
    }

    if (V8FormData::hasInstance(v8Value, isolate)) {
        RawPtr<DOMFormData> cppValue = V8FormData::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setFormData(cppValue);
        return;
    }

    if (V8ArrayBuffer::hasInstance(v8Value, isolate)) {
        RefPtr<DOMArrayBuffer> cppValue = V8ArrayBuffer::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBuffer(cppValue);
        return;
    }

    if (V8ArrayBufferView::hasInstance(v8Value, isolate)) {
        RefPtr<DOMArrayBufferView> cppValue = V8ArrayBufferView::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBufferView(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = toUSVString(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUSVString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::SpecificTypeNone:
        return v8::Null(isolate);
    case BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::SpecificTypeBlob:
        return toV8(impl.getAsBlob(), creationContext, isolate);
    case BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::SpecificTypeArrayBuffer:
        return toV8(impl.getAsArrayBuffer(), creationContext, isolate);
    case BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::SpecificTypeArrayBufferView:
        return toV8(impl.getAsArrayBufferView(), creationContext, isolate);
    case BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::SpecificTypeFormData:
        return toV8(impl.getAsFormData(), creationContext, isolate);
    case BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::SpecificTypeUSVString:
        return v8String(isolate, impl.getAsUSVString());
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString NativeValueTraits<BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString impl;
    V8BlobOrArrayBufferOrArrayBufferViewOrFormDataOrUSVString::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

DictionaryOrString::DictionaryOrString()
    : m_type(SpecificTypeNone)
{
}

Dictionary DictionaryOrString::getAsDictionary() const
{
    ASSERT(isDictionary());
    return m_dictionary;
}

void DictionaryOrString::setDictionary(Dictionary value)
{
    ASSERT(isNull());
    m_dictionary = value;
    m_type = SpecificTypeDictionary;
}

DictionaryOrString DictionaryOrString::fromDictionary(Dictionary value)
{
    DictionaryOrString container;
    container.setDictionary(value);
    return container;
}

String DictionaryOrString::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void DictionaryOrString::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

DictionaryOrString DictionaryOrString::fromString(String value)
{
    DictionaryOrString container;
    container.setString(value);
    return container;
}

DictionaryOrString::DictionaryOrString(const DictionaryOrString&) = default;
DictionaryOrString::~DictionaryOrString() = default;
DictionaryOrString& DictionaryOrString::operator=(const DictionaryOrString&) = default;

DEFINE_TRACE(DictionaryOrString)
{
}

void V8DictionaryOrString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, DictionaryOrString& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (isUndefinedOrNull(v8Value) || v8Value->IsObject()) {
        Dictionary cppValue = Dictionary(v8Value, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDictionary(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const DictionaryOrString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case DictionaryOrString::SpecificTypeNone:
        return v8::Null(isolate);
    case DictionaryOrString::SpecificTypeDictionary:
        return impl.getAsDictionary().v8Value();
    case DictionaryOrString::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

DictionaryOrString NativeValueTraits<DictionaryOrString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    DictionaryOrString impl;
    V8DictionaryOrString::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap()
    : m_type(SpecificTypeNone)
{
}

PassRefPtrWillBeRawPtr<HTMLImageElement> HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::getAsHTMLImageElement() const
{
    ASSERT(isHTMLImageElement());
    return m_htmlImageElement;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::setHTMLImageElement(PassRefPtrWillBeRawPtr<HTMLImageElement> value)
{
    ASSERT(isNull());
    m_htmlImageElement = value;
    m_type = SpecificTypeHTMLImageElement;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::fromHTMLImageElement(PassRefPtrWillBeRawPtr<HTMLImageElement> value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap container;
    container.setHTMLImageElement(value);
    return container;
}

PassRefPtrWillBeRawPtr<HTMLVideoElement> HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::getAsHTMLVideoElement() const
{
    ASSERT(isHTMLVideoElement());
    return m_htmlVideoElement;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::setHTMLVideoElement(PassRefPtrWillBeRawPtr<HTMLVideoElement> value)
{
    ASSERT(isNull());
    m_htmlVideoElement = value;
    m_type = SpecificTypeHTMLVideoElement;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::fromHTMLVideoElement(PassRefPtrWillBeRawPtr<HTMLVideoElement> value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap container;
    container.setHTMLVideoElement(value);
    return container;
}

PassRefPtrWillBeRawPtr<HTMLCanvasElement> HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::getAsHTMLCanvasElement() const
{
    ASSERT(isHTMLCanvasElement());
    return m_htmlCanvasElement;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::setHTMLCanvasElement(PassRefPtrWillBeRawPtr<HTMLCanvasElement> value)
{
    ASSERT(isNull());
    m_htmlCanvasElement = value;
    m_type = SpecificTypeHTMLCanvasElement;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::fromHTMLCanvasElement(PassRefPtrWillBeRawPtr<HTMLCanvasElement> value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap container;
    container.setHTMLCanvasElement(value);
    return container;
}

PassRefPtrWillBeRawPtr<ImageBitmap> HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::getAsImageBitmap() const
{
    ASSERT(isImageBitmap());
    return m_imageBitmap;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::setImageBitmap(PassRefPtrWillBeRawPtr<ImageBitmap> value)
{
    ASSERT(isNull());
    m_imageBitmap = value;
    m_type = SpecificTypeImageBitmap;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::fromImageBitmap(PassRefPtrWillBeRawPtr<ImageBitmap> value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap container;
    container.setImageBitmap(value);
    return container;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap(const HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap&) = default;
HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::~HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap() = default;
HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap& HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::operator=(const HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap&) = default;

DEFINE_TRACE(HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap)
{
    visitor->trace(m_htmlImageElement);
    visitor->trace(m_htmlVideoElement);
    visitor->trace(m_htmlCanvasElement);
    visitor->trace(m_imageBitmap);
}

void V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8HTMLImageElement::hasInstance(v8Value, isolate)) {
        RefPtrWillBeRawPtr<HTMLImageElement> cppValue = V8HTMLImageElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLImageElement(cppValue);
        return;
    }

    if (V8HTMLVideoElement::hasInstance(v8Value, isolate)) {
        RefPtrWillBeRawPtr<HTMLVideoElement> cppValue = V8HTMLVideoElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLVideoElement(cppValue);
        return;
    }

    if (V8HTMLCanvasElement::hasInstance(v8Value, isolate)) {
        RefPtrWillBeRawPtr<HTMLCanvasElement> cppValue = V8HTMLCanvasElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLCanvasElement(cppValue);
        return;
    }

    if (V8ImageBitmap::hasInstance(v8Value, isolate)) {
        RefPtrWillBeRawPtr<ImageBitmap> cppValue = V8ImageBitmap::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setImageBitmap(cppValue);
        return;
    }

    exceptionState.throwTypeError("The provided value is not of type '(HTMLImageElement or HTMLVideoElement or HTMLCanvasElement or ImageBitmap)'");
}

v8::Local<v8::Value> toV8(const HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::SpecificTypeNone:
        return v8::Null(isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::SpecificTypeHTMLImageElement:
        return toV8(impl.getAsHTMLImageElement(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::SpecificTypeHTMLVideoElement:
        return toV8(impl.getAsHTMLVideoElement(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::SpecificTypeHTMLCanvasElement:
        return toV8(impl.getAsHTMLCanvasElement(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::SpecificTypeImageBitmap:
        return toV8(impl.getAsImageBitmap(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap NativeValueTraits<HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap impl;
    V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmap::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

RequestOrUSVString::RequestOrUSVString()
    : m_type(SpecificTypeNone)
{
}

Request* RequestOrUSVString::getAsRequest() const
{
    ASSERT(isRequest());
    return m_request;
}

void RequestOrUSVString::setRequest(Request* value)
{
    ASSERT(isNull());
    m_request = value;
    m_type = SpecificTypeRequest;
}

RequestOrUSVString RequestOrUSVString::fromRequest(Request* value)
{
    RequestOrUSVString container;
    container.setRequest(value);
    return container;
}

String RequestOrUSVString::getAsUSVString() const
{
    ASSERT(isUSVString());
    return m_uSVString;
}

void RequestOrUSVString::setUSVString(String value)
{
    ASSERT(isNull());
    m_uSVString = value;
    m_type = SpecificTypeUSVString;
}

RequestOrUSVString RequestOrUSVString::fromUSVString(String value)
{
    RequestOrUSVString container;
    container.setUSVString(value);
    return container;
}

RequestOrUSVString::RequestOrUSVString(const RequestOrUSVString&) = default;
RequestOrUSVString::~RequestOrUSVString() = default;
RequestOrUSVString& RequestOrUSVString::operator=(const RequestOrUSVString&) = default;

DEFINE_TRACE(RequestOrUSVString)
{
    visitor->trace(m_request);
}

void V8RequestOrUSVString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, RequestOrUSVString& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8Request::hasInstance(v8Value, isolate)) {
        RawPtr<Request> cppValue = V8Request::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setRequest(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = toUSVString(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUSVString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const RequestOrUSVString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case RequestOrUSVString::SpecificTypeNone:
        return v8::Null(isolate);
    case RequestOrUSVString::SpecificTypeRequest:
        return toV8(impl.getAsRequest(), creationContext, isolate);
    case RequestOrUSVString::SpecificTypeUSVString:
        return v8String(isolate, impl.getAsUSVString());
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

RequestOrUSVString NativeValueTraits<RequestOrUSVString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    RequestOrUSVString impl;
    V8RequestOrUSVString::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

ServiceWorkerOrMessagePort::ServiceWorkerOrMessagePort()
    : m_type(SpecificTypeNone)
{
}

PassRefPtrWillBeRawPtr<ServiceWorker> ServiceWorkerOrMessagePort::getAsServiceWorker() const
{
    ASSERT(isServiceWorker());
    return m_serviceWorker;
}

void ServiceWorkerOrMessagePort::setServiceWorker(PassRefPtrWillBeRawPtr<ServiceWorker> value)
{
    ASSERT(isNull());
    m_serviceWorker = value;
    m_type = SpecificTypeServiceWorker;
}

ServiceWorkerOrMessagePort ServiceWorkerOrMessagePort::fromServiceWorker(PassRefPtrWillBeRawPtr<ServiceWorker> value)
{
    ServiceWorkerOrMessagePort container;
    container.setServiceWorker(value);
    return container;
}

MessagePort* ServiceWorkerOrMessagePort::getAsMessagePort() const
{
    ASSERT(isMessagePort());
    return m_messagePort;
}

void ServiceWorkerOrMessagePort::setMessagePort(MessagePort* value)
{
    ASSERT(isNull());
    m_messagePort = value;
    m_type = SpecificTypeMessagePort;
}

ServiceWorkerOrMessagePort ServiceWorkerOrMessagePort::fromMessagePort(MessagePort* value)
{
    ServiceWorkerOrMessagePort container;
    container.setMessagePort(value);
    return container;
}

ServiceWorkerOrMessagePort::ServiceWorkerOrMessagePort(const ServiceWorkerOrMessagePort&) = default;
ServiceWorkerOrMessagePort::~ServiceWorkerOrMessagePort() = default;
ServiceWorkerOrMessagePort& ServiceWorkerOrMessagePort::operator=(const ServiceWorkerOrMessagePort&) = default;

DEFINE_TRACE(ServiceWorkerOrMessagePort)
{
    visitor->trace(m_serviceWorker);
    visitor->trace(m_messagePort);
}

void V8ServiceWorkerOrMessagePort::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ServiceWorkerOrMessagePort& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8ServiceWorker::hasInstance(v8Value, isolate)) {
        RefPtrWillBeRawPtr<ServiceWorker> cppValue = V8ServiceWorker::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setServiceWorker(cppValue);
        return;
    }

    if (V8MessagePort::hasInstance(v8Value, isolate)) {
        RawPtr<MessagePort> cppValue = V8MessagePort::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setMessagePort(cppValue);
        return;
    }

    exceptionState.throwTypeError("The provided value is not of type '(ServiceWorker or MessagePort)'");
}

v8::Local<v8::Value> toV8(const ServiceWorkerOrMessagePort& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case ServiceWorkerOrMessagePort::SpecificTypeNone:
        return v8::Null(isolate);
    case ServiceWorkerOrMessagePort::SpecificTypeServiceWorker:
        return toV8(impl.getAsServiceWorker(), creationContext, isolate);
    case ServiceWorkerOrMessagePort::SpecificTypeMessagePort:
        return toV8(impl.getAsMessagePort(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

ServiceWorkerOrMessagePort NativeValueTraits<ServiceWorkerOrMessagePort>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ServiceWorkerOrMessagePort impl;
    V8ServiceWorkerOrMessagePort::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

StringOrCanvasGradientOrCanvasPattern::StringOrCanvasGradientOrCanvasPattern()
    : m_type(SpecificTypeNone)
{
}

String StringOrCanvasGradientOrCanvasPattern::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void StringOrCanvasGradientOrCanvasPattern::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

StringOrCanvasGradientOrCanvasPattern StringOrCanvasGradientOrCanvasPattern::fromString(String value)
{
    StringOrCanvasGradientOrCanvasPattern container;
    container.setString(value);
    return container;
}

CanvasGradient* StringOrCanvasGradientOrCanvasPattern::getAsCanvasGradient() const
{
    ASSERT(isCanvasGradient());
    return m_canvasGradient;
}

void StringOrCanvasGradientOrCanvasPattern::setCanvasGradient(CanvasGradient* value)
{
    ASSERT(isNull());
    m_canvasGradient = value;
    m_type = SpecificTypeCanvasGradient;
}

StringOrCanvasGradientOrCanvasPattern StringOrCanvasGradientOrCanvasPattern::fromCanvasGradient(CanvasGradient* value)
{
    StringOrCanvasGradientOrCanvasPattern container;
    container.setCanvasGradient(value);
    return container;
}

CanvasPattern* StringOrCanvasGradientOrCanvasPattern::getAsCanvasPattern() const
{
    ASSERT(isCanvasPattern());
    return m_canvasPattern;
}

void StringOrCanvasGradientOrCanvasPattern::setCanvasPattern(CanvasPattern* value)
{
    ASSERT(isNull());
    m_canvasPattern = value;
    m_type = SpecificTypeCanvasPattern;
}

StringOrCanvasGradientOrCanvasPattern StringOrCanvasGradientOrCanvasPattern::fromCanvasPattern(CanvasPattern* value)
{
    StringOrCanvasGradientOrCanvasPattern container;
    container.setCanvasPattern(value);
    return container;
}

StringOrCanvasGradientOrCanvasPattern::StringOrCanvasGradientOrCanvasPattern(const StringOrCanvasGradientOrCanvasPattern&) = default;
StringOrCanvasGradientOrCanvasPattern::~StringOrCanvasGradientOrCanvasPattern() = default;
StringOrCanvasGradientOrCanvasPattern& StringOrCanvasGradientOrCanvasPattern::operator=(const StringOrCanvasGradientOrCanvasPattern&) = default;

DEFINE_TRACE(StringOrCanvasGradientOrCanvasPattern)
{
    visitor->trace(m_canvasGradient);
    visitor->trace(m_canvasPattern);
}

void V8StringOrCanvasGradientOrCanvasPattern::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, StringOrCanvasGradientOrCanvasPattern& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8CanvasGradient::hasInstance(v8Value, isolate)) {
        RawPtr<CanvasGradient> cppValue = V8CanvasGradient::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setCanvasGradient(cppValue);
        return;
    }

    if (V8CanvasPattern::hasInstance(v8Value, isolate)) {
        RawPtr<CanvasPattern> cppValue = V8CanvasPattern::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setCanvasPattern(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const StringOrCanvasGradientOrCanvasPattern& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case StringOrCanvasGradientOrCanvasPattern::SpecificTypeNone:
        return v8::Null(isolate);
    case StringOrCanvasGradientOrCanvasPattern::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    case StringOrCanvasGradientOrCanvasPattern::SpecificTypeCanvasGradient:
        return toV8(impl.getAsCanvasGradient(), creationContext, isolate);
    case StringOrCanvasGradientOrCanvasPattern::SpecificTypeCanvasPattern:
        return toV8(impl.getAsCanvasPattern(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

StringOrCanvasGradientOrCanvasPattern NativeValueTraits<StringOrCanvasGradientOrCanvasPattern>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    StringOrCanvasGradientOrCanvasPattern impl;
    V8StringOrCanvasGradientOrCanvasPattern::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

StringOrStringSequence::StringOrStringSequence()
    : m_type(SpecificTypeNone)
{
}

String StringOrStringSequence::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void StringOrStringSequence::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

StringOrStringSequence StringOrStringSequence::fromString(String value)
{
    StringOrStringSequence container;
    container.setString(value);
    return container;
}

const Vector<String>& StringOrStringSequence::getAsStringSequence() const
{
    ASSERT(isStringSequence());
    return m_stringSequence;
}

void StringOrStringSequence::setStringSequence(const Vector<String>& value)
{
    ASSERT(isNull());
    m_stringSequence = value;
    m_type = SpecificTypeStringSequence;
}

StringOrStringSequence StringOrStringSequence::fromStringSequence(const Vector<String>& value)
{
    StringOrStringSequence container;
    container.setStringSequence(value);
    return container;
}

StringOrStringSequence::StringOrStringSequence(const StringOrStringSequence&) = default;
StringOrStringSequence::~StringOrStringSequence() = default;
StringOrStringSequence& StringOrStringSequence::operator=(const StringOrStringSequence&) = default;

DEFINE_TRACE(StringOrStringSequence)
{
}

void V8StringOrStringSequence::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, StringOrStringSequence& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (v8Value->IsArray()) {
        Vector<String> cppValue = toImplArray<Vector<String>>(v8Value, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringSequence(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const StringOrStringSequence& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case StringOrStringSequence::SpecificTypeNone:
        return v8::Null(isolate);
    case StringOrStringSequence::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    case StringOrStringSequence::SpecificTypeStringSequence:
        return toV8(impl.getAsStringSequence(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

StringOrStringSequence NativeValueTraits<StringOrStringSequence>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    StringOrStringSequence impl;
    V8StringOrStringSequence::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

StringOrStringSequenceOrDOMStringList::StringOrStringSequenceOrDOMStringList()
    : m_type(SpecificTypeNone)
{
}

String StringOrStringSequenceOrDOMStringList::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void StringOrStringSequenceOrDOMStringList::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

StringOrStringSequenceOrDOMStringList StringOrStringSequenceOrDOMStringList::fromString(String value)
{
    StringOrStringSequenceOrDOMStringList container;
    container.setString(value);
    return container;
}

const Vector<String>& StringOrStringSequenceOrDOMStringList::getAsStringSequence() const
{
    ASSERT(isStringSequence());
    return m_stringSequence;
}

void StringOrStringSequenceOrDOMStringList::setStringSequence(const Vector<String>& value)
{
    ASSERT(isNull());
    m_stringSequence = value;
    m_type = SpecificTypeStringSequence;
}

StringOrStringSequenceOrDOMStringList StringOrStringSequenceOrDOMStringList::fromStringSequence(const Vector<String>& value)
{
    StringOrStringSequenceOrDOMStringList container;
    container.setStringSequence(value);
    return container;
}

PassRefPtrWillBeRawPtr<DOMStringList> StringOrStringSequenceOrDOMStringList::getAsDOMStringList() const
{
    ASSERT(isDOMStringList());
    return m_dOMStringList;
}

void StringOrStringSequenceOrDOMStringList::setDOMStringList(PassRefPtrWillBeRawPtr<DOMStringList> value)
{
    ASSERT(isNull());
    m_dOMStringList = value;
    m_type = SpecificTypeDOMStringList;
}

StringOrStringSequenceOrDOMStringList StringOrStringSequenceOrDOMStringList::fromDOMStringList(PassRefPtrWillBeRawPtr<DOMStringList> value)
{
    StringOrStringSequenceOrDOMStringList container;
    container.setDOMStringList(value);
    return container;
}

StringOrStringSequenceOrDOMStringList::StringOrStringSequenceOrDOMStringList(const StringOrStringSequenceOrDOMStringList&) = default;
StringOrStringSequenceOrDOMStringList::~StringOrStringSequenceOrDOMStringList() = default;
StringOrStringSequenceOrDOMStringList& StringOrStringSequenceOrDOMStringList::operator=(const StringOrStringSequenceOrDOMStringList&) = default;

DEFINE_TRACE(StringOrStringSequenceOrDOMStringList)
{
    visitor->trace(m_dOMStringList);
}

void V8StringOrStringSequenceOrDOMStringList::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, StringOrStringSequenceOrDOMStringList& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (V8DOMStringList::hasInstance(v8Value, isolate)) {
        RefPtrWillBeRawPtr<DOMStringList> cppValue = V8DOMStringList::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setDOMStringList(cppValue);
        return;
    }

    if (v8Value->IsArray()) {
        Vector<String> cppValue = toImplArray<Vector<String>>(v8Value, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringSequence(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const StringOrStringSequenceOrDOMStringList& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case StringOrStringSequenceOrDOMStringList::SpecificTypeNone:
        return v8::Null(isolate);
    case StringOrStringSequenceOrDOMStringList::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    case StringOrStringSequenceOrDOMStringList::SpecificTypeStringSequence:
        return toV8(impl.getAsStringSequence(), creationContext, isolate);
    case StringOrStringSequenceOrDOMStringList::SpecificTypeDOMStringList:
        return toV8(impl.getAsDOMStringList(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

StringOrStringSequenceOrDOMStringList NativeValueTraits<StringOrStringSequenceOrDOMStringList>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    StringOrStringSequenceOrDOMStringList impl;
    V8StringOrStringSequenceOrDOMStringList::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

StringOrUnsignedLong::StringOrUnsignedLong()
    : m_type(SpecificTypeNone)
{
}

String StringOrUnsignedLong::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void StringOrUnsignedLong::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

StringOrUnsignedLong StringOrUnsignedLong::fromString(String value)
{
    StringOrUnsignedLong container;
    container.setString(value);
    return container;
}

unsigned StringOrUnsignedLong::getAsUnsignedLong() const
{
    ASSERT(isUnsignedLong());
    return m_unsignedLong;
}

void StringOrUnsignedLong::setUnsignedLong(unsigned value)
{
    ASSERT(isNull());
    m_unsignedLong = value;
    m_type = SpecificTypeUnsignedLong;
}

StringOrUnsignedLong StringOrUnsignedLong::fromUnsignedLong(unsigned value)
{
    StringOrUnsignedLong container;
    container.setUnsignedLong(value);
    return container;
}

StringOrUnsignedLong::StringOrUnsignedLong(const StringOrUnsignedLong&) = default;
StringOrUnsignedLong::~StringOrUnsignedLong() = default;
StringOrUnsignedLong& StringOrUnsignedLong::operator=(const StringOrUnsignedLong&) = default;

DEFINE_TRACE(StringOrUnsignedLong)
{
}

void V8StringOrUnsignedLong::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, StringOrUnsignedLong& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (v8Value->IsNumber()) {
        unsigned cppValue = toUInt32(isolate, v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnsignedLong(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const StringOrUnsignedLong& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case StringOrUnsignedLong::SpecificTypeNone:
        return v8::Null(isolate);
    case StringOrUnsignedLong::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    case StringOrUnsignedLong::SpecificTypeUnsignedLong:
        return v8::Integer::NewFromUnsigned(isolate, impl.getAsUnsignedLong());
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

StringOrUnsignedLong NativeValueTraits<StringOrUnsignedLong>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    StringOrUnsignedLong impl;
    V8StringOrUnsignedLong::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

UnsignedLongLongOrString::UnsignedLongLongOrString()
    : m_type(SpecificTypeNone)
{
}

unsigned long long UnsignedLongLongOrString::getAsUnsignedLongLong() const
{
    ASSERT(isUnsignedLongLong());
    return m_unsignedLongLong;
}

void UnsignedLongLongOrString::setUnsignedLongLong(unsigned long long value)
{
    ASSERT(isNull());
    m_unsignedLongLong = value;
    m_type = SpecificTypeUnsignedLongLong;
}

UnsignedLongLongOrString UnsignedLongLongOrString::fromUnsignedLongLong(unsigned long long value)
{
    UnsignedLongLongOrString container;
    container.setUnsignedLongLong(value);
    return container;
}

String UnsignedLongLongOrString::getAsString() const
{
    ASSERT(isString());
    return m_string;
}

void UnsignedLongLongOrString::setString(String value)
{
    ASSERT(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

UnsignedLongLongOrString UnsignedLongLongOrString::fromString(String value)
{
    UnsignedLongLongOrString container;
    container.setString(value);
    return container;
}

UnsignedLongLongOrString::UnsignedLongLongOrString(const UnsignedLongLongOrString&) = default;
UnsignedLongLongOrString::~UnsignedLongLongOrString() = default;
UnsignedLongLongOrString& UnsignedLongLongOrString::operator=(const UnsignedLongLongOrString&) = default;

DEFINE_TRACE(UnsignedLongLongOrString)
{
}

void V8UnsignedLongLongOrString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, UnsignedLongLongOrString& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (v8Value->IsNumber()) {
        unsigned long long cppValue = toUInt64(isolate, v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnsignedLongLong(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const UnsignedLongLongOrString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case UnsignedLongLongOrString::SpecificTypeNone:
        return v8::Null(isolate);
    case UnsignedLongLongOrString::SpecificTypeUnsignedLongLong:
        return v8::Number::New(isolate, static_cast<double>(impl.getAsUnsignedLongLong()));
    case UnsignedLongLongOrString::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

UnsignedLongLongOrString NativeValueTraits<UnsignedLongLongOrString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    UnsignedLongLongOrString impl;
    V8UnsignedLongLongOrString::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

UnsignedLongOrUnsignedLongSequence::UnsignedLongOrUnsignedLongSequence()
    : m_type(SpecificTypeNone)
{
}

unsigned UnsignedLongOrUnsignedLongSequence::getAsUnsignedLong() const
{
    ASSERT(isUnsignedLong());
    return m_unsignedLong;
}

void UnsignedLongOrUnsignedLongSequence::setUnsignedLong(unsigned value)
{
    ASSERT(isNull());
    m_unsignedLong = value;
    m_type = SpecificTypeUnsignedLong;
}

UnsignedLongOrUnsignedLongSequence UnsignedLongOrUnsignedLongSequence::fromUnsignedLong(unsigned value)
{
    UnsignedLongOrUnsignedLongSequence container;
    container.setUnsignedLong(value);
    return container;
}

const Vector<unsigned>& UnsignedLongOrUnsignedLongSequence::getAsUnsignedLongSequence() const
{
    ASSERT(isUnsignedLongSequence());
    return m_unsignedLongSequence;
}

void UnsignedLongOrUnsignedLongSequence::setUnsignedLongSequence(const Vector<unsigned>& value)
{
    ASSERT(isNull());
    m_unsignedLongSequence = value;
    m_type = SpecificTypeUnsignedLongSequence;
}

UnsignedLongOrUnsignedLongSequence UnsignedLongOrUnsignedLongSequence::fromUnsignedLongSequence(const Vector<unsigned>& value)
{
    UnsignedLongOrUnsignedLongSequence container;
    container.setUnsignedLongSequence(value);
    return container;
}

UnsignedLongOrUnsignedLongSequence::UnsignedLongOrUnsignedLongSequence(const UnsignedLongOrUnsignedLongSequence&) = default;
UnsignedLongOrUnsignedLongSequence::~UnsignedLongOrUnsignedLongSequence() = default;
UnsignedLongOrUnsignedLongSequence& UnsignedLongOrUnsignedLongSequence::operator=(const UnsignedLongOrUnsignedLongSequence&) = default;

DEFINE_TRACE(UnsignedLongOrUnsignedLongSequence)
{
}

void V8UnsignedLongOrUnsignedLongSequence::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, UnsignedLongOrUnsignedLongSequence& impl, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (v8Value->IsArray()) {
        Vector<unsigned> cppValue = toImplArray<Vector<unsigned>>(v8Value, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnsignedLongSequence(cppValue);
        return;
    }

    if (v8Value->IsNumber()) {
        unsigned cppValue = toUInt32(isolate, v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnsignedLong(cppValue);
        return;
    }

    {
        unsigned cppValue = toUInt32(isolate, v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnsignedLong(cppValue);
        return;
    }

}

v8::Local<v8::Value> toV8(const UnsignedLongOrUnsignedLongSequence& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case UnsignedLongOrUnsignedLongSequence::SpecificTypeNone:
        return v8::Null(isolate);
    case UnsignedLongOrUnsignedLongSequence::SpecificTypeUnsignedLong:
        return v8::Integer::NewFromUnsigned(isolate, impl.getAsUnsignedLong());
    case UnsignedLongOrUnsignedLongSequence::SpecificTypeUnsignedLongSequence:
        return toV8(impl.getAsUnsignedLongSequence(), creationContext, isolate);
    default:
        ASSERT_NOT_REACHED();
    }
    return v8::Local<v8::Value>();
}

UnsignedLongOrUnsignedLongSequence NativeValueTraits<UnsignedLongOrUnsignedLongSequence>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    UnsignedLongOrUnsignedLongSequence impl;
    V8UnsignedLongOrUnsignedLongSequence::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
