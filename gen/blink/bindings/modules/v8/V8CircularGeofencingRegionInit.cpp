// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CircularGeofencingRegionInit.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8CircularGeofencingRegionInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, CircularGeofencingRegionInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> idValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "id")).ToLocal(&idValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (idValue.IsEmpty() || idValue->IsUndefined()) {
            // Do nothing.
        } else if (idValue->IsNull()) {
            impl.setIdToNull();
        } else {
            V8StringResource<> id = idValue;
            if (!id.prepare(exceptionState))
                return;
            impl.setId(id);
        }
    }

    {
        v8::Local<v8::Value> latitudeValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "latitude")).ToLocal(&latitudeValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (latitudeValue.IsEmpty() || latitudeValue->IsUndefined()) {
            // Do nothing.
        } else {
            double latitude = toRestrictedDouble(isolate, latitudeValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setLatitude(latitude);
        }
    }

    {
        v8::Local<v8::Value> longitudeValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longitude")).ToLocal(&longitudeValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (longitudeValue.IsEmpty() || longitudeValue->IsUndefined()) {
            // Do nothing.
        } else {
            double longitude = toRestrictedDouble(isolate, longitudeValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setLongitude(longitude);
        }
    }

    {
        v8::Local<v8::Value> radiusValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "radius")).ToLocal(&radiusValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (radiusValue.IsEmpty() || radiusValue->IsUndefined()) {
            // Do nothing.
        } else {
            double radius = toRestrictedDouble(isolate, radiusValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setRadius(radius);
        }
    }

}

v8::Local<v8::Value> toV8(const CircularGeofencingRegionInit& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8CircularGeofencingRegionInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8CircularGeofencingRegionInit(const CircularGeofencingRegionInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasId()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "id"), v8String(isolate, impl.id()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "id"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasLatitude()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "latitude"), v8::Number::New(isolate, impl.latitude()))))
            return false;
    }

    if (impl.hasLongitude()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longitude"), v8::Number::New(isolate, impl.longitude()))))
            return false;
    }

    if (impl.hasRadius()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "radius"), v8::Number::New(isolate, impl.radius()))))
            return false;
    }

    return true;
}

CircularGeofencingRegionInit NativeValueTraits<CircularGeofencingRegionInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    CircularGeofencingRegionInit impl;
    V8CircularGeofencingRegionInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
