// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SpeechSynthesis.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8SpeechSynthesisUtterance.h"
#include "bindings/modules/v8/V8SpeechSynthesisVoice.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SpeechSynthesis::wrapperTypeInfo = { gin::kEmbedderBlink, V8SpeechSynthesis::domTemplate, V8SpeechSynthesis::refObject, V8SpeechSynthesis::derefObject, V8SpeechSynthesis::trace, 0, 0, V8SpeechSynthesis::preparePrototypeObject, V8SpeechSynthesis::installConditionallyEnabledProperties, "SpeechSynthesis", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SpeechSynthesis.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SpeechSynthesis::s_wrapperTypeInfo = V8SpeechSynthesis::wrapperTypeInfo;

namespace SpeechSynthesisV8Internal {

static void pendingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(holder);
    v8SetReturnValueBool(info, impl->pending());
}

static void pendingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SpeechSynthesisV8Internal::pendingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void speakingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(holder);
    v8SetReturnValueBool(info, impl->speaking());
}

static void speakingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SpeechSynthesisV8Internal::speakingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pausedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(holder);
    v8SetReturnValueBool(info, impl->paused());
}

static void pausedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SpeechSynthesisV8Internal::pausedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onvoiceschangedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(holder);
    EventListener* cppValue(impl->onvoiceschanged());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onvoiceschangedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SpeechSynthesisV8Internal::onvoiceschangedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onvoiceschangedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onvoiceschanged(), v8Value, V8SpeechSynthesis::eventListenerCacheIndex);
    impl->setOnvoiceschanged(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onvoiceschangedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    SpeechSynthesisV8Internal::onvoiceschangedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void speakMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "speak", "SpeechSynthesis", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(info.Holder());
    SpeechSynthesisUtterance* utterance;
    {
        utterance = V8SpeechSynthesisUtterance::toImplWithTypeCheck(info.GetIsolate(), info[0]);
    }
    impl->speak(utterance, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void speakMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SpeechSynthesisV8Internal::speakMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cancelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(info.Holder());
    impl->cancel();
}

static void cancelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SpeechSynthesisV8Internal::cancelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pauseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(info.Holder());
    impl->pause();
}

static void pauseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SpeechSynthesisV8Internal::pauseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void resumeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(info.Holder());
    impl->resume();
}

static void resumeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SpeechSynthesisV8Internal::resumeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getVoicesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->getVoices(), info.Holder(), info.GetIsolate()));
}

static void getVoicesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SpeechSynthesisV8Internal::getVoicesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace SpeechSynthesisV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8SpeechSynthesisAccessors[] = {
    {"pending", SpeechSynthesisV8Internal::pendingAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"speaking", SpeechSynthesisV8Internal::speakingAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"paused", SpeechSynthesisV8Internal::pausedAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onvoiceschanged", SpeechSynthesisV8Internal::onvoiceschangedAttributeGetterCallback, SpeechSynthesisV8Internal::onvoiceschangedAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8SpeechSynthesisMethods[] = {
    {"speak", SpeechSynthesisV8Internal::speakMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"cancel", SpeechSynthesisV8Internal::cancelMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"pause", SpeechSynthesisV8Internal::pauseMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"resume", SpeechSynthesisV8Internal::resumeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getVoices", SpeechSynthesisV8Internal::getVoicesMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8SpeechSynthesisTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SpeechSynthesis", V8EventTarget::domTemplate(isolate), V8SpeechSynthesis::internalFieldCount,
        0, 0,
        V8SpeechSynthesisAccessors, WTF_ARRAY_LENGTH(V8SpeechSynthesisAccessors),
        V8SpeechSynthesisMethods, WTF_ARRAY_LENGTH(V8SpeechSynthesisMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8SpeechSynthesis::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SpeechSynthesisTemplate);
}

bool V8SpeechSynthesis::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SpeechSynthesis::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SpeechSynthesis* V8SpeechSynthesis::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8SpeechSynthesis::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8SpeechSynthesis::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
