// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WebGLDrawBuffers.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8WebGLDrawBuffers::wrapperTypeInfo = { gin::kEmbedderBlink, V8WebGLDrawBuffers::domTemplate, V8WebGLDrawBuffers::refObject, V8WebGLDrawBuffers::derefObject, V8WebGLDrawBuffers::trace, 0, V8WebGLDrawBuffers::visitDOMWrapper, V8WebGLDrawBuffers::preparePrototypeObject, V8WebGLDrawBuffers::installConditionallyEnabledProperties, "WebGLDrawBuffers", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in WebGLDrawBuffers.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& WebGLDrawBuffers::s_wrapperTypeInfo = V8WebGLDrawBuffers::wrapperTypeInfo;

namespace WebGLDrawBuffersV8Internal {

static void drawBuffersWEBGLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawBuffersWEBGL", "WebGLDrawBuffers", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLDrawBuffers* impl = V8WebGLDrawBuffers::toImpl(info.Holder());
    Vector<unsigned> buffers;
    {
        buffers = toImplArray<Vector<unsigned>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->drawBuffersWEBGL(buffers);
}

static void drawBuffersWEBGLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLDrawBuffersV8Internal::drawBuffersWEBGLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace WebGLDrawBuffersV8Internal

void V8WebGLDrawBuffers::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    WebGLDrawBuffers* impl = scriptWrappable->toImpl<WebGLDrawBuffers>();
    // The canvas() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->canvas())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

static const V8DOMConfiguration::MethodConfiguration V8WebGLDrawBuffersMethods[] = {
    {"drawBuffersWEBGL", WebGLDrawBuffersV8Internal::drawBuffersWEBGLMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8WebGLDrawBuffersTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "WebGLDrawBuffers", v8::Local<v8::FunctionTemplate>(), V8WebGLDrawBuffers::internalFieldCount,
        0, 0,
        0, 0,
        V8WebGLDrawBuffersMethods, WTF_ARRAY_LENGTH(V8WebGLDrawBuffersMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8WebGLDrawBuffersConstants[] = {
        {"COLOR_ATTACHMENT0_WEBGL", 0x8CE0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT1_WEBGL", 0x8CE1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT2_WEBGL", 0x8CE2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT3_WEBGL", 0x8CE3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT4_WEBGL", 0x8CE4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT5_WEBGL", 0x8CE5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT6_WEBGL", 0x8CE6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT7_WEBGL", 0x8CE7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT8_WEBGL", 0x8CE8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT9_WEBGL", 0x8CE9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT10_WEBGL", 0x8CEA, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT11_WEBGL", 0x8CEB, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT12_WEBGL", 0x8CEC, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT13_WEBGL", 0x8CED, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT14_WEBGL", 0x8CEE, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT15_WEBGL", 0x8CEF, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER0_WEBGL", 0x8825, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER1_WEBGL", 0x8826, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER2_WEBGL", 0x8827, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER3_WEBGL", 0x8828, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER4_WEBGL", 0x8829, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER5_WEBGL", 0x882A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER6_WEBGL", 0x882B, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER7_WEBGL", 0x882C, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER8_WEBGL", 0x882D, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER9_WEBGL", 0x882E, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER10_WEBGL", 0x882F, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER11_WEBGL", 0x8830, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER12_WEBGL", 0x8831, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER13_WEBGL", 0x8832, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER14_WEBGL", 0x8833, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DRAW_BUFFER15_WEBGL", 0x8834, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_COLOR_ATTACHMENTS_WEBGL", 0x8CDF, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_DRAW_BUFFERS_WEBGL", 0x8824, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8WebGLDrawBuffersConstants, WTF_ARRAY_LENGTH(V8WebGLDrawBuffersConstants));

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8WebGLDrawBuffers::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8WebGLDrawBuffersTemplate);
}

bool V8WebGLDrawBuffers::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WebGLDrawBuffers::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WebGLDrawBuffers* V8WebGLDrawBuffers::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8WebGLDrawBuffers::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<WebGLDrawBuffers>()->ref();
#endif
}

void V8WebGLDrawBuffers::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<WebGLDrawBuffers>()->deref();
#endif
}

} // namespace blink
