// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8FetchEventInit.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8ExtendableEventInit.h"
#include "bindings/modules/v8/V8Request.h"

namespace blink {

void V8FetchEventInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, FetchEventInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8ExtendableEventInit::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> isReloadValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "isReload")).ToLocal(&isReloadValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (isReloadValue.IsEmpty() || isReloadValue->IsUndefined()) {
            // Do nothing.
        } else {
            bool isReload = toBoolean(isolate, isReloadValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setIsReload(isReload);
        }
    }

    {
        v8::Local<v8::Value> requestValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "request")).ToLocal(&requestValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (requestValue.IsEmpty() || requestValue->IsUndefined()) {
            // Do nothing.
        } else {
            Request* request = V8Request::toImplWithTypeCheck(isolate, requestValue);
            if (!request && !requestValue->IsNull()) {
                exceptionState.throwTypeError("member request is not of type Request.");
                return;
            }
            impl.setRequest(request);
        }
    }

}

v8::Local<v8::Value> toV8(const FetchEventInit& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8ExtendableEventInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    if (!toV8FetchEventInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8FetchEventInit(const FetchEventInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasIsReload()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "isReload"), v8Boolean(impl.isReload(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "isReload"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasRequest()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "request"), toV8(impl.request(), creationContext, isolate))))
            return false;
    }

    return true;
}

FetchEventInit NativeValueTraits<FetchEventInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    FetchEventInit impl;
    V8FetchEventInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
