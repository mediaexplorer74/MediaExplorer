// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8EntrySync.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8DOMFileSystemSync.h"
#include "bindings/modules/v8/V8DirectoryEntrySync.h"
#include "bindings/modules/v8/V8EntrySync.h"
#include "bindings/modules/v8/V8Metadata.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8EntrySync::wrapperTypeInfo = { gin::kEmbedderBlink, V8EntrySync::domTemplate, V8EntrySync::refObject, V8EntrySync::derefObject, V8EntrySync::trace, 0, 0, V8EntrySync::preparePrototypeObject, V8EntrySync::installConditionallyEnabledProperties, "EntrySync", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in EntrySync.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& EntrySync::s_wrapperTypeInfo = V8EntrySync::wrapperTypeInfo;

namespace EntrySyncV8Internal {

static void isFileAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    EntrySync* impl = V8EntrySync::toImpl(holder);
    v8SetReturnValueBool(info, impl->isFile());
}

static void isFileAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    EntrySyncV8Internal::isFileAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isDirectoryAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    EntrySync* impl = V8EntrySync::toImpl(holder);
    v8SetReturnValueBool(info, impl->isDirectory());
}

static void isDirectoryAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    EntrySyncV8Internal::isDirectoryAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void nameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    EntrySync* impl = V8EntrySync::toImpl(holder);
    v8SetReturnValueString(info, impl->name(), info.GetIsolate());
}

static void nameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    EntrySyncV8Internal::nameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void fullPathAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    EntrySync* impl = V8EntrySync::toImpl(holder);
    v8SetReturnValueString(info, impl->fullPath(), info.GetIsolate());
}

static void fullPathAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    EntrySyncV8Internal::fullPathAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void filesystemAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    EntrySync* impl = V8EntrySync::toImpl(holder);
    RawPtr<DOMFileSystemSync> cppValue(impl->filesystem());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "filesystem"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void filesystemAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    EntrySyncV8Internal::filesystemAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getMetadataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getMetadata", "EntrySync", info.Holder(), info.GetIsolate());
    EntrySync* impl = V8EntrySync::toImpl(info.Holder());
    RawPtr<Metadata> result = impl->getMetadata(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getMetadataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    EntrySyncV8Internal::getMetadataMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void moveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "moveTo", "EntrySync", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    EntrySync* impl = V8EntrySync::toImpl(info.Holder());
    DirectoryEntrySync* parent;
    V8StringResource<TreatNullAndUndefinedAsNullString> name;
    {
        parent = V8DirectoryEntrySync::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        name = info[1];
        if (!name.prepare())
            return;
    }
    RawPtr<EntrySync> result = impl->moveTo(parent, name, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void moveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    EntrySyncV8Internal::moveToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void copyToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "copyTo", "EntrySync", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    EntrySync* impl = V8EntrySync::toImpl(info.Holder());
    DirectoryEntrySync* parent;
    V8StringResource<TreatNullAndUndefinedAsNullString> name;
    {
        parent = V8DirectoryEntrySync::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        name = info[1];
        if (!name.prepare())
            return;
    }
    RawPtr<EntrySync> result = impl->copyTo(parent, name, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void copyToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    EntrySyncV8Internal::copyToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void toURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EntrySync* impl = V8EntrySync::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->toURL(), info.GetIsolate());
}

static void toURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    EntrySyncV8Internal::toURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void removeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "remove", "EntrySync", info.Holder(), info.GetIsolate());
    EntrySync* impl = V8EntrySync::toImpl(info.Holder());
    impl->remove(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void removeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    EntrySyncV8Internal::removeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getParentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    EntrySync* impl = V8EntrySync::toImpl(info.Holder());
    v8SetReturnValue(info, impl->getParent());
}

static void getParentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    EntrySyncV8Internal::getParentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace EntrySyncV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8EntrySyncAccessors[] = {
    {"isFile", EntrySyncV8Internal::isFileAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"isDirectory", EntrySyncV8Internal::isDirectoryAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"name", EntrySyncV8Internal::nameAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fullPath", EntrySyncV8Internal::fullPathAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"filesystem", EntrySyncV8Internal::filesystemAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8EntrySyncMethods[] = {
    {"getMetadata", EntrySyncV8Internal::getMetadataMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"moveTo", EntrySyncV8Internal::moveToMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"copyTo", EntrySyncV8Internal::copyToMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"toURL", EntrySyncV8Internal::toURLMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"remove", EntrySyncV8Internal::removeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getParent", EntrySyncV8Internal::getParentMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8EntrySyncTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "EntrySync", v8::Local<v8::FunctionTemplate>(), V8EntrySync::internalFieldCount,
        0, 0,
        V8EntrySyncAccessors, WTF_ARRAY_LENGTH(V8EntrySyncAccessors),
        V8EntrySyncMethods, WTF_ARRAY_LENGTH(V8EntrySyncMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8EntrySync::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8EntrySyncTemplate);
}

bool V8EntrySync::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8EntrySync::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

EntrySync* V8EntrySync::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8EntrySync::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8EntrySync::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
