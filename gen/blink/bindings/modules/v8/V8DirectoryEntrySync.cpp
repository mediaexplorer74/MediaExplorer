// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8DirectoryEntrySync.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8DirectoryEntrySync.h"
#include "bindings/modules/v8/V8DirectoryReaderSync.h"
#include "bindings/modules/v8/V8FileEntrySync.h"
#include "bindings/modules/v8/V8FileSystemFlags.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8DirectoryEntrySync::wrapperTypeInfo = { gin::kEmbedderBlink, V8DirectoryEntrySync::domTemplate, V8DirectoryEntrySync::refObject, V8DirectoryEntrySync::derefObject, V8DirectoryEntrySync::trace, 0, 0, V8DirectoryEntrySync::preparePrototypeObject, V8DirectoryEntrySync::installConditionallyEnabledProperties, "DirectoryEntrySync", &V8EntrySync::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DirectoryEntrySync.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DirectoryEntrySync::s_wrapperTypeInfo = V8DirectoryEntrySync::wrapperTypeInfo;

namespace DirectoryEntrySyncV8Internal {

static void createReaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    DirectoryEntrySync* impl = V8DirectoryEntrySync::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createReader());
}

static void createReaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DirectoryEntrySyncV8Internal::createReaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getFileMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getFile", "DirectoryEntrySync", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    DirectoryEntrySync* impl = V8DirectoryEntrySync::toImpl(info.Holder());
    V8StringResource<TreatNullAndUndefinedAsNullString> path;
    FileSystemFlags flags;
    {
        path = info[0];
        if (!path.prepare())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('flags') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8FileSystemFlags::toImpl(info.GetIsolate(), info[1], flags, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    RawPtr<FileEntrySync> result = impl->getFile(path, flags, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getFileMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DirectoryEntrySyncV8Internal::getFileMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getDirectoryMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getDirectory", "DirectoryEntrySync", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    DirectoryEntrySync* impl = V8DirectoryEntrySync::toImpl(info.Holder());
    V8StringResource<TreatNullAndUndefinedAsNullString> path;
    FileSystemFlags flags;
    {
        path = info[0];
        if (!path.prepare())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('flags') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8FileSystemFlags::toImpl(info.GetIsolate(), info[1], flags, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    RawPtr<DirectoryEntrySync> result = impl->getDirectory(path, flags, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getDirectoryMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DirectoryEntrySyncV8Internal::getDirectoryMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void removeRecursivelyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "removeRecursively", "DirectoryEntrySync", info.Holder(), info.GetIsolate());
    DirectoryEntrySync* impl = V8DirectoryEntrySync::toImpl(info.Holder());
    impl->removeRecursively(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void removeRecursivelyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DirectoryEntrySyncV8Internal::removeRecursivelyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace DirectoryEntrySyncV8Internal

static const V8DOMConfiguration::MethodConfiguration V8DirectoryEntrySyncMethods[] = {
    {"createReader", DirectoryEntrySyncV8Internal::createReaderMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getFile", DirectoryEntrySyncV8Internal::getFileMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getDirectory", DirectoryEntrySyncV8Internal::getDirectoryMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"removeRecursively", DirectoryEntrySyncV8Internal::removeRecursivelyMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8DirectoryEntrySyncTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "DirectoryEntrySync", V8EntrySync::domTemplate(isolate), V8DirectoryEntrySync::internalFieldCount,
        0, 0,
        0, 0,
        V8DirectoryEntrySyncMethods, WTF_ARRAY_LENGTH(V8DirectoryEntrySyncMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8DirectoryEntrySync::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8DirectoryEntrySyncTemplate);
}

bool V8DirectoryEntrySync::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8DirectoryEntrySync::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DirectoryEntrySync* V8DirectoryEntrySync::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8DirectoryEntrySync::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8DirectoryEntrySync::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
