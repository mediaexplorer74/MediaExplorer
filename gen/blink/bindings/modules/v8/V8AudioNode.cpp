// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#if ENABLE(WEB_AUDIO)
#include "V8AudioNode.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8AudioContext.h"
#include "bindings/modules/v8/V8AudioNode.h"
#include "bindings/modules/v8/V8AudioParam.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/inspector/ConsoleMessage.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8AudioNode::wrapperTypeInfo = { gin::kEmbedderBlink, V8AudioNode::domTemplate, V8AudioNode::refObject, V8AudioNode::derefObject, V8AudioNode::trace, 0, 0, V8AudioNode::preparePrototypeObject, V8AudioNode::installConditionallyEnabledProperties, "AudioNode", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in AudioNode.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& AudioNode::s_wrapperTypeInfo = V8AudioNode::wrapperTypeInfo;

namespace AudioNodeV8Internal {

static void contextAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    AudioNode* impl = V8AudioNode::toImpl(holder);
    RawPtr<AudioContext> cppValue(impl->context());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "context"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void contextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    AudioNodeV8Internal::contextAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void numberOfInputsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    AudioNode* impl = V8AudioNode::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->numberOfInputs());
}

static void numberOfInputsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    AudioNodeV8Internal::numberOfInputsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void numberOfOutputsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    AudioNode* impl = V8AudioNode::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->numberOfOutputs());
}

static void numberOfOutputsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    AudioNodeV8Internal::numberOfOutputsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void channelCountAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    AudioNode* impl = V8AudioNode::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->channelCount());
}

static void channelCountAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    AudioNodeV8Internal::channelCountAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void channelCountAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "channelCount", "AudioNode", holder, info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setChannelCount(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void channelCountAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    AudioNodeV8Internal::channelCountAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void channelCountModeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    AudioNode* impl = V8AudioNode::toImpl(holder);
    v8SetReturnValueString(info, impl->channelCountMode(), info.GetIsolate());
}

static void channelCountModeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    AudioNodeV8Internal::channelCountModeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void channelCountModeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "channelCountMode", "AudioNode", holder, info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    static const char* validValues[] = {
        "max",
        "clamped-max",
        "explicit",
    };
    if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "ChannelCountMode", exceptionState)) {
        currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, exceptionState.message()));
        return;
    }
    impl->setChannelCountMode(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void channelCountModeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    AudioNodeV8Internal::channelCountModeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void channelInterpretationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    AudioNode* impl = V8AudioNode::toImpl(holder);
    v8SetReturnValueString(info, impl->channelInterpretation(), info.GetIsolate());
}

static void channelInterpretationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    AudioNodeV8Internal::channelInterpretationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void channelInterpretationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "channelInterpretation", "AudioNode", holder, info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    static const char* validValues[] = {
        "speakers",
        "discrete",
    };
    if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "ChannelInterpretation", exceptionState)) {
        currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, exceptionState.message()));
        return;
    }
    impl->setChannelInterpretation(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void channelInterpretationAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    AudioNodeV8Internal::channelInterpretationAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void connect1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "connect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioNode* destination;
    unsigned output;
    unsigned input;
    {
        destination = V8AudioNode::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioNode'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (!info[1]->IsUndefined()) {
            output = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            output = 0u;
        }
        if (!info[2]->IsUndefined()) {
            input = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            input = 0u;
        }
    }
    impl->connect(destination, output, input, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void connect2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "connect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioParam* destination;
    unsigned output;
    {
        destination = V8AudioParam::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioParam'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (!info[1]->IsUndefined()) {
            output = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            output = 0u;
        }
    }
    impl->connect(destination, output, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void connectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "connect", "AudioNode", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 1:
        if (V8AudioNode::hasInstance(info[0], info.GetIsolate())) {
            connect1Method(info);
            return;
        }
        if (V8AudioParam::hasInstance(info[0], info.GetIsolate())) {
            connect2Method(info);
            return;
        }
        break;
    case 2:
        if (V8AudioNode::hasInstance(info[0], info.GetIsolate())) {
            connect1Method(info);
            return;
        }
        if (V8AudioParam::hasInstance(info[0], info.GetIsolate())) {
            connect2Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            connect1Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void connectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    AudioNodeV8Internal::connectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disconnect1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    impl->disconnect();
}

static void disconnect2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    unsigned output;
    {
        output = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->disconnect(output, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void disconnect3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioNode* destination;
    {
        destination = V8AudioNode::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioNode'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->disconnect(destination, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void disconnect4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioNode* destination;
    unsigned output;
    {
        destination = V8AudioNode::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioNode'.");
            exceptionState.throwIfNeeded();
            return;
        }
        output = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->disconnect(destination, output, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void disconnect5Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioNode* destination;
    unsigned output;
    unsigned input;
    {
        destination = V8AudioNode::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioNode'.");
            exceptionState.throwIfNeeded();
            return;
        }
        output = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        input = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->disconnect(destination, output, input, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void disconnect6Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioParam* destination;
    {
        destination = V8AudioParam::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioParam'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->disconnect(destination, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void disconnect7Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    AudioNode* impl = V8AudioNode::toImpl(info.Holder());
    AudioParam* destination;
    unsigned output;
    {
        destination = V8AudioParam::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!destination) {
            exceptionState.throwTypeError("parameter 1 is not of type 'AudioParam'.");
            exceptionState.throwIfNeeded();
            return;
        }
        output = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->disconnect(destination, output, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void disconnectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disconnect", "AudioNode", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 0:
        if (true) {
            disconnect1Method(info);
            return;
        }
        break;
    case 1:
        if (V8AudioNode::hasInstance(info[0], info.GetIsolate())) {
            disconnect3Method(info);
            return;
        }
        if (V8AudioParam::hasInstance(info[0], info.GetIsolate())) {
            disconnect6Method(info);
            return;
        }
        if (true) {
            disconnect2Method(info);
            return;
        }
        break;
    case 2:
        if (V8AudioNode::hasInstance(info[0], info.GetIsolate())) {
            disconnect4Method(info);
            return;
        }
        if (V8AudioParam::hasInstance(info[0], info.GetIsolate())) {
            disconnect7Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            disconnect5Method(info);
            return;
        }
        break;
    default:
        break;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void disconnectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    AudioNodeV8Internal::disconnectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace AudioNodeV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8AudioNodeAccessors[] = {
    {"context", AudioNodeV8Internal::contextAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"numberOfInputs", AudioNodeV8Internal::numberOfInputsAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"numberOfOutputs", AudioNodeV8Internal::numberOfOutputsAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"channelCount", AudioNodeV8Internal::channelCountAttributeGetterCallback, AudioNodeV8Internal::channelCountAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"channelCountMode", AudioNodeV8Internal::channelCountModeAttributeGetterCallback, AudioNodeV8Internal::channelCountModeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"channelInterpretation", AudioNodeV8Internal::channelInterpretationAttributeGetterCallback, AudioNodeV8Internal::channelInterpretationAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8AudioNodeMethods[] = {
    {"connect", AudioNodeV8Internal::connectMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"disconnect", AudioNodeV8Internal::disconnectMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8AudioNodeTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "AudioNode", V8EventTarget::domTemplate(isolate), V8AudioNode::internalFieldCount,
        0, 0,
        V8AudioNodeAccessors, WTF_ARRAY_LENGTH(V8AudioNodeAccessors),
        V8AudioNodeMethods, WTF_ARRAY_LENGTH(V8AudioNodeMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8AudioNode::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8AudioNodeTemplate);
}

bool V8AudioNode::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8AudioNode::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

AudioNode* V8AudioNode::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8AudioNode::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8AudioNode::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
#endif // ENABLE(WEB_AUDIO)
