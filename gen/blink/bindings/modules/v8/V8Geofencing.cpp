// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8Geofencing.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8GeofencingRegion.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8Geofencing::wrapperTypeInfo = { gin::kEmbedderBlink, V8Geofencing::domTemplate, V8Geofencing::refObject, V8Geofencing::derefObject, V8Geofencing::trace, 0, 0, V8Geofencing::preparePrototypeObject, V8Geofencing::installConditionallyEnabledProperties, "Geofencing", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in Geofencing.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& Geofencing::s_wrapperTypeInfo = V8Geofencing::wrapperTypeInfo;

namespace GeofencingV8Internal {

static void registerRegionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "registerRegion", "Geofencing", 1, info.Length())));
        return;
    }
    Geofencing* impl = V8Geofencing::toImpl(info.Holder());
    GeofencingRegion* region;
    {
        region = V8GeofencingRegion::toImplWithTypeCheck(info.GetIsolate(), info[0]);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->registerRegion(scriptState, region);
    v8SetReturnValue(info, result.v8Value());
}

static void registerRegionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    GeofencingV8Internal::registerRegionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void unregisterRegionMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    Geofencing* impl = V8Geofencing::toImpl(info.Holder());
    V8StringResource<> regionId;
    {
        regionId = info[0];
        if (!regionId.prepare(exceptionState))
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->unregisterRegion(scriptState, regionId);
    v8SetReturnValue(info, result.v8Value());
}

static void unregisterRegionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "unregisterRegion", "Geofencing", info.Holder(), info.GetIsolate());
    unregisterRegionMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void unregisterRegionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    GeofencingV8Internal::unregisterRegionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getRegisteredRegionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Geofencing* impl = V8Geofencing::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->getRegisteredRegions(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void getRegisteredRegionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    GeofencingV8Internal::getRegisteredRegionsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace GeofencingV8Internal

static const V8DOMConfiguration::MethodConfiguration V8GeofencingMethods[] = {
    {"registerRegion", GeofencingV8Internal::registerRegionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"unregisterRegion", GeofencingV8Internal::unregisterRegionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getRegisteredRegions", GeofencingV8Internal::getRegisteredRegionsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8GeofencingTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::geofencingEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "Geofencing", v8::Local<v8::FunctionTemplate>(), V8Geofencing::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "Geofencing", v8::Local<v8::FunctionTemplate>(), V8Geofencing::internalFieldCount,
            0, 0,
            0, 0,
            V8GeofencingMethods, WTF_ARRAY_LENGTH(V8GeofencingMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8Geofencing::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8GeofencingTemplate);
}

bool V8Geofencing::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Geofencing::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Geofencing* V8Geofencing::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8Geofencing::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8Geofencing::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
