// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8XPathNSResolver.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8XPathNSResolver::wrapperTypeInfo = { gin::kEmbedderBlink, V8XPathNSResolver::domTemplate, V8XPathNSResolver::refObject, V8XPathNSResolver::derefObject, V8XPathNSResolver::trace, 0, 0, V8XPathNSResolver::preparePrototypeObject, V8XPathNSResolver::installConditionallyEnabledProperties, "XPathNSResolver", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in XPathNSResolver.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& XPathNSResolver::s_wrapperTypeInfo = V8XPathNSResolver::wrapperTypeInfo;

namespace XPathNSResolverV8Internal {

static void lookupNamespaceURIMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    XPathNSResolver* impl = V8XPathNSResolver::toImpl(info.Holder());
    V8StringResource<> prefix;
    {
        prefix = info[0];
        if (!prefix.prepare())
            return;
    }
    v8SetReturnValueStringOrNull(info, impl->lookupNamespaceURI(prefix), info.GetIsolate());
}

static void lookupNamespaceURIMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XPathNSResolverV8Internal::lookupNamespaceURIMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace XPathNSResolverV8Internal

static const V8DOMConfiguration::MethodConfiguration V8XPathNSResolverMethods[] = {
    {"lookupNamespaceURI", XPathNSResolverV8Internal::lookupNamespaceURIMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8XPathNSResolverTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "XPathNSResolver", v8::Local<v8::FunctionTemplate>(), V8XPathNSResolver::internalFieldCount,
        0, 0,
        0, 0,
        V8XPathNSResolverMethods, WTF_ARRAY_LENGTH(V8XPathNSResolverMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8XPathNSResolver::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8XPathNSResolverTemplate);
}

bool V8XPathNSResolver::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8XPathNSResolver::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

XPathNSResolver* V8XPathNSResolver::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8XPathNSResolver::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8XPathNSResolver::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
