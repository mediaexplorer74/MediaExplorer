// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8MediaKeyError.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8MediaKeyError::wrapperTypeInfo = { gin::kEmbedderBlink, V8MediaKeyError::domTemplate, V8MediaKeyError::refObject, V8MediaKeyError::derefObject, V8MediaKeyError::trace, 0, 0, V8MediaKeyError::preparePrototypeObject, V8MediaKeyError::installConditionallyEnabledProperties, "MediaKeyError", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in MediaKeyError.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& MediaKeyError::s_wrapperTypeInfo = V8MediaKeyError::wrapperTypeInfo;

namespace MediaKeyErrorV8Internal {

static void codeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    MediaKeyError* impl = V8MediaKeyError::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->code());
}

static void codeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    MediaKeyErrorV8Internal::codeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void systemCodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    MediaKeyError* impl = V8MediaKeyError::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->systemCode());
}

static void systemCodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    MediaKeyErrorV8Internal::systemCodeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace MediaKeyErrorV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8MediaKeyErrorAccessors[] = {
    {"code", MediaKeyErrorV8Internal::codeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8MediaKeyErrorTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "MediaKeyError", v8::Local<v8::FunctionTemplate>(), V8MediaKeyError::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "MediaKeyError", v8::Local<v8::FunctionTemplate>(), V8MediaKeyError::internalFieldCount,
            0, 0,
            V8MediaKeyErrorAccessors, WTF_ARRAY_LENGTH(V8MediaKeyErrorAccessors),
            0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"systemCode", MediaKeyErrorV8Internal::systemCodeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    static const V8DOMConfiguration::ConstantConfiguration V8MediaKeyErrorConstants[] = {
        {"MEDIA_KEYERR_UNKNOWN", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MEDIA_KEYERR_CLIENT", 2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MEDIA_KEYERR_SERVICE", 3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MEDIA_KEYERR_OUTPUT", 4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MEDIA_KEYERR_HARDWARECHANGE", 5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"MEDIA_KEYERR_DOMAIN", 6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8MediaKeyErrorConstants, WTF_ARRAY_LENGTH(V8MediaKeyErrorConstants));
    static_assert(1 == MediaKeyError::MEDIA_KEYERR_UNKNOWN, "the value of MediaKeyError_MEDIA_KEYERR_UNKNOWN does not match with implementation");
    static_assert(2 == MediaKeyError::MEDIA_KEYERR_CLIENT, "the value of MediaKeyError_MEDIA_KEYERR_CLIENT does not match with implementation");
    static_assert(3 == MediaKeyError::MEDIA_KEYERR_SERVICE, "the value of MediaKeyError_MEDIA_KEYERR_SERVICE does not match with implementation");
    static_assert(4 == MediaKeyError::MEDIA_KEYERR_OUTPUT, "the value of MediaKeyError_MEDIA_KEYERR_OUTPUT does not match with implementation");
    static_assert(5 == MediaKeyError::MEDIA_KEYERR_HARDWARECHANGE, "the value of MediaKeyError_MEDIA_KEYERR_HARDWARECHANGE does not match with implementation");
    static_assert(6 == MediaKeyError::MEDIA_KEYERR_DOMAIN, "the value of MediaKeyError_MEDIA_KEYERR_DOMAIN does not match with implementation");

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8MediaKeyError::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8MediaKeyErrorTemplate);
}

bool V8MediaKeyError::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8MediaKeyError::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MediaKeyError* V8MediaKeyError::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8MediaKeyError::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<MediaKeyError>()->ref();
#endif
}

void V8MediaKeyError::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<MediaKeyError>()->deref();
#endif
}

} // namespace blink
