// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InternalSettingsGenerated.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8InternalSettingsGenerated::wrapperTypeInfo = { gin::kEmbedderBlink, V8InternalSettingsGenerated::domTemplate, V8InternalSettingsGenerated::refObject, V8InternalSettingsGenerated::derefObject, V8InternalSettingsGenerated::trace, 0, 0, V8InternalSettingsGenerated::preparePrototypeObject, V8InternalSettingsGenerated::installConditionallyEnabledProperties, "InternalSettingsGenerated", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in InternalSettingsGenerated.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& InternalSettingsGenerated::s_wrapperTypeInfo = V8InternalSettingsGenerated::wrapperTypeInfo;

namespace InternalSettingsGeneratedV8Internal {

static void setDOMPasteAllowedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDOMPasteAllowed", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool DOMPasteAllowed;
    {
        DOMPasteAllowed = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDOMPasteAllowed(DOMPasteAllowed);
}

static void setDOMPasteAllowedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDOMPasteAllowedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAccelerated2dCanvasEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccelerated2dCanvasEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool accelerated2dCanvasEnabled;
    {
        accelerated2dCanvasEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAccelerated2dCanvasEnabled(accelerated2dCanvasEnabled);
}

static void setAccelerated2dCanvasEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAccelerated2dCanvasMSAASampleCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccelerated2dCanvasMSAASampleCount", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int accelerated2dCanvasMSAASampleCount;
    {
        accelerated2dCanvasMSAASampleCount = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAccelerated2dCanvasMSAASampleCount(accelerated2dCanvasMSAASampleCount);
}

static void setAccelerated2dCanvasMSAASampleCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasMSAASampleCountMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAcceleratedCompositingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAcceleratedCompositingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool acceleratedCompositingEnabled;
    {
        acceleratedCompositingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAcceleratedCompositingEnabled(acceleratedCompositingEnabled);
}

static void setAcceleratedCompositingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAccessibilityEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccessibilityEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool accessibilityEnabled;
    {
        accessibilityEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAccessibilityEnabled(accessibilityEnabled);
}

static void setAccessibilityEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccessibilityEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAccessibilityFontScaleFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccessibilityFontScaleFactor", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    double accessibilityFontScaleFactor;
    {
        accessibilityFontScaleFactor = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAccessibilityFontScaleFactor(accessibilityFontScaleFactor);
}

static void setAccessibilityFontScaleFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccessibilityFontScaleFactorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAccessibilityPasswordValuesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccessibilityPasswordValuesEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool accessibilityPasswordValuesEnabled;
    {
        accessibilityPasswordValuesEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAccessibilityPasswordValuesEnabled(accessibilityPasswordValuesEnabled);
}

static void setAccessibilityPasswordValuesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccessibilityPasswordValuesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAllowCustomScrollbarInMainFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowCustomScrollbarInMainFrame", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool allowCustomScrollbarInMainFrame;
    {
        allowCustomScrollbarInMainFrame = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowCustomScrollbarInMainFrame(allowCustomScrollbarInMainFrame);
}

static void setAllowCustomScrollbarInMainFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowCustomScrollbarInMainFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAllowDisplayOfInsecureContentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowDisplayOfInsecureContent", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool allowDisplayOfInsecureContent;
    {
        allowDisplayOfInsecureContent = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowDisplayOfInsecureContent(allowDisplayOfInsecureContent);
}

static void setAllowDisplayOfInsecureContentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowDisplayOfInsecureContentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAllowFileAccessFromFileURLsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowFileAccessFromFileURLs", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool allowFileAccessFromFileURLs;
    {
        allowFileAccessFromFileURLs = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowFileAccessFromFileURLs(allowFileAccessFromFileURLs);
}

static void setAllowFileAccessFromFileURLsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowFileAccessFromFileURLsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAllowRunningOfInsecureContentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowRunningOfInsecureContent", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool allowRunningOfInsecureContent;
    {
        allowRunningOfInsecureContent = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowRunningOfInsecureContent(allowRunningOfInsecureContent);
}

static void setAllowRunningOfInsecureContentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowRunningOfInsecureContentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAllowScriptsToCloseWindowsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowScriptsToCloseWindows", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool allowScriptsToCloseWindows;
    {
        allowScriptsToCloseWindows = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowScriptsToCloseWindows(allowScriptsToCloseWindows);
}

static void setAllowScriptsToCloseWindowsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowScriptsToCloseWindowsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAllowUniversalAccessFromFileURLsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAllowUniversalAccessFromFileURLs", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool allowUniversalAccessFromFileURLs;
    {
        allowUniversalAccessFromFileURLs = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAllowUniversalAccessFromFileURLs(allowUniversalAccessFromFileURLs);
}

static void setAllowUniversalAccessFromFileURLsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowUniversalAccessFromFileURLsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAntialiased2dCanvasEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAntialiased2dCanvasEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool antialiased2dCanvasEnabled;
    {
        antialiased2dCanvasEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAntialiased2dCanvasEnabled(antialiased2dCanvasEnabled);
}

static void setAntialiased2dCanvasEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAntialiased2dCanvasEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAntialiasedClips2dCanvasEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAntialiasedClips2dCanvasEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool antialiasedClips2dCanvasEnabled;
    {
        antialiasedClips2dCanvasEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAntialiasedClips2dCanvasEnabled(antialiasedClips2dCanvasEnabled);
}

static void setAntialiasedClips2dCanvasEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAntialiasedClips2dCanvasEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAsynchronousSpellCheckingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAsynchronousSpellCheckingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool asynchronousSpellCheckingEnabled;
    {
        asynchronousSpellCheckingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAsynchronousSpellCheckingEnabled(asynchronousSpellCheckingEnabled);
}

static void setAsynchronousSpellCheckingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAsynchronousSpellCheckingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAvailableHoverTypesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAvailableHoverTypes", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int availableHoverTypes;
    {
        availableHoverTypes = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAvailableHoverTypes(availableHoverTypes);
}

static void setAvailableHoverTypesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAvailableHoverTypesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAvailablePointerTypesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAvailablePointerTypes", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int availablePointerTypes;
    {
        availablePointerTypes = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAvailablePointerTypes(availablePointerTypes);
}

static void setAvailablePointerTypesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAvailablePointerTypesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setBackgroundHtmlParserOutstandingTokenLimitMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setBackgroundHtmlParserOutstandingTokenLimit", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    unsigned backgroundHtmlParserOutstandingTokenLimit;
    {
        backgroundHtmlParserOutstandingTokenLimit = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setBackgroundHtmlParserOutstandingTokenLimit(backgroundHtmlParserOutstandingTokenLimit);
}

static void setBackgroundHtmlParserOutstandingTokenLimitMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setBackgroundHtmlParserOutstandingTokenLimitMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setBackgroundHtmlParserPendingTokenLimitMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setBackgroundHtmlParserPendingTokenLimit", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    unsigned backgroundHtmlParserPendingTokenLimit;
    {
        backgroundHtmlParserPendingTokenLimit = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setBackgroundHtmlParserPendingTokenLimit(backgroundHtmlParserPendingTokenLimit);
}

static void setBackgroundHtmlParserPendingTokenLimitMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setBackgroundHtmlParserPendingTokenLimitMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setCaretBrowsingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setCaretBrowsingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool caretBrowsingEnabled;
    {
        caretBrowsingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setCaretBrowsingEnabled(caretBrowsingEnabled);
}

static void setCaretBrowsingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCaretBrowsingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setCookieEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setCookieEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool cookieEnabled;
    {
        cookieEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setCookieEnabled(cookieEnabled);
}

static void setCookieEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCookieEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDefaultFixedFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDefaultFixedFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int defaultFixedFontSize;
    {
        defaultFixedFontSize = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDefaultFixedFontSize(defaultFixedFontSize);
}

static void setDefaultFixedFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultFixedFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDefaultFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDefaultFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int defaultFontSize;
    {
        defaultFontSize = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDefaultFontSize(defaultFontSize);
}

static void setDefaultFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDefaultTextEncodingNameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setDefaultTextEncodingName", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> defaultTextEncodingName;
    {
        defaultTextEncodingName = info[0];
        if (!defaultTextEncodingName.prepare())
            return;
    }
    impl->setDefaultTextEncodingName(defaultTextEncodingName);
}

static void setDefaultTextEncodingNameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultTextEncodingNameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDefaultVideoPosterURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setDefaultVideoPosterURL", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> defaultVideoPosterURL;
    {
        defaultVideoPosterURL = info[0];
        if (!defaultVideoPosterURL.prepare())
            return;
    }
    impl->setDefaultVideoPosterURL(defaultVideoPosterURL);
}

static void setDefaultVideoPosterURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultVideoPosterURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDeviceScaleAdjustmentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDeviceScaleAdjustment", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    double deviceScaleAdjustment;
    {
        deviceScaleAdjustment = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDeviceScaleAdjustment(deviceScaleAdjustment);
}

static void setDeviceScaleAdjustmentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeviceScaleAdjustmentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDeviceSupportsMouseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDeviceSupportsMouse", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool deviceSupportsMouse;
    {
        deviceSupportsMouse = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDeviceSupportsMouse(deviceSupportsMouse);
}

static void setDeviceSupportsMouseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeviceSupportsMouseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDeviceSupportsTouchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDeviceSupportsTouch", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool deviceSupportsTouch;
    {
        deviceSupportsTouch = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDeviceSupportsTouch(deviceSupportsTouch);
}

static void setDeviceSupportsTouchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeviceSupportsTouchMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDisableReadingFromCanvasMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDisableReadingFromCanvas", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool disableReadingFromCanvas;
    {
        disableReadingFromCanvas = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDisableReadingFromCanvas(disableReadingFromCanvas);
}

static void setDisableReadingFromCanvasMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDisableReadingFromCanvasMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDNSPrefetchingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDNSPrefetchingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool dnsPrefetchingEnabled;
    {
        dnsPrefetchingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDNSPrefetchingEnabled(dnsPrefetchingEnabled);
}

static void setDNSPrefetchingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDNSPrefetchingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDoHtmlPreloadScanningMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDoHtmlPreloadScanning", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool doHtmlPreloadScanning;
    {
        doHtmlPreloadScanning = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDoHtmlPreloadScanning(doHtmlPreloadScanning);
}

static void setDoHtmlPreloadScanningMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDoHtmlPreloadScanningMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDownloadableBinaryFontsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDownloadableBinaryFontsEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool downloadableBinaryFontsEnabled;
    {
        downloadableBinaryFontsEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDownloadableBinaryFontsEnabled(downloadableBinaryFontsEnabled);
}

static void setDownloadableBinaryFontsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDownloadableBinaryFontsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setForceZeroLayoutHeightMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setForceZeroLayoutHeight", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool forceZeroLayoutHeight;
    {
        forceZeroLayoutHeight = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setForceZeroLayoutHeight(forceZeroLayoutHeight);
}

static void setForceZeroLayoutHeightMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setForceZeroLayoutHeightMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setFullscreenSupportedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFullscreenSupported", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool fullscreenSupported;
    {
        fullscreenSupported = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setFullscreenSupported(fullscreenSupported);
}

static void setFullscreenSupportedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setFullscreenSupportedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setHyperlinkAuditingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setHyperlinkAuditingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool hyperlinkAuditingEnabled;
    {
        hyperlinkAuditingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setHyperlinkAuditingEnabled(hyperlinkAuditingEnabled);
}

static void setHyperlinkAuditingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setHyperlinkAuditingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setIgnoreMainFrameOverflowHiddenQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setIgnoreMainFrameOverflowHiddenQuirk", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool ignoreMainFrameOverflowHiddenQuirk;
    {
        ignoreMainFrameOverflowHiddenQuirk = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setIgnoreMainFrameOverflowHiddenQuirk(ignoreMainFrameOverflowHiddenQuirk);
}

static void setIgnoreMainFrameOverflowHiddenQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setIgnoreMainFrameOverflowHiddenQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setImagesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setImagesEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool imagesEnabled;
    {
        imagesEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setImagesEnabled(imagesEnabled);
}

static void setImagesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setImagesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setInlineTextBoxAccessibilityEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInlineTextBoxAccessibilityEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool inlineTextBoxAccessibilityEnabled;
    {
        inlineTextBoxAccessibilityEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setInlineTextBoxAccessibilityEnabled(inlineTextBoxAccessibilityEnabled);
}

static void setInlineTextBoxAccessibilityEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setInlineTextBoxAccessibilityEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setInvertViewportScrollOrderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInvertViewportScrollOrder", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool invertViewportScrollOrder;
    {
        invertViewportScrollOrder = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setInvertViewportScrollOrder(invertViewportScrollOrder);
}

static void setInvertViewportScrollOrderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setInvertViewportScrollOrderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setJavaEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setJavaEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool javaEnabled;
    {
        javaEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setJavaEnabled(javaEnabled);
}

static void setJavaEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setJavaEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setJavaScriptCanAccessClipboardMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setJavaScriptCanAccessClipboard", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool javaScriptCanAccessClipboard;
    {
        javaScriptCanAccessClipboard = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);
}

static void setJavaScriptCanAccessClipboardMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setJavaScriptCanAccessClipboardMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setJavaScriptCanOpenWindowsAutomaticallyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setJavaScriptCanOpenWindowsAutomatically", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool javaScriptCanOpenWindowsAutomatically;
    {
        javaScriptCanOpenWindowsAutomatically = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setJavaScriptCanOpenWindowsAutomatically(javaScriptCanOpenWindowsAutomatically);
}

static void setJavaScriptCanOpenWindowsAutomaticallyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setJavaScriptCanOpenWindowsAutomaticallyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLayerSquashingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLayerSquashingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool layerSquashingEnabled;
    {
        layerSquashingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLayerSquashingEnabled(layerSquashingEnabled);
}

static void setLayerSquashingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLayerSquashingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLoadWithOverviewModeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLoadWithOverviewMode", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool loadWithOverviewMode;
    {
        loadWithOverviewMode = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLoadWithOverviewMode(loadWithOverviewMode);
}

static void setLoadWithOverviewModeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLoadWithOverviewModeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLoadsImagesAutomaticallyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLoadsImagesAutomatically", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool loadsImagesAutomatically;
    {
        loadsImagesAutomatically = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLoadsImagesAutomatically(loadsImagesAutomatically);
}

static void setLoadsImagesAutomaticallyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLoadsImagesAutomaticallyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLocalStorageEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLocalStorageEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool localStorageEnabled;
    {
        localStorageEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLocalStorageEnabled(localStorageEnabled);
}

static void setLocalStorageEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLocalStorageEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLogDnsPrefetchAndPreconnectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLogDnsPrefetchAndPreconnect", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool logDnsPrefetchAndPreconnect;
    {
        logDnsPrefetchAndPreconnect = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLogDnsPrefetchAndPreconnect(logDnsPrefetchAndPreconnect);
}

static void setLogDnsPrefetchAndPreconnectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLogDnsPrefetchAndPreconnectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLogPreloadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLogPreload", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool logPreload;
    {
        logPreload = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLogPreload(logPreload);
}

static void setLogPreloadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLogPreloadMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLowPriorityIframesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLowPriorityIframes", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool lowPriorityIframes;
    {
        lowPriorityIframes = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLowPriorityIframes(lowPriorityIframes);
}

static void setLowPriorityIframesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLowPriorityIframesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMainFrameClipsContentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMainFrameClipsContent", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool mainFrameClipsContent;
    {
        mainFrameClipsContent = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMainFrameClipsContent(mainFrameClipsContent);
}

static void setMainFrameClipsContentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMainFrameClipsContentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMaxBeaconTransmissionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMaxBeaconTransmission", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int maxBeaconTransmission;
    {
        maxBeaconTransmission = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMaxBeaconTransmission(maxBeaconTransmission);
}

static void setMaxBeaconTransmissionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMaxBeaconTransmissionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMaxTouchPointsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMaxTouchPoints", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int maxTouchPoints;
    {
        maxTouchPoints = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMaxTouchPoints(maxTouchPoints);
}

static void setMaxTouchPointsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMaxTouchPointsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMediaControlsOverlayPlayButtonEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMediaControlsOverlayPlayButtonEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool mediaControlsOverlayPlayButtonEnabled;
    {
        mediaControlsOverlayPlayButtonEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMediaControlsOverlayPlayButtonEnabled(mediaControlsOverlayPlayButtonEnabled);
}

static void setMediaControlsOverlayPlayButtonEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMediaControlsOverlayPlayButtonEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMediaPlaybackRequiresUserGestureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMediaPlaybackRequiresUserGesture", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool mediaPlaybackRequiresUserGesture;
    {
        mediaPlaybackRequiresUserGesture = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMediaPlaybackRequiresUserGesture(mediaPlaybackRequiresUserGesture);
}

static void setMediaPlaybackRequiresUserGestureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMediaPlaybackRequiresUserGestureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMediaTypeOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setMediaTypeOverride", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> mediaTypeOverride;
    {
        mediaTypeOverride = info[0];
        if (!mediaTypeOverride.prepare())
            return;
    }
    impl->setMediaTypeOverride(mediaTypeOverride);
}

static void setMediaTypeOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMediaTypeOverrideMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMinimumAccelerated2dCanvasSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMinimumAccelerated2dCanvasSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int minimumAccelerated2dCanvasSize;
    {
        minimumAccelerated2dCanvasSize = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMinimumAccelerated2dCanvasSize(minimumAccelerated2dCanvasSize);
}

static void setMinimumAccelerated2dCanvasSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMinimumAccelerated2dCanvasSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMinimumFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMinimumFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int minimumFontSize;
    {
        minimumFontSize = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMinimumFontSize(minimumFontSize);
}

static void setMinimumFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMinimumFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMinimumLogicalFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMinimumLogicalFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int minimumLogicalFontSize;
    {
        minimumLogicalFontSize = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMinimumLogicalFontSize(minimumLogicalFontSize);
}

static void setMinimumLogicalFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMinimumLogicalFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMockGestureTapHighlightsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMockGestureTapHighlightsEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool mockGestureTapHighlightsEnabled;
    {
        mockGestureTapHighlightsEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMockGestureTapHighlightsEnabled(mockGestureTapHighlightsEnabled);
}

static void setMockGestureTapHighlightsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMockGestureTapHighlightsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMultiTargetTapNotificationEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMultiTargetTapNotificationEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool multiTargetTapNotificationEnabled;
    {
        multiTargetTapNotificationEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMultiTargetTapNotificationEnabled(multiTargetTapNotificationEnabled);
}

static void setMultiTargetTapNotificationEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMultiTargetTapNotificationEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setNavigateOnDragDropMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setNavigateOnDragDrop", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool navigateOnDragDrop;
    {
        navigateOnDragDrop = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setNavigateOnDragDrop(navigateOnDragDrop);
}

static void setNavigateOnDragDropMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setNavigateOnDragDropMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setOfflineWebApplicationCacheEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setOfflineWebApplicationCacheEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool offlineWebApplicationCacheEnabled;
    {
        offlineWebApplicationCacheEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setOfflineWebApplicationCacheEnabled(offlineWebApplicationCacheEnabled);
}

static void setOfflineWebApplicationCacheEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setOfflineWebApplicationCacheEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPasswordEchoDurationInSecondsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPasswordEchoDurationInSeconds", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    double passwordEchoDurationInSeconds;
    {
        passwordEchoDurationInSeconds = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPasswordEchoDurationInSeconds(passwordEchoDurationInSeconds);
}

static void setPasswordEchoDurationInSecondsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPasswordEchoDurationInSecondsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPasswordEchoEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPasswordEchoEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool passwordEchoEnabled;
    {
        passwordEchoEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPasswordEchoEnabled(passwordEchoEnabled);
}

static void setPasswordEchoEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPasswordEchoEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPinchOverlayScrollbarThicknessMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPinchOverlayScrollbarThickness", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int pinchOverlayScrollbarThickness;
    {
        pinchOverlayScrollbarThickness = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPinchOverlayScrollbarThickness(pinchOverlayScrollbarThickness);
}

static void setPinchOverlayScrollbarThicknessMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPinchOverlayScrollbarThicknessMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPluginsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPluginsEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool pluginsEnabled;
    {
        pluginsEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPluginsEnabled(pluginsEnabled);
}

static void setPluginsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPluginsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPreferCompositingToLCDTextEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPreferCompositingToLCDTextEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool preferCompositingToLCDTextEnabled;
    {
        preferCompositingToLCDTextEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setPreferCompositingToLCDTextEnabled(preferCompositingToLCDTextEnabled);
}

static void setPreferCompositingToLCDTextEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPreferCompositingToLCDTextEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setReportScreenSizeInPhysicalPixelsQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setReportScreenSizeInPhysicalPixelsQuirk", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool reportScreenSizeInPhysicalPixelsQuirk;
    {
        reportScreenSizeInPhysicalPixelsQuirk = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setReportScreenSizeInPhysicalPixelsQuirk(reportScreenSizeInPhysicalPixelsQuirk);
}

static void setReportScreenSizeInPhysicalPixelsQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setReportScreenSizeInPhysicalPixelsQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setReportWheelOverscrollMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setReportWheelOverscroll", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool reportWheelOverscroll;
    {
        reportWheelOverscroll = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setReportWheelOverscroll(reportWheelOverscroll);
}

static void setReportWheelOverscrollMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setReportWheelOverscrollMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setRootLayerScrollsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRootLayerScrolls", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool rootLayerScrolls;
    {
        rootLayerScrolls = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setRootLayerScrolls(rootLayerScrolls);
}

static void setRootLayerScrollsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setRootLayerScrollsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setRubberBandingOnCompositorThreadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRubberBandingOnCompositorThread", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool rubberBandingOnCompositorThread;
    {
        rubberBandingOnCompositorThread = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setRubberBandingOnCompositorThread(rubberBandingOnCompositorThread);
}

static void setRubberBandingOnCompositorThreadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setRubberBandingOnCompositorThreadMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setScriptEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setScriptEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool scriptEnabled;
    {
        scriptEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setScriptEnabled(scriptEnabled);
}

static void setScriptEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setScriptEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setScrollAnimatorEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setScrollAnimatorEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool scrollAnimatorEnabled;
    {
        scrollAnimatorEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setScrollAnimatorEnabled(scrollAnimatorEnabled);
}

static void setScrollAnimatorEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setScrollAnimatorEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSelectTrailingWhitespaceEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSelectTrailingWhitespaceEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool selectTrailingWhitespaceEnabled;
    {
        selectTrailingWhitespaceEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSelectTrailingWhitespaceEnabled(selectTrailingWhitespaceEnabled);
}

static void setSelectTrailingWhitespaceEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSelectTrailingWhitespaceEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSelectionIncludesAltImageTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSelectionIncludesAltImageText", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool selectionIncludesAltImageText;
    {
        selectionIncludesAltImageText = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSelectionIncludesAltImageText(selectionIncludesAltImageText);
}

static void setSelectionIncludesAltImageTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSelectionIncludesAltImageTextMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setShouldClearDocumentBackgroundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setShouldClearDocumentBackground", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool shouldClearDocumentBackground;
    {
        shouldClearDocumentBackground = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setShouldClearDocumentBackground(shouldClearDocumentBackground);
}

static void setShouldClearDocumentBackgroundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShouldClearDocumentBackgroundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setShouldPrintBackgroundsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setShouldPrintBackgrounds", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool shouldPrintBackgrounds;
    {
        shouldPrintBackgrounds = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setShouldPrintBackgrounds(shouldPrintBackgrounds);
}

static void setShouldPrintBackgroundsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShouldPrintBackgroundsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setShouldRespectImageOrientationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setShouldRespectImageOrientation", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool shouldRespectImageOrientation;
    {
        shouldRespectImageOrientation = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setShouldRespectImageOrientation(shouldRespectImageOrientation);
}

static void setShouldRespectImageOrientationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShouldRespectImageOrientationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setShowContextMenuOnMouseUpMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setShowContextMenuOnMouseUp", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool showContextMenuOnMouseUp;
    {
        showContextMenuOnMouseUp = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setShowContextMenuOnMouseUp(showContextMenuOnMouseUp);
}

static void setShowContextMenuOnMouseUpMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShowContextMenuOnMouseUpMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSmartInsertDeleteEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSmartInsertDeleteEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool smartInsertDeleteEnabled;
    {
        smartInsertDeleteEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSmartInsertDeleteEnabled(smartInsertDeleteEnabled);
}

static void setSmartInsertDeleteEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSmartInsertDeleteEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSpatialNavigationEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSpatialNavigationEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool spatialNavigationEnabled;
    {
        spatialNavigationEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSpatialNavigationEnabled(spatialNavigationEnabled);
}

static void setSpatialNavigationEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSpatialNavigationEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setStrictMixedContentCheckingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setStrictMixedContentChecking", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool strictMixedContentChecking;
    {
        strictMixedContentChecking = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setStrictMixedContentChecking(strictMixedContentChecking);
}

static void setStrictMixedContentCheckingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setStrictMixedContentCheckingMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setStrictPowerfulFeatureRestrictionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setStrictPowerfulFeatureRestrictions", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool strictPowerfulFeatureRestrictions;
    {
        strictPowerfulFeatureRestrictions = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setStrictPowerfulFeatureRestrictions(strictPowerfulFeatureRestrictions);
}

static void setStrictPowerfulFeatureRestrictionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setStrictPowerfulFeatureRestrictionsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSupportsMultipleWindowsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSupportsMultipleWindows", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool supportsMultipleWindows;
    {
        supportsMultipleWindows = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSupportsMultipleWindows(supportsMultipleWindows);
}

static void setSupportsMultipleWindowsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSupportsMultipleWindowsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSyncXHRInDocumentsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSyncXHRInDocumentsEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool syncXHRInDocumentsEnabled;
    {
        syncXHRInDocumentsEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setSyncXHRInDocumentsEnabled(syncXHRInDocumentsEnabled);
}

static void setSyncXHRInDocumentsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSyncXHRInDocumentsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextAreasAreResizableMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTextAreasAreResizable", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool textAreasAreResizable;
    {
        textAreasAreResizable = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTextAreasAreResizable(textAreasAreResizable);
}

static void setTextAreasAreResizableMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextAreasAreResizableMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackBackgroundColorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackBackgroundColor", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackBackgroundColor;
    {
        textTrackBackgroundColor = info[0];
        if (!textTrackBackgroundColor.prepare())
            return;
    }
    impl->setTextTrackBackgroundColor(textTrackBackgroundColor);
}

static void setTextTrackBackgroundColorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackBackgroundColorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackFontFamily", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackFontFamily;
    {
        textTrackFontFamily = info[0];
        if (!textTrackFontFamily.prepare())
            return;
    }
    impl->setTextTrackFontFamily(textTrackFontFamily);
}

static void setTextTrackFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackFontStyleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackFontStyle", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackFontStyle;
    {
        textTrackFontStyle = info[0];
        if (!textTrackFontStyle.prepare())
            return;
    }
    impl->setTextTrackFontStyle(textTrackFontStyle);
}

static void setTextTrackFontStyleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackFontStyleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackFontVariantMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackFontVariant", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackFontVariant;
    {
        textTrackFontVariant = info[0];
        if (!textTrackFontVariant.prepare())
            return;
    }
    impl->setTextTrackFontVariant(textTrackFontVariant);
}

static void setTextTrackFontVariantMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackFontVariantMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackTextColorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackTextColor", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackTextColor;
    {
        textTrackTextColor = info[0];
        if (!textTrackTextColor.prepare())
            return;
    }
    impl->setTextTrackTextColor(textTrackTextColor);
}

static void setTextTrackTextColorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackTextColorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackTextShadowMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackTextShadow", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackTextShadow;
    {
        textTrackTextShadow = info[0];
        if (!textTrackTextShadow.prepare())
            return;
    }
    impl->setTextTrackTextShadow(textTrackTextShadow);
}

static void setTextTrackTextShadowMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackTextShadowMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackTextSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setTextTrackTextSize", "InternalSettingsGenerated", 1, info.Length()), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    V8StringResource<> textTrackTextSize;
    {
        textTrackTextSize = info[0];
        if (!textTrackTextSize.prepare())
            return;
    }
    impl->setTextTrackTextSize(textTrackTextSize);
}

static void setTextTrackTextSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextTrackTextSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setThreadedScrollingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setThreadedScrollingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool threadedScrollingEnabled;
    {
        threadedScrollingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setThreadedScrollingEnabled(threadedScrollingEnabled);
}

static void setThreadedScrollingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setThreadedScrollingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTouchAdjustmentEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTouchAdjustmentEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool touchAdjustmentEnabled;
    {
        touchAdjustmentEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTouchAdjustmentEnabled(touchAdjustmentEnabled);
}

static void setTouchAdjustmentEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTouchAdjustmentEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTouchDragDropEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTouchDragDropEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool touchDragDropEnabled;
    {
        touchDragDropEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTouchDragDropEnabled(touchDragDropEnabled);
}

static void setTouchDragDropEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTouchDragDropEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTouchEditingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTouchEditingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool touchEditingEnabled;
    {
        touchEditingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTouchEditingEnabled(touchEditingEnabled);
}

static void setTouchEditingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTouchEditingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUnifiedTextCheckerEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUnifiedTextCheckerEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool unifiedTextCheckerEnabled;
    {
        unifiedTextCheckerEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUnifiedTextCheckerEnabled(unifiedTextCheckerEnabled);
}

static void setUnifiedTextCheckerEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUnifiedTextCheckerEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUnsafePluginPastingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUnsafePluginPastingEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool unsafePluginPastingEnabled;
    {
        unsafePluginPastingEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUnsafePluginPastingEnabled(unsafePluginPastingEnabled);
}

static void setUnsafePluginPastingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUnsafePluginPastingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUseLegacyBackgroundSizeShorthandBehaviorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUseLegacyBackgroundSizeShorthandBehavior", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool useLegacyBackgroundSizeShorthandBehavior;
    {
        useLegacyBackgroundSizeShorthandBehavior = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUseLegacyBackgroundSizeShorthandBehavior(useLegacyBackgroundSizeShorthandBehavior);
}

static void setUseLegacyBackgroundSizeShorthandBehaviorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseLegacyBackgroundSizeShorthandBehaviorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUseMobileViewportStyleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUseMobileViewportStyle", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool useMobileViewportStyle;
    {
        useMobileViewportStyle = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUseMobileViewportStyle(useMobileViewportStyle);
}

static void setUseMobileViewportStyleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseMobileViewportStyleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUseSolidColorScrollbarsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUseSolidColorScrollbars", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool useSolidColorScrollbars;
    {
        useSolidColorScrollbars = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUseSolidColorScrollbars(useSolidColorScrollbars);
}

static void setUseSolidColorScrollbarsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseSolidColorScrollbarsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUseWideViewportMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUseWideViewport", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool useWideViewport;
    {
        useWideViewport = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUseWideViewport(useWideViewport);
}

static void setUseWideViewportMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseWideViewportMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setUsesEncodingDetectorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setUsesEncodingDetector", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool usesEncodingDetector;
    {
        usesEncodingDetector = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setUsesEncodingDetector(usesEncodingDetector);
}

static void setUsesEncodingDetectorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUsesEncodingDetectorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setValidationMessageTimerMagnificationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setValidationMessageTimerMagnification", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    int validationMessageTimerMagnification;
    {
        validationMessageTimerMagnification = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setValidationMessageTimerMagnification(validationMessageTimerMagnification);
}

static void setValidationMessageTimerMagnificationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setValidationMessageTimerMagnificationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setViewportEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setViewportEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool viewportEnabled;
    {
        viewportEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setViewportEnabled(viewportEnabled);
}

static void setViewportEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setViewportMetaEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setViewportMetaEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool viewportMetaEnabled;
    {
        viewportMetaEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setViewportMetaEnabled(viewportMetaEnabled);
}

static void setViewportMetaEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportMetaEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setViewportMetaMergeContentQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setViewportMetaMergeContentQuirk", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool viewportMetaMergeContentQuirk;
    {
        viewportMetaMergeContentQuirk = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setViewportMetaMergeContentQuirk(viewportMetaMergeContentQuirk);
}

static void setViewportMetaMergeContentQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportMetaMergeContentQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setViewportMetaZeroValuesQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setViewportMetaZeroValuesQuirk", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool viewportMetaZeroValuesQuirk;
    {
        viewportMetaZeroValuesQuirk = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setViewportMetaZeroValuesQuirk(viewportMetaZeroValuesQuirk);
}

static void setViewportMetaZeroValuesQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportMetaZeroValuesQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setWebAudioEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setWebAudioEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool webAudioEnabled;
    {
        webAudioEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setWebAudioEnabled(webAudioEnabled);
}

static void setWebAudioEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebAudioEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setWebGLEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setWebGLEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool webGLEnabled;
    {
        webGLEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setWebGLEnabled(webGLEnabled);
}

static void setWebGLEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebGLEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setWebGLErrorsToConsoleEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setWebGLErrorsToConsoleEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool webGLErrorsToConsoleEnabled;
    {
        webGLErrorsToConsoleEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setWebGLErrorsToConsoleEnabled(webGLErrorsToConsoleEnabled);
}

static void setWebGLErrorsToConsoleEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebGLErrorsToConsoleEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setWebSecurityEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setWebSecurityEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool webSecurityEnabled;
    {
        webSecurityEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setWebSecurityEnabled(webSecurityEnabled);
}

static void setWebSecurityEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebSecurityEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setWideViewportQuirkEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setWideViewportQuirkEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool wideViewportQuirkEnabled;
    {
        wideViewportQuirkEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setWideViewportQuirkEnabled(wideViewportQuirkEnabled);
}

static void setWideViewportQuirkEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWideViewportQuirkEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setXSSAuditorEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setXSSAuditorEnabled", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toImpl(info.Holder());
    bool xssAuditorEnabled;
    {
        xssAuditorEnabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setXSSAuditorEnabled(xssAuditorEnabled);
}

static void setXSSAuditorEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setXSSAuditorEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace InternalSettingsGeneratedV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InternalSettingsGeneratedMethods[] = {
    {"setDOMPasteAllowed", InternalSettingsGeneratedV8Internal::setDOMPasteAllowedMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAccelerated2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAccelerated2dCanvasMSAASampleCount", InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasMSAASampleCountMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAcceleratedCompositingEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAccessibilityEnabled", InternalSettingsGeneratedV8Internal::setAccessibilityEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAccessibilityFontScaleFactor", InternalSettingsGeneratedV8Internal::setAccessibilityFontScaleFactorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAccessibilityPasswordValuesEnabled", InternalSettingsGeneratedV8Internal::setAccessibilityPasswordValuesEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAllowCustomScrollbarInMainFrame", InternalSettingsGeneratedV8Internal::setAllowCustomScrollbarInMainFrameMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAllowDisplayOfInsecureContent", InternalSettingsGeneratedV8Internal::setAllowDisplayOfInsecureContentMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAllowFileAccessFromFileURLs", InternalSettingsGeneratedV8Internal::setAllowFileAccessFromFileURLsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAllowRunningOfInsecureContent", InternalSettingsGeneratedV8Internal::setAllowRunningOfInsecureContentMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAllowScriptsToCloseWindows", InternalSettingsGeneratedV8Internal::setAllowScriptsToCloseWindowsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAllowUniversalAccessFromFileURLs", InternalSettingsGeneratedV8Internal::setAllowUniversalAccessFromFileURLsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAntialiased2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setAntialiased2dCanvasEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAntialiasedClips2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setAntialiasedClips2dCanvasEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAsynchronousSpellCheckingEnabled", InternalSettingsGeneratedV8Internal::setAsynchronousSpellCheckingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAvailableHoverTypes", InternalSettingsGeneratedV8Internal::setAvailableHoverTypesMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAvailablePointerTypes", InternalSettingsGeneratedV8Internal::setAvailablePointerTypesMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setBackgroundHtmlParserOutstandingTokenLimit", InternalSettingsGeneratedV8Internal::setBackgroundHtmlParserOutstandingTokenLimitMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setBackgroundHtmlParserPendingTokenLimit", InternalSettingsGeneratedV8Internal::setBackgroundHtmlParserPendingTokenLimitMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setCaretBrowsingEnabled", InternalSettingsGeneratedV8Internal::setCaretBrowsingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setCookieEnabled", InternalSettingsGeneratedV8Internal::setCookieEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDefaultFixedFontSize", InternalSettingsGeneratedV8Internal::setDefaultFixedFontSizeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDefaultFontSize", InternalSettingsGeneratedV8Internal::setDefaultFontSizeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDefaultTextEncodingName", InternalSettingsGeneratedV8Internal::setDefaultTextEncodingNameMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDefaultVideoPosterURL", InternalSettingsGeneratedV8Internal::setDefaultVideoPosterURLMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDeviceScaleAdjustment", InternalSettingsGeneratedV8Internal::setDeviceScaleAdjustmentMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDeviceSupportsMouse", InternalSettingsGeneratedV8Internal::setDeviceSupportsMouseMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDeviceSupportsTouch", InternalSettingsGeneratedV8Internal::setDeviceSupportsTouchMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDisableReadingFromCanvas", InternalSettingsGeneratedV8Internal::setDisableReadingFromCanvasMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDNSPrefetchingEnabled", InternalSettingsGeneratedV8Internal::setDNSPrefetchingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDoHtmlPreloadScanning", InternalSettingsGeneratedV8Internal::setDoHtmlPreloadScanningMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDownloadableBinaryFontsEnabled", InternalSettingsGeneratedV8Internal::setDownloadableBinaryFontsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setForceZeroLayoutHeight", InternalSettingsGeneratedV8Internal::setForceZeroLayoutHeightMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setFullscreenSupported", InternalSettingsGeneratedV8Internal::setFullscreenSupportedMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setHyperlinkAuditingEnabled", InternalSettingsGeneratedV8Internal::setHyperlinkAuditingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setIgnoreMainFrameOverflowHiddenQuirk", InternalSettingsGeneratedV8Internal::setIgnoreMainFrameOverflowHiddenQuirkMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setImagesEnabled", InternalSettingsGeneratedV8Internal::setImagesEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setInlineTextBoxAccessibilityEnabled", InternalSettingsGeneratedV8Internal::setInlineTextBoxAccessibilityEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setInvertViewportScrollOrder", InternalSettingsGeneratedV8Internal::setInvertViewportScrollOrderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setJavaEnabled", InternalSettingsGeneratedV8Internal::setJavaEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setJavaScriptCanAccessClipboard", InternalSettingsGeneratedV8Internal::setJavaScriptCanAccessClipboardMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setJavaScriptCanOpenWindowsAutomatically", InternalSettingsGeneratedV8Internal::setJavaScriptCanOpenWindowsAutomaticallyMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLayerSquashingEnabled", InternalSettingsGeneratedV8Internal::setLayerSquashingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLoadWithOverviewMode", InternalSettingsGeneratedV8Internal::setLoadWithOverviewModeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLoadsImagesAutomatically", InternalSettingsGeneratedV8Internal::setLoadsImagesAutomaticallyMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLocalStorageEnabled", InternalSettingsGeneratedV8Internal::setLocalStorageEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLogDnsPrefetchAndPreconnect", InternalSettingsGeneratedV8Internal::setLogDnsPrefetchAndPreconnectMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLogPreload", InternalSettingsGeneratedV8Internal::setLogPreloadMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLowPriorityIframes", InternalSettingsGeneratedV8Internal::setLowPriorityIframesMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMainFrameClipsContent", InternalSettingsGeneratedV8Internal::setMainFrameClipsContentMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMaxBeaconTransmission", InternalSettingsGeneratedV8Internal::setMaxBeaconTransmissionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMaxTouchPoints", InternalSettingsGeneratedV8Internal::setMaxTouchPointsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMediaControlsOverlayPlayButtonEnabled", InternalSettingsGeneratedV8Internal::setMediaControlsOverlayPlayButtonEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMediaPlaybackRequiresUserGesture", InternalSettingsGeneratedV8Internal::setMediaPlaybackRequiresUserGestureMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMediaTypeOverride", InternalSettingsGeneratedV8Internal::setMediaTypeOverrideMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMinimumAccelerated2dCanvasSize", InternalSettingsGeneratedV8Internal::setMinimumAccelerated2dCanvasSizeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMinimumFontSize", InternalSettingsGeneratedV8Internal::setMinimumFontSizeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMinimumLogicalFontSize", InternalSettingsGeneratedV8Internal::setMinimumLogicalFontSizeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMockGestureTapHighlightsEnabled", InternalSettingsGeneratedV8Internal::setMockGestureTapHighlightsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMultiTargetTapNotificationEnabled", InternalSettingsGeneratedV8Internal::setMultiTargetTapNotificationEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setNavigateOnDragDrop", InternalSettingsGeneratedV8Internal::setNavigateOnDragDropMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setOfflineWebApplicationCacheEnabled", InternalSettingsGeneratedV8Internal::setOfflineWebApplicationCacheEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPasswordEchoDurationInSeconds", InternalSettingsGeneratedV8Internal::setPasswordEchoDurationInSecondsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPasswordEchoEnabled", InternalSettingsGeneratedV8Internal::setPasswordEchoEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPinchOverlayScrollbarThickness", InternalSettingsGeneratedV8Internal::setPinchOverlayScrollbarThicknessMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPluginsEnabled", InternalSettingsGeneratedV8Internal::setPluginsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPreferCompositingToLCDTextEnabled", InternalSettingsGeneratedV8Internal::setPreferCompositingToLCDTextEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setReportScreenSizeInPhysicalPixelsQuirk", InternalSettingsGeneratedV8Internal::setReportScreenSizeInPhysicalPixelsQuirkMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setReportWheelOverscroll", InternalSettingsGeneratedV8Internal::setReportWheelOverscrollMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setRootLayerScrolls", InternalSettingsGeneratedV8Internal::setRootLayerScrollsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setRubberBandingOnCompositorThread", InternalSettingsGeneratedV8Internal::setRubberBandingOnCompositorThreadMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setScriptEnabled", InternalSettingsGeneratedV8Internal::setScriptEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setScrollAnimatorEnabled", InternalSettingsGeneratedV8Internal::setScrollAnimatorEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setSelectTrailingWhitespaceEnabled", InternalSettingsGeneratedV8Internal::setSelectTrailingWhitespaceEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setSelectionIncludesAltImageText", InternalSettingsGeneratedV8Internal::setSelectionIncludesAltImageTextMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setShouldClearDocumentBackground", InternalSettingsGeneratedV8Internal::setShouldClearDocumentBackgroundMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setShouldPrintBackgrounds", InternalSettingsGeneratedV8Internal::setShouldPrintBackgroundsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setShouldRespectImageOrientation", InternalSettingsGeneratedV8Internal::setShouldRespectImageOrientationMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setShowContextMenuOnMouseUp", InternalSettingsGeneratedV8Internal::setShowContextMenuOnMouseUpMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setSmartInsertDeleteEnabled", InternalSettingsGeneratedV8Internal::setSmartInsertDeleteEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setSpatialNavigationEnabled", InternalSettingsGeneratedV8Internal::setSpatialNavigationEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setStrictMixedContentChecking", InternalSettingsGeneratedV8Internal::setStrictMixedContentCheckingMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setStrictPowerfulFeatureRestrictions", InternalSettingsGeneratedV8Internal::setStrictPowerfulFeatureRestrictionsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setSupportsMultipleWindows", InternalSettingsGeneratedV8Internal::setSupportsMultipleWindowsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setSyncXHRInDocumentsEnabled", InternalSettingsGeneratedV8Internal::setSyncXHRInDocumentsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextAreasAreResizable", InternalSettingsGeneratedV8Internal::setTextAreasAreResizableMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackBackgroundColor", InternalSettingsGeneratedV8Internal::setTextTrackBackgroundColorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackFontFamily", InternalSettingsGeneratedV8Internal::setTextTrackFontFamilyMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackFontStyle", InternalSettingsGeneratedV8Internal::setTextTrackFontStyleMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackFontVariant", InternalSettingsGeneratedV8Internal::setTextTrackFontVariantMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackTextColor", InternalSettingsGeneratedV8Internal::setTextTrackTextColorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackTextShadow", InternalSettingsGeneratedV8Internal::setTextTrackTextShadowMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackTextSize", InternalSettingsGeneratedV8Internal::setTextTrackTextSizeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setThreadedScrollingEnabled", InternalSettingsGeneratedV8Internal::setThreadedScrollingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTouchAdjustmentEnabled", InternalSettingsGeneratedV8Internal::setTouchAdjustmentEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTouchDragDropEnabled", InternalSettingsGeneratedV8Internal::setTouchDragDropEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTouchEditingEnabled", InternalSettingsGeneratedV8Internal::setTouchEditingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUnifiedTextCheckerEnabled", InternalSettingsGeneratedV8Internal::setUnifiedTextCheckerEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUnsafePluginPastingEnabled", InternalSettingsGeneratedV8Internal::setUnsafePluginPastingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUseLegacyBackgroundSizeShorthandBehavior", InternalSettingsGeneratedV8Internal::setUseLegacyBackgroundSizeShorthandBehaviorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUseMobileViewportStyle", InternalSettingsGeneratedV8Internal::setUseMobileViewportStyleMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUseSolidColorScrollbars", InternalSettingsGeneratedV8Internal::setUseSolidColorScrollbarsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUseWideViewport", InternalSettingsGeneratedV8Internal::setUseWideViewportMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setUsesEncodingDetector", InternalSettingsGeneratedV8Internal::setUsesEncodingDetectorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setValidationMessageTimerMagnification", InternalSettingsGeneratedV8Internal::setValidationMessageTimerMagnificationMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setViewportEnabled", InternalSettingsGeneratedV8Internal::setViewportEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setViewportMetaEnabled", InternalSettingsGeneratedV8Internal::setViewportMetaEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setViewportMetaMergeContentQuirk", InternalSettingsGeneratedV8Internal::setViewportMetaMergeContentQuirkMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setViewportMetaZeroValuesQuirk", InternalSettingsGeneratedV8Internal::setViewportMetaZeroValuesQuirkMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setWebAudioEnabled", InternalSettingsGeneratedV8Internal::setWebAudioEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setWebGLEnabled", InternalSettingsGeneratedV8Internal::setWebGLEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setWebGLErrorsToConsoleEnabled", InternalSettingsGeneratedV8Internal::setWebGLErrorsToConsoleEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setWebSecurityEnabled", InternalSettingsGeneratedV8Internal::setWebSecurityEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setWideViewportQuirkEnabled", InternalSettingsGeneratedV8Internal::setWideViewportQuirkEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setXSSAuditorEnabled", InternalSettingsGeneratedV8Internal::setXSSAuditorEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8InternalSettingsGeneratedTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "InternalSettingsGenerated", v8::Local<v8::FunctionTemplate>(), V8InternalSettingsGenerated::internalFieldCount,
        0, 0,
        0, 0,
        V8InternalSettingsGeneratedMethods, WTF_ARRAY_LENGTH(V8InternalSettingsGeneratedMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8InternalSettingsGenerated::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8InternalSettingsGeneratedTemplate);
}

bool V8InternalSettingsGenerated::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8InternalSettingsGenerated::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InternalSettingsGenerated* V8InternalSettingsGenerated::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8InternalSettingsGenerated::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<InternalSettingsGenerated>()->ref();
#endif
}

void V8InternalSettingsGenerated::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<InternalSettingsGenerated>()->deref();
#endif
}

} // namespace blink
