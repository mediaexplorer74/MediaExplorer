// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8PrivateScriptTest.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/PrivateScriptRunner.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalFrame.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/ScriptForbiddenScope.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8PrivateScriptTest::wrapperTypeInfo = { gin::kEmbedderBlink, V8PrivateScriptTest::domTemplate, V8PrivateScriptTest::refObject, V8PrivateScriptTest::derefObject, V8PrivateScriptTest::trace, 0, 0, V8PrivateScriptTest::preparePrototypeObject, V8PrivateScriptTest::installConditionallyEnabledProperties, "PrivateScriptTest", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in PrivateScriptTest.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& PrivateScriptTest::s_wrapperTypeInfo = V8PrivateScriptTest::wrapperTypeInfo;

namespace PrivateScriptTestV8Internal {

static void readonlyShortAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::readonlyShortAttributeAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void readonlyShortAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::readonlyShortAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void shortAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::shortAttributeAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void shortAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::shortAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void shortAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "shortAttribute", "PrivateScriptTest", holder, info.GetIsolate());
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    int cppValue = toInt16(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    V8PrivateScriptTest::PrivateScript::shortAttributeAttributeSetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, cppValue);
}

static void shortAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::shortAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    String result;
    if (!V8PrivateScriptTest::PrivateScript::stringAttributeAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void stringAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::stringAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    V8PrivateScriptTest::PrivateScript::stringAttributeAttributeSetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, cppValue);
}

static void stringAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::stringAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void nodeAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    RefPtrWillBeRawPtr<Node> result = nullptr;
    if (!V8PrivateScriptTest::PrivateScript::nodeAttributeAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
}

static void nodeAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::nodeAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void nodeAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "nodeAttribute", "PrivateScriptTest", holder, info.GetIsolate());
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    Node* cppValue = V8Node::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue) {
        exceptionState.throwTypeError("The provided value is not of type 'Node'.");
        exceptionState.throwIfNeeded();
        return;
    }
    V8PrivateScriptTest::PrivateScript::nodeAttributeAttributeSetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, cppValue);
}

static void nodeAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::nodeAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void nodeAttributeThrowsIndexSizeErrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    RefPtrWillBeRawPtr<Node> result = nullptr;
    if (!V8PrivateScriptTest::PrivateScript::nodeAttributeThrowsIndexSizeErrorAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
}

static void nodeAttributeThrowsIndexSizeErrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::nodeAttributeThrowsIndexSizeErrorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void nodeAttributeThrowsIndexSizeErrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "nodeAttributeThrowsIndexSizeError", "PrivateScriptTest", holder, info.GetIsolate());
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    Node* cppValue = V8Node::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue && !isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("The provided value is not of type 'Node'.");
        exceptionState.throwIfNeeded();
        return;
    }
    V8PrivateScriptTest::PrivateScript::nodeAttributeThrowsIndexSizeErrorAttributeSetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, cppValue);
}

static void nodeAttributeThrowsIndexSizeErrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::nodeAttributeThrowsIndexSizeErrorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeImplementedInCPPAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    String result;
    if (!V8PrivateScriptTest::PrivateScript::stringAttributeImplementedInCPPAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void stringAttributeImplementedInCPPAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::stringAttributeImplementedInCPPAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeImplementedInCPPAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    V8PrivateScriptTest::PrivateScript::stringAttributeImplementedInCPPAttributeSetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, cppValue);
}

static void stringAttributeImplementedInCPPAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::stringAttributeImplementedInCPPAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    v8SetReturnValueString(info, impl->stringAttributeImplementedInCPPForPrivateScriptOnly(), info.GetIsolate());
}

static void stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setStringAttributeImplementedInCPPForPrivateScriptOnly(cppValue);
}

static void stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeInPartialAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    String result;
    if (!V8PrivateScriptTest::PrivateScript::stringAttributeInPartialAttributeGetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void stringAttributeInPartialAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    PrivateScriptTestV8Internal::stringAttributeInPartialAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stringAttributeInPartialAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    V8PrivateScriptTest::PrivateScript::stringAttributeInPartialAttributeSetter(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, cppValue);
}

static void stringAttributeInPartialAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    PrivateScriptTestV8Internal::stringAttributeInPartialAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void doNothingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::doNothingMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void doNothingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::doNothingMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void return123Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::return123Method(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void return123MethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::return123Method(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void echoIntegerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "echoInteger", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value;
    {
        value = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::echoIntegerMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void echoIntegerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::echoIntegerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void echoStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "echoString", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8StringResource<> value;
    {
        value = info[0];
        if (!value.prepare())
            return;
    }
    String result;
    if (!V8PrivateScriptTest::PrivateScript::echoStringMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value, &result))
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void echoStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::echoStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void echoNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "echoNode", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* value;
    {
        value = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!value) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("echoNode", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    RefPtrWillBeRawPtr<Node> result = nullptr;
    if (!V8PrivateScriptTest::PrivateScript::echoNodeMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value, &result))
        return;
    v8SetReturnValue(info, result.release());
}

static void echoNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::echoNodeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addIntegerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addInteger", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value1;
    int value2;
    {
        value1 = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        value2 = toInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::addIntegerMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value1, value2, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void addIntegerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addIntegerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "addString", "PrivateScriptTest", 2, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8StringResource<> value1;
    V8StringResource<> value2;
    {
        value1 = info[0];
        if (!value1.prepare())
            return;
        value2 = info[1];
        if (!value2.prepare())
            return;
    }
    String result;
    if (!V8PrivateScriptTest::PrivateScript::addStringMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value1, value2, &result))
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void addStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setIntegerToPrototypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setIntegerToPrototype", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value;
    {
        value = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    V8PrivateScriptTest::PrivateScript::setIntegerToPrototypeMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value);
}

static void setIntegerToPrototypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::setIntegerToPrototypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getIntegerFromPrototypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::getIntegerFromPrototypeMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void getIntegerFromPrototypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::getIntegerFromPrototypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setIntegerToDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setIntegerToDocument", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Document* document;
    int value;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        value = toInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    V8PrivateScriptTest::PrivateScript::setIntegerToDocumentMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, document, value);
}

static void setIntegerToDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::setIntegerToDocumentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getIntegerFromDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getIntegerFromDocument", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getIntegerFromDocument", "PrivateScriptTest", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::getIntegerFromDocumentMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, document, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void getIntegerFromDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::getIntegerFromDocumentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createElementMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "createElement", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("createElement", "PrivateScriptTest", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    RefPtrWillBeRawPtr<Node> result = nullptr;
    if (!V8PrivateScriptTest::PrivateScript::createElementMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, document, &result))
        return;
    v8SetReturnValue(info, result.release());
}

static void createElementMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::createElementMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void appendChildMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "appendChild", "PrivateScriptTest", 2, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* node1;
    Node* node2;
    {
        node1 = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node1) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("appendChild", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
        node2 = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!node2) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("appendChild", "PrivateScriptTest", "parameter 2 is not of type 'Node'."));
            return;
        }
    }
    V8PrivateScriptTest::PrivateScript::appendChildMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, node1, node2);
}

static void appendChildMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::appendChildMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void firstChildMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "firstChild", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("firstChild", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    RefPtrWillBeRawPtr<Node> result = nullptr;
    if (!V8PrivateScriptTest::PrivateScript::firstChildMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, node, &result))
        return;
    v8SetReturnValue(info, result.release());
}

static void firstChildMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::firstChildMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void nextSiblingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "nextSibling", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("nextSibling", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    RefPtrWillBeRawPtr<Node> result = nullptr;
    if (!V8PrivateScriptTest::PrivateScript::nextSiblingMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, node, &result))
        return;
    v8SetReturnValue(info, result.release());
}

static void nextSiblingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::nextSiblingMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void innerHTMLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "innerHTML", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("innerHTML", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    String result;
    if (!V8PrivateScriptTest::PrivateScript::innerHTMLMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, node, &result))
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void innerHTMLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::innerHTMLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setInnerHTMLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setInnerHTML", "PrivateScriptTest", 2, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* node;
    V8StringResource<> string;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setInnerHTML", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
        string = info[1];
        if (!string.prepare())
            return;
    }
    V8PrivateScriptTest::PrivateScript::setInnerHTMLMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, node, string);
}

static void setInnerHTMLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::setInnerHTMLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addClickListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "addClickListener", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Node* node;
    {
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("addClickListener", "PrivateScriptTest", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    V8PrivateScriptTest::PrivateScript::addClickListenerMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, node);
}

static void addClickListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addClickListenerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clickNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "clickNode", "PrivateScriptTest", 2, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Document* document;
    Node* node;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("clickNode", "PrivateScriptTest", "parameter 1 is not of type 'Document'."));
            return;
        }
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!node) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("clickNode", "PrivateScriptTest", "parameter 2 is not of type 'Node'."));
            return;
        }
    }
    V8PrivateScriptTest::PrivateScript::clickNodeMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, document, node);
}

static void clickNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::clickNodeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsDOMSyntaxErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsDOMSyntaxErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsDOMSyntaxErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsDOMSyntaxErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsTypeErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsTypeErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsTypeErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsTypeErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsRangeErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsRangeErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsRangeErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsRangeErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsSyntaxErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsSyntaxErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsSyntaxErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsSyntaxErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsReferenceErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsReferenceErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsReferenceErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsReferenceErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void voidMethodThrowsStackOverflowErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    V8PrivateScriptTest::PrivateScript::voidMethodThrowsStackOverflowErrorMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl);
}

static void voidMethodThrowsStackOverflowErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::voidMethodThrowsStackOverflowErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addIntegerImplementedInCPPMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIntegerImplementedInCPP", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value1;
    int value2;
    {
        value1 = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        value2 = toInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::addIntegerImplementedInCPPMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value1, value2, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void addIntegerImplementedInCPPMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addIntegerImplementedInCPPMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addIntegerImplementedInCPPForPrivateScriptOnlyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIntegerImplementedInCPPForPrivateScriptOnly", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value1;
    int value2;
    {
        value1 = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        value2 = toInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueInt(info, impl->addIntegerImplementedInCPPForPrivateScriptOnly(value1, value2));
}

static void addIntegerImplementedInCPPForPrivateScriptOnlyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addIntegerImplementedInCPPForPrivateScriptOnlyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void dispatchDocumentOnloadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "dispatchDocumentOnload", "PrivateScriptTest", 1, info.Length()), info.GetIsolate());
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("dispatchDocumentOnload", "PrivateScriptTest", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    V8PrivateScriptTest::PrivateScript::dispatchDocumentOnloadMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, document);
}

static void dispatchDocumentOnloadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::dispatchDocumentOnloadMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addIntegerInPartialMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIntegerInPartial", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value1;
    int value2;
    {
        value1 = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        value2 = toInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::addIntegerInPartialMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value1, value2, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void addIntegerInPartialMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addIntegerInPartialMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addInteger2InPartialMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addInteger2InPartial", "PrivateScriptTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PrivateScriptTest* impl = V8PrivateScriptTest::toImpl(info.Holder());
    int value1;
    int value2;
    {
        value1 = toInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        value2 = toInt16(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    int result = 0;
    if (!V8PrivateScriptTest::PrivateScript::addInteger2InPartialMethod(toLocalFrame(toFrameIfNotDetached(info.GetIsolate()->GetCurrentContext())), impl, value1, value2, &result))
        return;
    v8SetReturnValueInt(info, result);
}

static void addInteger2InPartialMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PrivateScriptTestV8Internal::addInteger2InPartialMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace PrivateScriptTestV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8PrivateScriptTestAccessors[] = {
    {"readonlyShortAttribute", PrivateScriptTestV8Internal::readonlyShortAttributeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shortAttribute", PrivateScriptTestV8Internal::shortAttributeAttributeGetterCallback, PrivateScriptTestV8Internal::shortAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stringAttribute", PrivateScriptTestV8Internal::stringAttributeAttributeGetterCallback, PrivateScriptTestV8Internal::stringAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"nodeAttribute", PrivateScriptTestV8Internal::nodeAttributeAttributeGetterCallback, PrivateScriptTestV8Internal::nodeAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"nodeAttributeThrowsIndexSizeError", PrivateScriptTestV8Internal::nodeAttributeThrowsIndexSizeErrorAttributeGetterCallback, PrivateScriptTestV8Internal::nodeAttributeThrowsIndexSizeErrorAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stringAttributeImplementedInCPP", PrivateScriptTestV8Internal::stringAttributeImplementedInCPPAttributeGetterCallback, PrivateScriptTestV8Internal::stringAttributeImplementedInCPPAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stringAttributeImplementedInCPPForPrivateScriptOnly", PrivateScriptTestV8Internal::stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeGetterCallback, PrivateScriptTestV8Internal::stringAttributeImplementedInCPPForPrivateScriptOnlyAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnlyExposedToPrivateScript, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"stringAttributeInPartial", PrivateScriptTestV8Internal::stringAttributeInPartialAttributeGetterCallback, PrivateScriptTestV8Internal::stringAttributeInPartialAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8PrivateScriptTestMethods[] = {
    {"doNothing", PrivateScriptTestV8Internal::doNothingMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"return123", PrivateScriptTestV8Internal::return123MethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"echoInteger", PrivateScriptTestV8Internal::echoIntegerMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"echoString", PrivateScriptTestV8Internal::echoStringMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"echoNode", PrivateScriptTestV8Internal::echoNodeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"addInteger", PrivateScriptTestV8Internal::addIntegerMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"addString", PrivateScriptTestV8Internal::addStringMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setIntegerToPrototype", PrivateScriptTestV8Internal::setIntegerToPrototypeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getIntegerFromPrototype", PrivateScriptTestV8Internal::getIntegerFromPrototypeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setIntegerToDocument", PrivateScriptTestV8Internal::setIntegerToDocumentMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getIntegerFromDocument", PrivateScriptTestV8Internal::getIntegerFromDocumentMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"createElement", PrivateScriptTestV8Internal::createElementMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"appendChild", PrivateScriptTestV8Internal::appendChildMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"firstChild", PrivateScriptTestV8Internal::firstChildMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"nextSibling", PrivateScriptTestV8Internal::nextSiblingMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"innerHTML", PrivateScriptTestV8Internal::innerHTMLMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setInnerHTML", PrivateScriptTestV8Internal::setInnerHTMLMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"addClickListener", PrivateScriptTestV8Internal::addClickListenerMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clickNode", PrivateScriptTestV8Internal::clickNodeMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsDOMSyntaxError", PrivateScriptTestV8Internal::voidMethodThrowsDOMSyntaxErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsError", PrivateScriptTestV8Internal::voidMethodThrowsErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsTypeError", PrivateScriptTestV8Internal::voidMethodThrowsTypeErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsRangeError", PrivateScriptTestV8Internal::voidMethodThrowsRangeErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsSyntaxError", PrivateScriptTestV8Internal::voidMethodThrowsSyntaxErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsReferenceError", PrivateScriptTestV8Internal::voidMethodThrowsReferenceErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"voidMethodThrowsStackOverflowError", PrivateScriptTestV8Internal::voidMethodThrowsStackOverflowErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"addIntegerImplementedInCPP", PrivateScriptTestV8Internal::addIntegerImplementedInCPPMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"addIntegerImplementedInCPPForPrivateScriptOnly", PrivateScriptTestV8Internal::addIntegerImplementedInCPPForPrivateScriptOnlyMethodCallback, 0, 2, V8DOMConfiguration::OnlyExposedToPrivateScript},
    {"dispatchDocumentOnload", PrivateScriptTestV8Internal::dispatchDocumentOnloadMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"addIntegerInPartial", PrivateScriptTestV8Internal::addIntegerInPartialMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"addInteger2InPartial", PrivateScriptTestV8Internal::addInteger2InPartialMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8PrivateScriptTestTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "PrivateScriptTest", v8::Local<v8::FunctionTemplate>(), V8PrivateScriptTest::internalFieldCount,
        0, 0,
        V8PrivateScriptTestAccessors, WTF_ARRAY_LENGTH(V8PrivateScriptTestAccessors),
        V8PrivateScriptTestMethods, WTF_ARRAY_LENGTH(V8PrivateScriptTestMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8PrivateScriptTest::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8PrivateScriptTestTemplate);
}

bool V8PrivateScriptTest::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8PrivateScriptTest::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

PrivateScriptTest* V8PrivateScriptTest::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8PrivateScriptTest::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8PrivateScriptTest::derefObject(ScriptWrappable* scriptWrappable)
{
}

bool V8PrivateScriptTest::PrivateScript::doNothingMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "doNothing", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "doNothing", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::return123Method(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "return123", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "return123", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::echoIntegerMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> valueHandle = v8::Integer::New(scriptState->isolate(), value);
    v8::Local<v8::Value> argv[] = { valueHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "echoInteger", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "echoInteger", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::echoStringMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, String value, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> valueHandle = v8String(scriptState->isolate(), value);
    v8::Local<v8::Value> argv[] = { valueHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "echoString", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "echoString", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::echoNodeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> value, RefPtrWillBeRawPtr<Node>* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> valueHandle = toV8(value, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { valueHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "echoNode", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "echoNode", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    Node* cppValue = V8Node::toImplWithTypeCheck(scriptState->isolate(), v8Value);
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addIntegerMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> value1Handle = v8::Integer::New(scriptState->isolate(), value1);
    v8::Local<v8::Value> value2Handle = v8::Integer::New(scriptState->isolate(), value2);
    v8::Local<v8::Value> argv[] = { value1Handle, value2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addInteger", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addInteger", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addStringMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, String value1, String value2, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> value1Handle = v8String(scriptState->isolate(), value1);
    v8::Local<v8::Value> value2Handle = v8String(scriptState->isolate(), value2);
    v8::Local<v8::Value> argv[] = { value1Handle, value2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addString", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addString", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::setIntegerToPrototypeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> valueHandle = v8::Integer::New(scriptState->isolate(), value);
    v8::Local<v8::Value> argv[] = { valueHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setIntegerToPrototype", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "setIntegerToPrototype", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::getIntegerFromPrototypeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getIntegerFromPrototype", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "getIntegerFromPrototype", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::setIntegerToDocumentMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, int value)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> documentHandle = toV8(document, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> valueHandle = v8::Integer::New(scriptState->isolate(), value);
    v8::Local<v8::Value> argv[] = { documentHandle, valueHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setIntegerToDocument", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "setIntegerToDocument", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::getIntegerFromDocumentMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> documentHandle = toV8(document, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { documentHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getIntegerFromDocument", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "getIntegerFromDocument", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::createElementMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, RefPtrWillBeRawPtr<Node>* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> documentHandle = toV8(document, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { documentHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createElement", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "createElement", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    Node* cppValue = V8Node::toImplWithTypeCheck(scriptState->isolate(), v8Value);
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::appendChildMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node1, PassRefPtrWillBeRawPtr<Node> node2)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> node1Handle = toV8(node1, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> node2Handle = toV8(node2, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { node1Handle, node2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "appendChild", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "appendChild", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::firstChildMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, RefPtrWillBeRawPtr<Node>* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> nodeHandle = toV8(node, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { nodeHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "firstChild", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "firstChild", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    Node* cppValue = V8Node::toImplWithTypeCheck(scriptState->isolate(), v8Value);
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::nextSiblingMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, RefPtrWillBeRawPtr<Node>* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> nodeHandle = toV8(node, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { nodeHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "nextSibling", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "nextSibling", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    Node* cppValue = V8Node::toImplWithTypeCheck(scriptState->isolate(), v8Value);
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::innerHTMLMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> nodeHandle = toV8(node, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { nodeHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "innerHTML", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "innerHTML", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::setInnerHTMLMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, String string)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> nodeHandle = toV8(node, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> stringHandle = v8String(scriptState->isolate(), string);
    v8::Local<v8::Value> argv[] = { nodeHandle, stringHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInnerHTML", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "setInnerHTML", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addClickListenerMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> nodeHandle = toV8(node, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { nodeHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addClickListener", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addClickListener", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::clickNodeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, PassRefPtrWillBeRawPtr<Node> node)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> documentHandle = toV8(document, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> nodeHandle = toV8(node, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { documentHandle, nodeHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clickNode", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "clickNode", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsDOMSyntaxErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsDOMSyntaxError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsDOMSyntaxError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsTypeErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsTypeError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsTypeError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsRangeErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsRangeError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsRangeError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsSyntaxErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsSyntaxError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsSyntaxError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsReferenceErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsReferenceError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsReferenceError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::voidMethodThrowsStackOverflowErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> *argv = 0;
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "voidMethodThrowsStackOverflowError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "voidMethodThrowsStackOverflowError", holder, 0, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addIntegerForPrivateScriptOnlyMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> value1Handle = v8::Integer::New(scriptState->isolate(), value1);
    v8::Local<v8::Value> value2Handle = v8::Integer::New(scriptState->isolate(), value2);
    v8::Local<v8::Value> argv[] = { value1Handle, value2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIntegerForPrivateScriptOnly", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addIntegerForPrivateScriptOnly", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addIntegerImplementedInCPPMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> value1Handle = v8::Integer::New(scriptState->isolate(), value1);
    v8::Local<v8::Value> value2Handle = v8::Integer::New(scriptState->isolate(), value2);
    v8::Local<v8::Value> argv[] = { value1Handle, value2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIntegerImplementedInCPP", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addIntegerImplementedInCPP", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::dispatchDocumentOnloadMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> documentHandle = toV8(document, scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> argv[] = { documentHandle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "dispatchDocumentOnload", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "dispatchDocumentOnload", holder, 1, argv);
    if (v8Value.IsEmpty())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addIntegerInPartialMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> value1Handle = v8::Integer::New(scriptState->isolate(), value1);
    v8::Local<v8::Value> value2Handle = v8::Integer::New(scriptState->isolate(), value2);
    v8::Local<v8::Value> argv[] = { value1Handle, value2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIntegerInPartial", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addIntegerInPartial", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::addInteger2InPartialMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    v8::Local<v8::Value> value1Handle = v8::Integer::New(scriptState->isolate(), value1);
    v8::Local<v8::Value> value2Handle = v8::Integer::New(scriptState->isolate(), value2);
    v8::Local<v8::Value> argv[] = { value1Handle, value2Handle };
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addInteger2InPartial", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMMethod(scriptState, scriptStateInUserScript, "PrivateScriptTest", "addInteger2InPartial", holder, 2, argv);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    *result = cppValue;
    RELEASE_ASSERT(!exceptionState.hadException());
    return true;
}

bool V8PrivateScriptTest::PrivateScript::readonlyShortAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "readonlyShortAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "readonlyShortAttribute", holder);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::shortAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "shortAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "shortAttribute", holder);
    if (v8Value.IsEmpty())
        return false;
    int cppValue = toInt16(scriptState->isolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::shortAttributeAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, int cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "shortAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "shortAttribute", holder, v8::Integer::New(scriptState->isolate(), cppValue));
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "stringAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttribute", holder);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "stringAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttribute", holder, v8String(scriptState->isolate(), cppValue));
}

bool V8PrivateScriptTest::PrivateScript::nodeAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, RefPtrWillBeRawPtr<Node>* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "nodeAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "nodeAttribute", holder);
    if (v8Value.IsEmpty())
        return false;
    Node* cppValue = V8Node::toImplWithTypeCheck(scriptState->isolate(), v8Value);
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::nodeAttributeAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "nodeAttribute", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "nodeAttribute", holder, toV8(cppValue, scriptState->context()->Global(), scriptState->isolate()));
}

bool V8PrivateScriptTest::PrivateScript::nodeAttributeThrowsIndexSizeErrorAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, RefPtrWillBeRawPtr<Node>* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "nodeAttributeThrowsIndexSizeError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "nodeAttributeThrowsIndexSizeError", holder);
    if (v8Value.IsEmpty())
        return false;
    Node* cppValue = V8Node::toImplWithTypeCheck(scriptState->isolate(), v8Value);
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::nodeAttributeThrowsIndexSizeErrorAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "nodeAttributeThrowsIndexSizeError", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "nodeAttributeThrowsIndexSizeError", holder, toV8(cppValue, scriptState->context()->Global(), scriptState->isolate()));
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeForPrivateScriptOnlyAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "stringAttributeForPrivateScriptOnly", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttributeForPrivateScriptOnly", holder);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeForPrivateScriptOnlyAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "stringAttributeForPrivateScriptOnly", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttributeForPrivateScriptOnly", holder, v8String(scriptState->isolate(), cppValue));
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeImplementedInCPPAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "stringAttributeImplementedInCPP", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttributeImplementedInCPP", holder);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeImplementedInCPPAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "stringAttributeImplementedInCPP", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttributeImplementedInCPP", holder, v8String(scriptState->isolate(), cppValue));
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeInPartialAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::GetterContext, "stringAttributeInPartial", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    v8::Local<v8::Value> v8Value = PrivateScriptRunner::runDOMAttributeGetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttributeInPartial", holder);
    if (v8Value.IsEmpty())
        return false;
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return false;
    RELEASE_ASSERT(!exceptionState.hadException());
    *result = cppValue;
    return true;
}

bool V8PrivateScriptTest::PrivateScript::stringAttributeInPartialAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue)
{
    if (!frame)
        return false;
    v8::HandleScope handleScope(toIsolate(frame));
    ScriptForbiddenScope::AllowUserAgentScript script;
    ScriptState* scriptState = ScriptState::forWorld(frame, DOMWrapperWorld::privateScriptIsolatedWorld());
    if (!scriptState->contextIsValid())
        return false;
    ScriptState* scriptStateInUserScript = ScriptState::forMainWorld(frame);
    if (!scriptState->contextIsValid())
        return false;

    ScriptState::Scope scope(scriptState);
    v8::Local<v8::Value> holder = toV8(holderImpl, scriptState->context()->Global(), scriptState->isolate());
    if (holder.IsEmpty())
        return false;

    ExceptionState exceptionState(ExceptionState::SetterContext, "stringAttributeInPartial", "PrivateScriptTest", scriptState->context()->Global(), scriptState->isolate());
    return PrivateScriptRunner::runDOMAttributeSetter(scriptState, scriptStateInUserScript, "PrivateScriptTest", "stringAttributeInPartial", holder, v8String(scriptState->isolate(), cppValue));
}

} // namespace blink
