// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGPathSeg.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGPathSeg::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGPathSeg::domTemplate, V8SVGPathSeg::refObject, V8SVGPathSeg::derefObject, V8SVGPathSeg::trace, 0, 0, V8SVGPathSeg::preparePrototypeObject, V8SVGPathSeg::installConditionallyEnabledProperties, "SVGPathSeg", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGPathSeg.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGPathSeg::s_wrapperTypeInfo = V8SVGPathSeg::wrapperTypeInfo;

namespace SVGPathSegV8Internal {

static void pathSegTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathSeg* impl = V8SVGPathSeg::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->pathSegType());
}

static void pathSegTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SVGPathSegV8Internal::pathSegTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pathSegTypeAsLetterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathSeg* impl = V8SVGPathSeg::toImpl(holder);
    v8SetReturnValueString(info, impl->pathSegTypeAsLetter(), info.GetIsolate());
}

static void pathSegTypeAsLetterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SVGPathSegV8Internal::pathSegTypeAsLetterAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace SVGPathSegV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8SVGPathSegAccessors[] = {
    {"pathSegType", SVGPathSegV8Internal::pathSegTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pathSegTypeAsLetter", SVGPathSegV8Internal::pathSegTypeAsLetterAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8SVGPathSegTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::svg1DOMEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SVGPathSeg", v8::Local<v8::FunctionTemplate>(), V8SVGPathSeg::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SVGPathSeg", v8::Local<v8::FunctionTemplate>(), V8SVGPathSeg::internalFieldCount,
            0, 0,
            V8SVGPathSegAccessors, WTF_ARRAY_LENGTH(V8SVGPathSegAccessors),
            0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8SVGPathSegConstants[] = {
        {"PATHSEG_UNKNOWN", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CLOSEPATH", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_MOVETO_ABS", 2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_MOVETO_REL", 3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_LINETO_ABS", 4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_LINETO_REL", 5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_CUBIC_ABS", 6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_CUBIC_REL", 7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_QUADRATIC_ABS", 8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_QUADRATIC_REL", 9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_ARC_ABS", 10, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_ARC_REL", 11, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_LINETO_HORIZONTAL_ABS", 12, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_LINETO_HORIZONTAL_REL", 13, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_LINETO_VERTICAL_ABS", 14, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_LINETO_VERTICAL_REL", 15, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS", 16, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_CUBIC_SMOOTH_REL", 17, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS", 18, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL", 19, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8SVGPathSegConstants, WTF_ARRAY_LENGTH(V8SVGPathSegConstants));
    static_assert(0 == SVGPathSeg::PATHSEG_UNKNOWN, "the value of SVGPathSeg_PATHSEG_UNKNOWN does not match with implementation");
    static_assert(1 == SVGPathSeg::PATHSEG_CLOSEPATH, "the value of SVGPathSeg_PATHSEG_CLOSEPATH does not match with implementation");
    static_assert(2 == SVGPathSeg::PATHSEG_MOVETO_ABS, "the value of SVGPathSeg_PATHSEG_MOVETO_ABS does not match with implementation");
    static_assert(3 == SVGPathSeg::PATHSEG_MOVETO_REL, "the value of SVGPathSeg_PATHSEG_MOVETO_REL does not match with implementation");
    static_assert(4 == SVGPathSeg::PATHSEG_LINETO_ABS, "the value of SVGPathSeg_PATHSEG_LINETO_ABS does not match with implementation");
    static_assert(5 == SVGPathSeg::PATHSEG_LINETO_REL, "the value of SVGPathSeg_PATHSEG_LINETO_REL does not match with implementation");
    static_assert(6 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_ABS, "the value of SVGPathSeg_PATHSEG_CURVETO_CUBIC_ABS does not match with implementation");
    static_assert(7 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_REL, "the value of SVGPathSeg_PATHSEG_CURVETO_CUBIC_REL does not match with implementation");
    static_assert(8 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_ABS, "the value of SVGPathSeg_PATHSEG_CURVETO_QUADRATIC_ABS does not match with implementation");
    static_assert(9 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_REL, "the value of SVGPathSeg_PATHSEG_CURVETO_QUADRATIC_REL does not match with implementation");
    static_assert(10 == SVGPathSeg::PATHSEG_ARC_ABS, "the value of SVGPathSeg_PATHSEG_ARC_ABS does not match with implementation");
    static_assert(11 == SVGPathSeg::PATHSEG_ARC_REL, "the value of SVGPathSeg_PATHSEG_ARC_REL does not match with implementation");
    static_assert(12 == SVGPathSeg::PATHSEG_LINETO_HORIZONTAL_ABS, "the value of SVGPathSeg_PATHSEG_LINETO_HORIZONTAL_ABS does not match with implementation");
    static_assert(13 == SVGPathSeg::PATHSEG_LINETO_HORIZONTAL_REL, "the value of SVGPathSeg_PATHSEG_LINETO_HORIZONTAL_REL does not match with implementation");
    static_assert(14 == SVGPathSeg::PATHSEG_LINETO_VERTICAL_ABS, "the value of SVGPathSeg_PATHSEG_LINETO_VERTICAL_ABS does not match with implementation");
    static_assert(15 == SVGPathSeg::PATHSEG_LINETO_VERTICAL_REL, "the value of SVGPathSeg_PATHSEG_LINETO_VERTICAL_REL does not match with implementation");
    static_assert(16 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "the value of SVGPathSeg_PATHSEG_CURVETO_CUBIC_SMOOTH_ABS does not match with implementation");
    static_assert(17 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "the value of SVGPathSeg_PATHSEG_CURVETO_CUBIC_SMOOTH_REL does not match with implementation");
    static_assert(18 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "the value of SVGPathSeg_PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS does not match with implementation");
    static_assert(19 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "the value of SVGPathSeg_PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL does not match with implementation");

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8SVGPathSeg::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGPathSegTemplate);
}

bool V8SVGPathSeg::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGPathSeg::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGPathSeg* V8SVGPathSeg::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8SVGPathSeg::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGPathSeg>()->ref();
#endif
}

void V8SVGPathSeg::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGPathSeg>()->deref();
#endif
}

} // namespace blink
