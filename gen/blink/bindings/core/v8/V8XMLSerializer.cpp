// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8XMLSerializer.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8XMLSerializer::wrapperTypeInfo = { gin::kEmbedderBlink, V8XMLSerializer::domTemplate, V8XMLSerializer::refObject, V8XMLSerializer::derefObject, V8XMLSerializer::trace, 0, 0, V8XMLSerializer::preparePrototypeObject, V8XMLSerializer::installConditionallyEnabledProperties, "XMLSerializer", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in XMLSerializer.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& XMLSerializer::s_wrapperTypeInfo = V8XMLSerializer::wrapperTypeInfo;

namespace XMLSerializerV8Internal {

static void serializeToStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "serializeToString", "XMLSerializer", 1, info.Length()), info.GetIsolate());
        return;
    }
    XMLSerializer* impl = V8XMLSerializer::toImpl(info.Holder());
    Node* root;
    {
        root = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!root) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("serializeToString", "XMLSerializer", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValueString(info, impl->serializeToString(root), info.GetIsolate());
}

static void serializeToStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLSerializerV8Internal::serializeToStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    RawPtr<XMLSerializer> impl = XMLSerializer::create();
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8XMLSerializer::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace XMLSerializerV8Internal

static const V8DOMConfiguration::MethodConfiguration V8XMLSerializerMethods[] = {
    {"serializeToString", XMLSerializerV8Internal::serializeToStringMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

void V8XMLSerializer::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("XMLSerializer"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    XMLSerializerV8Internal::constructor(info);
}

static void installV8XMLSerializerTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "XMLSerializer", v8::Local<v8::FunctionTemplate>(), V8XMLSerializer::internalFieldCount,
        0, 0,
        0, 0,
        V8XMLSerializerMethods, WTF_ARRAY_LENGTH(V8XMLSerializerMethods));
    functionTemplate->SetCallHandler(V8XMLSerializer::constructorCallback);
    functionTemplate->SetLength(0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8XMLSerializer::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8XMLSerializerTemplate);
}

bool V8XMLSerializer::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8XMLSerializer::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

XMLSerializer* V8XMLSerializer::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8XMLSerializer::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8XMLSerializer::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
