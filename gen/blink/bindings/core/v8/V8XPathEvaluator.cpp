// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8XPathEvaluator.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8XPathExpression.h"
#include "bindings/core/v8/V8XPathNSResolver.h"
#include "bindings/core/v8/V8XPathResult.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8XPathEvaluator::wrapperTypeInfo = { gin::kEmbedderBlink, V8XPathEvaluator::domTemplate, V8XPathEvaluator::refObject, V8XPathEvaluator::derefObject, V8XPathEvaluator::trace, 0, 0, V8XPathEvaluator::preparePrototypeObject, V8XPathEvaluator::installConditionallyEnabledProperties, "XPathEvaluator", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in XPathEvaluator.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& XPathEvaluator::s_wrapperTypeInfo = V8XPathEvaluator::wrapperTypeInfo;

namespace XPathEvaluatorV8Internal {

static void createExpressionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createExpression", "XPathEvaluator", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    XPathEvaluator* impl = V8XPathEvaluator::toImpl(info.Holder());
    V8StringResource<> expression;
    RawPtr<XPathNSResolver> resolver;
    {
        expression = info[0];
        if (!expression.prepare())
            return;
        if (!info[1]->IsUndefined()) {
            resolver = toXPathNSResolver(ScriptState::current(info.GetIsolate()), info[1]);
            if (!resolver && !isUndefinedOrNull(info[1])) {
                exceptionState.throwTypeError("parameter 2 is not of type 'XPathNSResolver'.");
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            resolver = nullptr;
        }
    }
    RawPtr<XPathExpression> result = impl->createExpression(expression, resolver.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createExpressionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::V8XPathEvaluator_CreateExpression_Method);
    XPathEvaluatorV8Internal::createExpressionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createNSResolverMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "createNSResolver", "XPathEvaluator", 1, info.Length()), info.GetIsolate());
        return;
    }
    XPathEvaluator* impl = V8XPathEvaluator::toImpl(info.Holder());
    Node* nodeResolver;
    {
        nodeResolver = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!nodeResolver) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("createNSResolver", "XPathEvaluator", "parameter 1 is not of type 'Node'."));
            return;
        }
    }
    v8SetReturnValue(info, impl->createNSResolver(nodeResolver));
}

static void createNSResolverMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::V8XPathEvaluator_CreateNSResolver_Method);
    XPathEvaluatorV8Internal::createNSResolverMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void evaluateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "evaluate", "XPathEvaluator", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    XPathEvaluator* impl = V8XPathEvaluator::toImpl(info.Holder());
    V8StringResource<> expression;
    Node* contextNode;
    RawPtr<XPathNSResolver> resolver;
    unsigned type;
    ScriptValue inResult;
    {
        expression = info[0];
        if (!expression.prepare())
            return;
        contextNode = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!contextNode) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Node'.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (!info[2]->IsUndefined()) {
            resolver = toXPathNSResolver(ScriptState::current(info.GetIsolate()), info[2]);
            if (!resolver && !isUndefinedOrNull(info[2])) {
                exceptionState.throwTypeError("parameter 3 is not of type 'XPathNSResolver'.");
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            resolver = nullptr;
        }
        if (!info[3]->IsUndefined()) {
            type = toUInt16(info.GetIsolate(), info[3], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            type = 0u;
        }
        if (!info[4]->IsUndefined()) {
            inResult = ScriptValue(ScriptState::current(info.GetIsolate()), info[4]);
        } else {
            inResult = ScriptValue();
        }
    }
    RawPtr<XPathResult> result = impl->evaluate(expression, contextNode, resolver.release(), type, inResult, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void evaluateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::V8XPathEvaluator_Evaluate_Method);
    XPathEvaluatorV8Internal::evaluateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    RawPtr<XPathEvaluator> impl = XPathEvaluator::create();
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8XPathEvaluator::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace XPathEvaluatorV8Internal

static const V8DOMConfiguration::MethodConfiguration V8XPathEvaluatorMethods[] = {
    {"createExpression", XPathEvaluatorV8Internal::createExpressionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"createNSResolver", XPathEvaluatorV8Internal::createNSResolverMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"evaluate", XPathEvaluatorV8Internal::evaluateMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
};

void V8XPathEvaluator::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::V8XPathEvaluator_Constructor);
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("XPathEvaluator"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    XPathEvaluatorV8Internal::constructor(info);
}

static void installV8XPathEvaluatorTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "XPathEvaluator", v8::Local<v8::FunctionTemplate>(), V8XPathEvaluator::internalFieldCount,
        0, 0,
        0, 0,
        V8XPathEvaluatorMethods, WTF_ARRAY_LENGTH(V8XPathEvaluatorMethods));
    functionTemplate->SetCallHandler(V8XPathEvaluator::constructorCallback);
    functionTemplate->SetLength(0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8XPathEvaluator::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8XPathEvaluatorTemplate);
}

bool V8XPathEvaluator::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8XPathEvaluator::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

XPathEvaluator* V8XPathEvaluator::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8XPathEvaluator::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8XPathEvaluator::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
