// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8KeyboardEventInit.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8EventModifierInit.h"
#include "core/frame/UseCounter.h"

namespace blink {

void V8KeyboardEventInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, KeyboardEventInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8EventModifierInit::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> keyIdentifierValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "keyIdentifier")).ToLocal(&keyIdentifierValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (keyIdentifierValue.IsEmpty() || keyIdentifierValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> keyIdentifier = keyIdentifierValue;
            if (!keyIdentifier.prepare(exceptionState))
                return;
            impl.setKeyIdentifier(keyIdentifier);
        }
    }

    {
        v8::Local<v8::Value> keyLocationValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "keyLocation")).ToLocal(&keyLocationValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (keyLocationValue.IsEmpty() || keyLocationValue->IsUndefined()) {
            // Do nothing.
        } else {
            UseCounter::countDeprecationIfNotPrivateScript(isolate, callingExecutionContext(isolate), UseCounter::KeyboardEventKeyLocation);
            unsigned keyLocation = toUInt32(isolate, keyLocationValue, NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setLocation(keyLocation);
        }
    }

    {
        v8::Local<v8::Value> locationValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "location")).ToLocal(&locationValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (locationValue.IsEmpty() || locationValue->IsUndefined()) {
            // Do nothing.
        } else {
            unsigned location = toUInt32(isolate, locationValue, NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setLocation(location);
        }
    }

    {
        v8::Local<v8::Value> repeatValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "repeat")).ToLocal(&repeatValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (repeatValue.IsEmpty() || repeatValue->IsUndefined()) {
            // Do nothing.
        } else {
            bool repeat = toBoolean(isolate, repeatValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setRepeat(repeat);
        }
    }

}

v8::Local<v8::Value> toV8(const KeyboardEventInit& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8EventModifierInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    if (!toV8KeyboardEventInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8KeyboardEventInit(const KeyboardEventInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasKeyIdentifier()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "keyIdentifier"), v8String(isolate, impl.keyIdentifier()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "keyIdentifier"), v8String(isolate, String("")))))
            return false;
    }

    if (impl.hasLocation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "keyLocation"), v8::Integer::NewFromUnsigned(isolate, impl.location()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "keyLocation"), v8::Integer::NewFromUnsigned(isolate, 0u))))
            return false;
    }

    if (impl.hasLocation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "location"), v8::Integer::NewFromUnsigned(isolate, impl.location()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "location"), v8::Integer::NewFromUnsigned(isolate, 0u))))
            return false;
    }

    if (impl.hasRepeat()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "repeat"), v8Boolean(impl.repeat(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "repeat"), v8Boolean(false, isolate))))
            return false;
    }

    return true;
}

KeyboardEventInit NativeValueTraits<KeyboardEventInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    KeyboardEventInit impl;
    V8KeyboardEventInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
