// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CompositorProxy.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMMatrix.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8CompositorProxy::wrapperTypeInfo = { gin::kEmbedderBlink, V8CompositorProxy::domTemplate, V8CompositorProxy::refObject, V8CompositorProxy::derefObject, V8CompositorProxy::trace, 0, 0, V8CompositorProxy::preparePrototypeObject, V8CompositorProxy::installConditionallyEnabledProperties, "CompositorProxy", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CompositorProxy.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CompositorProxy::s_wrapperTypeInfo = V8CompositorProxy::wrapperTypeInfo;

namespace CompositorProxyV8Internal {

static void opacityAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "opacity", "CompositorProxy", holder, info.GetIsolate());
    double cppValue(impl->opacity(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValue(info, cppValue);
}

static void opacityAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    CompositorProxyV8Internal::opacityAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void opacityAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "opacity", "CompositorProxy", holder, info.GetIsolate());
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setOpacity(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void opacityAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    CompositorProxyV8Internal::opacityAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollLeftAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "scrollLeft", "CompositorProxy", holder, info.GetIsolate());
    double cppValue(impl->scrollLeft(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValue(info, cppValue);
}

static void scrollLeftAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    CompositorProxyV8Internal::scrollLeftAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollLeftAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "scrollLeft", "CompositorProxy", holder, info.GetIsolate());
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setScrollLeft(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void scrollLeftAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    CompositorProxyV8Internal::scrollLeftAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollTopAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "scrollTop", "CompositorProxy", holder, info.GetIsolate());
    double cppValue(impl->scrollTop(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValue(info, cppValue);
}

static void scrollTopAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    CompositorProxyV8Internal::scrollTopAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollTopAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "scrollTop", "CompositorProxy", holder, info.GetIsolate());
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setScrollTop(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void scrollTopAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    CompositorProxyV8Internal::scrollTopAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void transformAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "transform", "CompositorProxy", holder, info.GetIsolate());
    RawPtr<DOMMatrix> cppValue(impl->transform(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValueFast(info, WTF::getPtr(cppValue.release()), impl);
}

static void transformAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    CompositorProxyV8Internal::transformAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void transformAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "transform", "CompositorProxy", holder, info.GetIsolate());
    CompositorProxy* impl = V8CompositorProxy::toImpl(holder);
    DOMMatrix* cppValue = V8DOMMatrix::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    impl->setTransform(WTF::getPtr(cppValue), exceptionState);
    exceptionState.throwIfNeeded();
}

static void transformAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    CompositorProxyV8Internal::transformAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void supportsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "supports", "CompositorProxy", 1, info.Length()), info.GetIsolate());
        return;
    }
    CompositorProxy* impl = V8CompositorProxy::toImpl(info.Holder());
    V8StringResource<> attribute;
    {
        attribute = info[0];
        if (!attribute.prepare())
            return;
    }
    v8SetReturnValueBool(info, impl->supports(attribute));
}

static void supportsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CompositorProxyV8Internal::supportsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disconnectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CompositorProxy* impl = V8CompositorProxy::toImpl(info.Holder());
    impl->disconnect();
}

static void disconnectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CompositorProxyV8Internal::disconnectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "CompositorProxy", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Element* element;
    Vector<String> attributeArray;
    {
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        attributeArray = toImplArray<Vector<String>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<CompositorProxy> impl = CompositorProxy::create(executionContext, element, attributeArray, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8CompositorProxy::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace CompositorProxyV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8CompositorProxyAccessors[] = {
    {"opacity", CompositorProxyV8Internal::opacityAttributeGetterCallback, CompositorProxyV8Internal::opacityAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollLeft", CompositorProxyV8Internal::scrollLeftAttributeGetterCallback, CompositorProxyV8Internal::scrollLeftAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollTop", CompositorProxyV8Internal::scrollTopAttributeGetterCallback, CompositorProxyV8Internal::scrollTopAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"transform", CompositorProxyV8Internal::transformAttributeGetterCallback, CompositorProxyV8Internal::transformAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8CompositorProxyMethods[] = {
    {"supports", CompositorProxyV8Internal::supportsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"disconnect", CompositorProxyV8Internal::disconnectMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

void V8CompositorProxy::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("CompositorProxy"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    CompositorProxyV8Internal::constructor(info);
}

static void installV8CompositorProxyTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::compositorWorkerEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CompositorProxy", v8::Local<v8::FunctionTemplate>(), V8CompositorProxy::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CompositorProxy", v8::Local<v8::FunctionTemplate>(), V8CompositorProxy::internalFieldCount,
            0, 0,
            V8CompositorProxyAccessors, WTF_ARRAY_LENGTH(V8CompositorProxyAccessors),
            V8CompositorProxyMethods, WTF_ARRAY_LENGTH(V8CompositorProxyMethods));
    functionTemplate->SetCallHandler(V8CompositorProxy::constructorCallback);
    functionTemplate->SetLength(2);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8CompositorProxy::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8CompositorProxyTemplate);
}

bool V8CompositorProxy::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8CompositorProxy::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CompositorProxy* V8CompositorProxy::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8CompositorProxy::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8CompositorProxy::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
