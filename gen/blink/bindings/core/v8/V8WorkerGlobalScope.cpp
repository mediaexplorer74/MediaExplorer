// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WorkerGlobalScope.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ErrorHandler.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8WorkerConsole.h"
#include "bindings/core/v8/V8WorkerGlobalScope.h"
#include "bindings/core/v8/V8WorkerLocation.h"
#include "bindings/core/v8/V8WorkerNavigator.h"
#include "bindings/core/v8/V8WorkerPerformance.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/DOMWindowTimers.h"
#include "core/frame/UseCounter.h"
#include "core/imagebitmap/ImageBitmapFactories.h"
#include "core/timing/WorkerGlobalScopePerformance.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
WrapperTypeInfo V8WorkerGlobalScope::wrapperTypeInfo = { gin::kEmbedderBlink, V8WorkerGlobalScope::domTemplate, V8WorkerGlobalScope::refObject, V8WorkerGlobalScope::derefObject, V8WorkerGlobalScope::trace, 0, 0, V8WorkerGlobalScope::preparePrototypeObject, V8WorkerGlobalScope::installConditionallyEnabledProperties, "WorkerGlobalScope", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in WorkerGlobalScope.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& WorkerGlobalScope::s_wrapperTypeInfo = V8WorkerGlobalScope::wrapperTypeInfo;

namespace WorkerGlobalScopeV8Internal {

template<class CallbackInfo>
static bool WorkerGlobalScopeCreateDataProperty(v8::Local<v8::Name> name, v8::Local<v8::Value> v8Value, const CallbackInfo& info)
{
    ASSERT(info.This()->IsObject());
    return v8CallBoolean(v8::Local<v8::Object>::Cast(info.This())->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), name, v8Value));
}

static void selfAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->self()), impl);
}

static void selfAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::selfAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void locationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<WorkerLocation> cppValue(impl->location());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "location"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void locationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::locationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onerrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    EventListener* cppValue(impl->onerror());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onerrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::onerrorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onerror(), v8Value, V8WorkerGlobalScope::eventListenerCacheIndex);
    impl->setOnerror(V8EventListenerList::findOrCreateWrapper<V8ErrorHandler>(v8Value, true, ScriptState::current(info.GetIsolate())));
}

static void onerrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    WorkerGlobalScopeV8Internal::onerrorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void navigatorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<WorkerNavigator> cppValue(impl->navigator());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "navigator"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void navigatorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::navigatorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void consoleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<WorkerConsole> cppValue(impl->console());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "console"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void consoleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::consoleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void consoleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "console");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void consoleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    WorkerGlobalScopeV8Internal::consoleAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onrejectionhandledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    EventListener* cppValue(impl->onrejectionhandled());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onrejectionhandledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::onrejectionhandledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onrejectionhandledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onrejectionhandled(), v8Value, V8WorkerGlobalScope::eventListenerCacheIndex);
    impl->setOnrejectionhandled(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onrejectionhandledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    WorkerGlobalScopeV8Internal::onrejectionhandledAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onunhandledrejectionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    EventListener* cppValue(impl->onunhandledrejection());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onunhandledrejectionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::onunhandledrejectionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onunhandledrejectionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onunhandledrejection(), v8Value, V8WorkerGlobalScope::eventListenerCacheIndex);
    impl->setOnunhandledrejection(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onunhandledrejectionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    WorkerGlobalScopeV8Internal::onunhandledrejectionAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void performanceAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<WorkerPerformance> cppValue(WorkerGlobalScopePerformance::performance(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "performance"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void performanceAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::performanceAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void closeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    impl->close();
}

static void closeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::closeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void importScriptsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "importScripts", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    Vector<String> urls;
    {
        urls = toImplArguments<Vector<String>>(info, 0, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->importScripts(urls, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void importScriptsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::importScriptsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void btoaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "btoa", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    V8StringResource<> btoa;
    {
        btoa = info[0];
        if (!btoa.prepare())
            return;
    }
    String result = impl->btoa(btoa, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void btoaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::btoaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void atobMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "atob", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    V8StringResource<> atob;
    {
        atob = info[0];
        if (!atob.prepare())
            return;
    }
    String result = impl->atob(atob, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void atobMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::atobMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTimeout1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTimeout", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    ScriptValue handler;
    int timeout;
    Vector<ScriptValue> arguments;
    {
        if (!info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        handler = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    int result = DOMWindowTimers::setTimeout(scriptState, *impl, handler, timeout, arguments);
    v8SetReturnValueInt(info, result);
}

static void setTimeout2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTimeout", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    V8StringResource<> handler;
    int timeout;
    Vector<ScriptValue> arguments;
    {
        handler = info[0];
        if (!handler.prepare())
            return;
        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    int result = DOMWindowTimers::setTimeout(scriptState, *impl, handler, timeout, arguments);
    v8SetReturnValueInt(info, result);
}

static void setTimeoutMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTimeout", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 1:
        if (info[0]->IsFunction()) {
            setTimeout1Method(info);
            return;
        }
        if (true) {
            setTimeout2Method(info);
            return;
        }
        break;
    case 2:
        if (info[0]->IsFunction()) {
            setTimeout1Method(info);
            return;
        }
        if (true) {
            setTimeout2Method(info);
            return;
        }
        break;
    case 3:
        if (info[0]->IsFunction()) {
            setTimeout1Method(info);
            return;
        }
        if (true) {
            setTimeout2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void setTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::setTimeoutMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearTimeoutMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearTimeout", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    int handle;
    {
        if (!info[0]->IsUndefined()) {
            handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            handle = 0;
        }
    }
    DOMWindowTimers::clearTimeout(*impl, handle);
}

static void clearTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::clearTimeoutMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setInterval1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInterval", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    ScriptValue handler;
    int timeout;
    Vector<ScriptValue> arguments;
    {
        if (!info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        handler = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    int result = DOMWindowTimers::setInterval(scriptState, *impl, handler, timeout, arguments);
    v8SetReturnValueInt(info, result);
}

static void setInterval2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInterval", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    V8StringResource<> handler;
    int timeout;
    Vector<ScriptValue> arguments;
    {
        handler = info[0];
        if (!handler.prepare())
            return;
        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    int result = DOMWindowTimers::setInterval(scriptState, *impl, handler, timeout, arguments);
    v8SetReturnValueInt(info, result);
}

static void setIntervalMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setInterval", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 1:
        if (info[0]->IsFunction()) {
            setInterval1Method(info);
            return;
        }
        if (true) {
            setInterval2Method(info);
            return;
        }
        break;
    case 2:
        if (info[0]->IsFunction()) {
            setInterval1Method(info);
            return;
        }
        if (true) {
            setInterval2Method(info);
            return;
        }
        break;
    case 3:
        if (info[0]->IsFunction()) {
            setInterval1Method(info);
            return;
        }
        if (true) {
            setInterval2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void setIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::setIntervalMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearIntervalMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearInterval", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    int handle;
    {
        if (!info[0]->IsUndefined()) {
            handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            handle = 0;
        }
    }
    DOMWindowTimers::clearInterval(*impl, handle);
}

static void clearIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::clearIntervalMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createImageBitmap1MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    Blob* blob;
    {
        blob = V8Blob::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!blob) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Blob'.");
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, blob, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    createImageBitmap1MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void createImageBitmap2MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    Blob* blob;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        blob = V8Blob::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!blob) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Blob'.");
            return;
        }
        sx = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sy = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sw = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sh = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, blob, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    createImageBitmap2MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void createImageBitmap3MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    ImageData* data;
    {
        data = V8ImageData::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!data) {
            exceptionState.throwTypeError("parameter 1 is not of type 'ImageData'.");
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, data, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    createImageBitmap3MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void createImageBitmap4MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    ImageData* data;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        data = V8ImageData::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!data) {
            exceptionState.throwTypeError("parameter 1 is not of type 'ImageData'.");
            return;
        }
        sx = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sy = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sw = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sh = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, data, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    createImageBitmap4MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void createImageBitmap5MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    ImageBitmap* bitmap;
    {
        bitmap = V8ImageBitmap::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!bitmap) {
            exceptionState.throwTypeError("parameter 1 is not of type 'ImageBitmap'.");
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, bitmap, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap5Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    createImageBitmap5MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void createImageBitmap6MethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    ImageBitmap* bitmap;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        bitmap = V8ImageBitmap::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!bitmap) {
            exceptionState.throwTypeError("parameter 1 is not of type 'ImageBitmap'.");
            return;
        }
        sx = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sy = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sw = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        sh = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, bitmap, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap6Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    createImageBitmap6MethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void createImageBitmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    switch (std::min(5, info.Length())) {
    case 1:
        if (V8Blob::hasInstance(info[0], info.GetIsolate())) {
            createImageBitmap1Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[0], info.GetIsolate())) {
            createImageBitmap3Method(info);
            return;
        }
        if (V8ImageBitmap::hasInstance(info[0], info.GetIsolate())) {
            createImageBitmap5Method(info);
            return;
        }
        break;
    case 5:
        if (V8Blob::hasInstance(info[0], info.GetIsolate())) {
            createImageBitmap2Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[0], info.GetIsolate())) {
            createImageBitmap4Method(info);
            return;
        }
        if (V8ImageBitmap::hasInstance(info[0], info.GetIsolate())) {
            createImageBitmap6Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            setArityTypeError(exceptionState, "[1, 5]", info.Length());
            v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
            return;
        }
        break;
    }
    if (info.Length() < 1) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
    return;
}

static void createImageBitmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::createImageBitmapMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace WorkerGlobalScopeV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8WorkerGlobalScopeAccessors[] = {
    {"self", WorkerGlobalScopeV8Internal::selfAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"location", WorkerGlobalScopeV8Internal::locationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onerror", WorkerGlobalScopeV8Internal::onerrorAttributeGetterCallback, WorkerGlobalScopeV8Internal::onerrorAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"navigator", WorkerGlobalScopeV8Internal::navigatorAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"console", WorkerGlobalScopeV8Internal::consoleAttributeGetterCallback, WorkerGlobalScopeV8Internal::consoleAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"performance", WorkerGlobalScopeV8Internal::performanceAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8WorkerGlobalScopeMethods[] = {
    {"close", WorkerGlobalScopeV8Internal::closeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"importScripts", WorkerGlobalScopeV8Internal::importScriptsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"btoa", WorkerGlobalScopeV8Internal::btoaMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"atob", WorkerGlobalScopeV8Internal::atobMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTimeout", WorkerGlobalScopeV8Internal::setTimeoutMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clearTimeout", WorkerGlobalScopeV8Internal::clearTimeoutMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setInterval", WorkerGlobalScopeV8Internal::setIntervalMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clearInterval", WorkerGlobalScopeV8Internal::clearIntervalMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

void V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "WorkerGlobalScope", V8EventTarget::domTemplate(isolate), V8WorkerGlobalScope::internalFieldCount,
        0, 0,
        V8WorkerGlobalScopeAccessors, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeAccessors),
        V8WorkerGlobalScopeMethods, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    if (RuntimeEnabledFeatures::promiseRejectionEventEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"onrejectionhandled", WorkerGlobalScopeV8Internal::onrejectionhandledAttributeGetterCallback, WorkerGlobalScopeV8Internal::onrejectionhandledAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::promiseRejectionEventEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"onunhandledrejection", WorkerGlobalScopeV8Internal::onunhandledrejectionAttributeGetterCallback, WorkerGlobalScopeV8Internal::onunhandledrejectionAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createImageBitmapMethodConfiguration = {
            "createImageBitmap", WorkerGlobalScopeV8Internal::createImageBitmapMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createImageBitmapMethodConfiguration);
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8WorkerGlobalScope::domTemplate(v8::Isolate* isolate)
{
    ASSERT(V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplateFunction != V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplate);
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplateFunction);
}

bool V8WorkerGlobalScope::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WorkerGlobalScope::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WorkerGlobalScope* V8WorkerGlobalScope::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8WorkerGlobalScope::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<WorkerGlobalScope>()->ref();
#endif
}

void V8WorkerGlobalScope::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<WorkerGlobalScope>()->deref();
#endif
}

InstallTemplateFunction V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplateFunction = (InstallTemplateFunction)&V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplate;

void V8WorkerGlobalScope::updateWrapperTypeInfo(InstallTemplateFunction installTemplateFunction, PreparePrototypeObjectFunction preparePrototypeObjectFunction)
{
    V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplateFunction = installTemplateFunction;
    if (preparePrototypeObjectFunction)
        V8WorkerGlobalScope::wrapperTypeInfo.preparePrototypeObjectFunction = preparePrototypeObjectFunction;
}

} // namespace blink
