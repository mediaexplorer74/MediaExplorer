// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8MutationObserver.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8MutationObserverInit.h"
#include "bindings/core/v8/V8MutationRecord.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8MutationObserver::wrapperTypeInfo = { gin::kEmbedderBlink, V8MutationObserver::domTemplate, V8MutationObserver::refObject, V8MutationObserver::derefObject, V8MutationObserver::trace, 0, V8MutationObserver::visitDOMWrapper, V8MutationObserver::preparePrototypeObject, V8MutationObserver::installConditionallyEnabledProperties, "MutationObserver", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in MutationObserver.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& MutationObserver::s_wrapperTypeInfo = V8MutationObserver::wrapperTypeInfo;

namespace MutationObserverV8Internal {

static void observeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "observe", "MutationObserver", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    MutationObserver* impl = V8MutationObserver::toImpl(info.Holder());
    Node* target;
    MutationObserverInit options;
    {
        target = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8MutationObserverInit::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->observe(target, options, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void observeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    MutationObserverV8Internal::observeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disconnectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    MutationObserver* impl = V8MutationObserver::toImpl(info.Holder());
    impl->disconnect();
}

static void disconnectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    MutationObserverV8Internal::disconnectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void takeRecordsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    MutationObserver* impl = V8MutationObserver::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->takeRecords(), info.Holder(), info.GetIsolate()));
}

static void takeRecordsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    MutationObserverV8Internal::takeRecordsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace MutationObserverV8Internal

static const V8DOMConfiguration::MethodConfiguration V8MutationObserverMethods[] = {
    {"observe", MutationObserverV8Internal::observeMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"disconnect", MutationObserverV8Internal::disconnectMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"takeRecords", MutationObserverV8Internal::takeRecordsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

void V8MutationObserver::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("MutationObserver"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    V8MutationObserver::constructorCustom(info);
}

static void installV8MutationObserverTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "MutationObserver", v8::Local<v8::FunctionTemplate>(), V8MutationObserver::internalFieldCount,
        0, 0,
        0, 0,
        V8MutationObserverMethods, WTF_ARRAY_LENGTH(V8MutationObserverMethods));
    functionTemplate->SetCallHandler(V8MutationObserver::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8MutationObserver::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8MutationObserverTemplate);
}

bool V8MutationObserver::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8MutationObserver::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MutationObserver* V8MutationObserver::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8MutationObserver::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<MutationObserver>()->ref();
#endif
}

void V8MutationObserver::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<MutationObserver>()->deref();
#endif
}

// void V8MutationObserver::visitDOMWrapper(v8::Isolate*, ScriptWrappable*, const v8::Persistent<v8::Object>&)
// {
// #ifdef MINIBLINK_NOT_IMPLEMENTED
// #endif // MINIBLINK_NOT_IMPLEMENTED
//     notImplemented();
// }
// 
// void V8MutationObserver::constructorCustom(const v8::FunctionCallbackInfo<v8::Value>&)
// {
// #ifdef MINIBLINK_NOT_IMPLEMENTED
// #endif // MINIBLINK_NOT_IMPLEMENTED
//     notImplemented();
// }

} // namespace blink
