// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8DictionaryTest.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8InternalDictionary.h"
#include "bindings/core/v8/V8InternalDictionaryDerived.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8DictionaryTest::wrapperTypeInfo = { gin::kEmbedderBlink, V8DictionaryTest::domTemplate, V8DictionaryTest::refObject, V8DictionaryTest::derefObject, V8DictionaryTest::trace, 0, 0, V8DictionaryTest::preparePrototypeObject, V8DictionaryTest::installConditionallyEnabledProperties, "DictionaryTest", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DictionaryTest.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DictionaryTest::s_wrapperTypeInfo = V8DictionaryTest::wrapperTypeInfo;

namespace DictionaryTestV8Internal {

static void setMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "set", "DictionaryTest", info.Holder(), info.GetIsolate());
    DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());
    InternalDictionary testingDictionary;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('testingDictionary') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8InternalDictionary::toImpl(info.GetIsolate(), info[0], testingDictionary, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->set(testingDictionary);
}

static void setMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DictionaryTestV8Internal::setMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());
    InternalDictionary result;
    impl->get(result);
    v8SetReturnValue(info, result);
}

static void getMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DictionaryTestV8Internal::getMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDerivedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDerived", "DictionaryTest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());
    InternalDictionaryDerived derived;
    {
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('derived') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8InternalDictionaryDerived::toImpl(info.GetIsolate(), info[0], derived, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setDerived(derived);
}

static void setDerivedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DictionaryTestV8Internal::setDerivedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getDerivedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());
    InternalDictionaryDerived result;
    impl->getDerived(result);
    v8SetReturnValue(info, result);
}

static void getDerivedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DictionaryTestV8Internal::getDerivedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace DictionaryTestV8Internal

static const V8DOMConfiguration::MethodConfiguration V8DictionaryTestMethods[] = {
    {"set", DictionaryTestV8Internal::setMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"get", DictionaryTestV8Internal::getMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setDerived", DictionaryTestV8Internal::setDerivedMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getDerived", DictionaryTestV8Internal::getDerivedMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8DictionaryTestTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "DictionaryTest", v8::Local<v8::FunctionTemplate>(), V8DictionaryTest::internalFieldCount,
        0, 0,
        0, 0,
        V8DictionaryTestMethods, WTF_ARRAY_LENGTH(V8DictionaryTestMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8DictionaryTest::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8DictionaryTestTemplate);
}

bool V8DictionaryTest::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8DictionaryTest::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DictionaryTest* V8DictionaryTest::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8DictionaryTest::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8DictionaryTest::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
