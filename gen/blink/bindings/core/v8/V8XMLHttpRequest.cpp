// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8XMLHttpRequest.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/UnionTypesCore.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8XMLHttpRequestUpload.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/inspector/ConsoleMessage.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8XMLHttpRequest::wrapperTypeInfo = { gin::kEmbedderBlink, V8XMLHttpRequest::domTemplate, V8XMLHttpRequest::refObject, V8XMLHttpRequest::derefObject, V8XMLHttpRequest::trace, V8XMLHttpRequest::toActiveDOMObject, 0, V8XMLHttpRequest::preparePrototypeObject, V8XMLHttpRequest::installConditionallyEnabledProperties, "XMLHttpRequest", &V8XMLHttpRequestEventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in XMLHttpRequest.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& XMLHttpRequest::s_wrapperTypeInfo = V8XMLHttpRequest::wrapperTypeInfo;

namespace XMLHttpRequestV8Internal {

static void onreadystatechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    EventListener* cppValue(impl->onreadystatechange());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onreadystatechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::onreadystatechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onreadystatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onreadystatechange(), v8Value, V8XMLHttpRequest::eventListenerCacheIndex);
    impl->setOnreadystatechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onreadystatechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    XMLHttpRequestV8Internal::onreadystatechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void readyStateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->readyState());
}

static void readyStateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::readyStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void timeoutAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->timeout());
}

static void timeoutAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::timeoutAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void timeoutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "timeout", "XMLHttpRequest", holder, info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTimeout(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void timeoutAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    XMLHttpRequestV8Internal::timeoutAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void withCredentialsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueBool(info, impl->withCredentials());
}

static void withCredentialsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::withCredentialsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void withCredentialsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "withCredentials", "XMLHttpRequest", holder, info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setWithCredentials(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void withCredentialsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    XMLHttpRequestV8Internal::withCredentialsAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uploadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    RawPtr<XMLHttpRequestUpload> cppValue(impl->upload());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "upload"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void uploadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::uploadAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void responseURLAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueString(info, impl->responseURL(), info.GetIsolate());
}

static void responseURLAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::responseURLAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void statusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->status());
}

static void statusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::statusAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void statusTextAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueString(info, impl->statusText(), info.GetIsolate());
}

static void statusTextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::statusTextAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void responseTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    v8SetReturnValueString(info, impl->responseType(), info.GetIsolate());
}

static void responseTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::responseTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void responseTypeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "responseType", "XMLHttpRequest", holder, info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    static const char* validValues[] = {
        "",
        "arraybuffer",
        "blob",
        "document",
        "json",
        "text",
        "legacystream",
    };
    if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "XMLHttpRequestResponseType", exceptionState)) {
        currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, exceptionState.message()));
        return;
    }
    impl->setResponseType(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void responseTypeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    XMLHttpRequestV8Internal::responseTypeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void responseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    V8XMLHttpRequest::responseAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void responseTextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    V8XMLHttpRequest::responseTextAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void responseXMLAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "responseXML", "XMLHttpRequest", holder, info.GetIsolate());
    RefPtrWillBeRawPtr<Document> cppValue(impl->responseXML(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValueFast(info, WTF::getPtr(cppValue.release()), impl);
}

static void responseXMLAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    XMLHttpRequestV8Internal::responseXMLAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void open1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "open", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    V8StringResource<> method;
    V8StringResource<> url;
    {
        method = info[0];
        if (!method.prepare())
            return;
        url = info[1];
        if (!url.prepare())
            return;
    }
    impl->open(method, url, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void open2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "open", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    V8StringResource<> method;
    V8StringResource<> url;
    bool async;
    V8StringResource<TreatNullAsNullString> username;
    V8StringResource<TreatNullAsNullString> password;
    {
        method = info[0];
        if (!method.prepare())
            return;
        url = info[1];
        if (!url.prepare())
            return;
        async = toBoolean(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (!info[3]->IsUndefined()) {
            username = info[3];
            if (!username.prepare())
                return;
        } else {
            username = nullptr;
        }
        if (!info[4]->IsUndefined()) {
            password = info[4];
            if (!password.prepare())
                return;
        } else {
            password = nullptr;
        }
    }
    impl->open(method, url, async, username, password, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void openMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "open", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    switch (std::min(5, info.Length())) {
    case 2:
        if (true) {
            open1Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            open2Method(info);
            return;
        }
        break;
    case 4:
        if (true) {
            open2Method(info);
            return;
        }
        break;
    case 5:
        if (true) {
            open2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void openMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::openMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setRequestHeaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRequestHeader", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    V8StringResource<> name;
    V8StringResource<> value;
    {
        name = info[0];
        if (!name.prepare())
            return;
        value = info[1];
        if (!value.prepare())
            return;
    }
    impl->setRequestHeader(name, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setRequestHeaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::setRequestHeaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sendMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "send", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormData body;
    {
        if (!info[0]->IsUndefined()) {
            V8ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormDataOrNull::toImpl(info.GetIsolate(), info[0], body, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            /* null default value */;
        }
    }
    impl->send(body, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void sendMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::sendMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void abortMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    impl->abort();
}

static void abortMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::abortMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getResponseHeaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getResponseHeader", "XMLHttpRequest", 1, info.Length()), info.GetIsolate());
        return;
    }
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    V8StringResource<> name;
    {
        name = info[0];
        if (!name.prepare())
            return;
    }
    v8SetReturnValueStringOrNull(info, impl->getResponseHeader(name), info.GetIsolate());
}

static void getResponseHeaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::getResponseHeaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getAllResponseHeadersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    v8SetReturnValueString(info, impl->getAllResponseHeaders(), info.GetIsolate());
}

static void getAllResponseHeadersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::getAllResponseHeadersMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void overrideMimeTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "overrideMimeType", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());
    V8StringResource<> mime;
    {
        mime = info[0];
        if (!mime.prepare())
            return;
    }
    impl->overrideMimeType(mime, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void overrideMimeTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    XMLHttpRequestV8Internal::overrideMimeTypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<XMLHttpRequest> impl = XMLHttpRequest::create(scriptState);
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8XMLHttpRequest::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace XMLHttpRequestV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8XMLHttpRequestAccessors[] = {
    {"onreadystatechange", XMLHttpRequestV8Internal::onreadystatechangeAttributeGetterCallback, XMLHttpRequestV8Internal::onreadystatechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"readyState", XMLHttpRequestV8Internal::readyStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"timeout", XMLHttpRequestV8Internal::timeoutAttributeGetterCallback, XMLHttpRequestV8Internal::timeoutAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"withCredentials", XMLHttpRequestV8Internal::withCredentialsAttributeGetterCallback, XMLHttpRequestV8Internal::withCredentialsAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"upload", XMLHttpRequestV8Internal::uploadAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"responseURL", XMLHttpRequestV8Internal::responseURLAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"status", XMLHttpRequestV8Internal::statusAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"statusText", XMLHttpRequestV8Internal::statusTextAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"responseType", XMLHttpRequestV8Internal::responseTypeAttributeGetterCallback, XMLHttpRequestV8Internal::responseTypeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"response", XMLHttpRequestV8Internal::responseAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"responseText", XMLHttpRequestV8Internal::responseTextAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"responseXML", XMLHttpRequestV8Internal::responseXMLAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8XMLHttpRequestMethods[] = {
    {"open", XMLHttpRequestV8Internal::openMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setRequestHeader", XMLHttpRequestV8Internal::setRequestHeaderMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"send", XMLHttpRequestV8Internal::sendMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"abort", XMLHttpRequestV8Internal::abortMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getResponseHeader", XMLHttpRequestV8Internal::getResponseHeaderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getAllResponseHeaders", XMLHttpRequestV8Internal::getAllResponseHeadersMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"overrideMimeType", XMLHttpRequestV8Internal::overrideMimeTypeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

void V8XMLHttpRequest::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("XMLHttpRequest"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    XMLHttpRequestV8Internal::constructor(info);
}

static void installV8XMLHttpRequestTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "XMLHttpRequest", V8XMLHttpRequestEventTarget::domTemplate(isolate), V8XMLHttpRequest::internalFieldCount,
        0, 0,
        V8XMLHttpRequestAccessors, WTF_ARRAY_LENGTH(V8XMLHttpRequestAccessors),
        V8XMLHttpRequestMethods, WTF_ARRAY_LENGTH(V8XMLHttpRequestMethods));
    functionTemplate->SetCallHandler(V8XMLHttpRequest::constructorCallback);
    functionTemplate->SetLength(0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8XMLHttpRequestConstants[] = {
        {"UNSENT", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"OPENED", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"HEADERS_RECEIVED", 2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"LOADING", 3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"DONE", 4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8XMLHttpRequestConstants, WTF_ARRAY_LENGTH(V8XMLHttpRequestConstants));
    static_assert(0 == XMLHttpRequest::UNSENT, "the value of XMLHttpRequest_UNSENT does not match with implementation");
    static_assert(1 == XMLHttpRequest::OPENED, "the value of XMLHttpRequest_OPENED does not match with implementation");
    static_assert(2 == XMLHttpRequest::HEADERS_RECEIVED, "the value of XMLHttpRequest_HEADERS_RECEIVED does not match with implementation");
    static_assert(3 == XMLHttpRequest::LOADING, "the value of XMLHttpRequest_LOADING does not match with implementation");
    static_assert(4 == XMLHttpRequest::DONE, "the value of XMLHttpRequest_DONE does not match with implementation");

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8XMLHttpRequest::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8XMLHttpRequestTemplate);
}

bool V8XMLHttpRequest::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8XMLHttpRequest::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

XMLHttpRequest* V8XMLHttpRequest::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

ActiveDOMObject* V8XMLHttpRequest::toActiveDOMObject(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

void V8XMLHttpRequest::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8XMLHttpRequest::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
