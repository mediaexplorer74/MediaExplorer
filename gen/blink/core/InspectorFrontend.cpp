// File is generated by Source/core/inspector/CodeGeneratorInspector.py

// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


#include "config.h"
#include "InspectorFrontend.h"

#include "core/inspector/InspectorFrontendChannel.h"
#include "platform/JSONValues.h"
#include "wtf/text/CString.h"
#include "wtf/text/WTFString.h"

namespace blink {

InspectorFrontend::InspectorFrontend(InspectorFrontendChannel* inspectorFrontendChannel)
    : m_inspectorFrontendChannel(inspectorFrontendChannel)
    , m_inspector(inspectorFrontendChannel)
    , m_memory(inspectorFrontendChannel)
    , m_page(inspectorFrontendChannel)
    , m_rendering(inspectorFrontendChannel)
    , m_emulation(inspectorFrontendChannel)
    , m_runtime(inspectorFrontendChannel)
    , m_console(inspectorFrontendChannel)
    , m_network(inspectorFrontendChannel)
    , m_database(inspectorFrontendChannel)
    , m_indexeddb(inspectorFrontendChannel)
    , m_cachestorage(inspectorFrontendChannel)
    , m_domstorage(inspectorFrontendChannel)
    , m_applicationcache(inspectorFrontendChannel)
    , m_filesystem(inspectorFrontendChannel)
    , m_dom(inspectorFrontendChannel)
    , m_css(inspectorFrontendChannel)
    , m_timeline(inspectorFrontendChannel)
    , m_debugger(inspectorFrontendChannel)
    , m_domdebugger(inspectorFrontendChannel)
    , m_profiler(inspectorFrontendChannel)
    , m_heapprofiler(inspectorFrontendChannel)
    , m_worker(inspectorFrontendChannel)
    , m_serviceworker(inspectorFrontendChannel)
    , m_input(inspectorFrontendChannel)
    , m_layertree(inspectorFrontendChannel)
    , m_deviceorientation(inspectorFrontendChannel)
    , m_screenorientation(inspectorFrontendChannel)
    , m_tracing(inspectorFrontendChannel)
    , m_power(inspectorFrontendChannel)
    , m_animation(inspectorFrontendChannel)
    , m_accessibility(inspectorFrontendChannel)
    , m_security(inspectorFrontendChannel)

{
}

void InspectorFrontend::Inspector::evaluateForTestInFrontend(int testCallId, const String& script)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Inspector.evaluateForTestInFrontend");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("testCallId", testCallId);
    paramsObject->setString("script", script);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Inspector::inspect(PassRefPtr<TypeBuilder::Runtime::RemoteObject> object, PassRefPtr<JSONObject> hints)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Inspector.inspect");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("object", object);
    paramsObject->setValue("hints", hints);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::domContentEventFired(double timestamp)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.domContentEventFired");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("timestamp", timestamp);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::loadEventFired(double timestamp)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.loadEventFired");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("timestamp", timestamp);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameAttached(const TypeBuilder::Page::FrameId& frameId, const TypeBuilder::Page::FrameId& parentFrameId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameAttached");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    paramsObject->setString("parentFrameId", parentFrameId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameNavigated(PassRefPtr<TypeBuilder::Page::Frame> frame)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameNavigated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("frame", frame);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameDetached(const TypeBuilder::Page::FrameId& frameId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameDetached");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameStartedLoading(const TypeBuilder::Page::FrameId& frameId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameStartedLoading");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameStoppedLoading(const TypeBuilder::Page::FrameId& frameId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameStoppedLoading");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameScheduledNavigation(const TypeBuilder::Page::FrameId& frameId, double delay)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameScheduledNavigation");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    paramsObject->setNumber("delay", delay);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameClearedScheduledNavigation(const TypeBuilder::Page::FrameId& frameId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameClearedScheduledNavigation");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::frameResized()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.frameResized");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::javascriptDialogOpening(const String& message, TypeBuilder::Page::DialogType::Enum type)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.javascriptDialogOpening");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("message", message);
    paramsObject->setString("type", TypeBuilder::getEnumConstantValue(type));
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Page::javascriptDialogClosed(bool result)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Page.javascriptDialogClosed");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setBoolean("result", result);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Emulation::viewportChanged(PassRefPtr<TypeBuilder::Emulation::Viewport> viewport)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Emulation.viewportChanged");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("viewport", viewport);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Runtime::executionContextCreated(PassRefPtr<TypeBuilder::Runtime::ExecutionContextDescription> context)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Runtime.executionContextCreated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("context", context);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Runtime::executionContextDestroyed(int executionContextId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Runtime.executionContextDestroyed");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("executionContextId", executionContextId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Runtime::executionContextsCleared()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Runtime.executionContextsCleared");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Console::messageAdded(PassRefPtr<TypeBuilder::Console::ConsoleMessage> message)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Console.messageAdded");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("message", message);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Console::messageRepeatCountUpdated(int count, double timestamp)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Console.messageRepeatCountUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("count", count);
    paramsObject->setNumber("timestamp", timestamp);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Console::messagesCleared()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Console.messagesCleared");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::requestWillBeSent(const TypeBuilder::Network::RequestId& requestId, const TypeBuilder::Page::FrameId& frameId, const TypeBuilder::Network::LoaderId& loaderId, const String& documentURL, PassRefPtr<TypeBuilder::Network::Request> request, double timestamp, double wallTime, PassRefPtr<TypeBuilder::Network::Initiator> initiator, PassRefPtr<TypeBuilder::Network::Response> redirectResponse, TypeBuilder::Page::ResourceType::Enum* type)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.requestWillBeSent");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setString("frameId", frameId);
    paramsObject->setString("loaderId", loaderId);
    paramsObject->setString("documentURL", documentURL);
    paramsObject->setValue("request", request);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setNumber("wallTime", wallTime);
    paramsObject->setValue("initiator", initiator);
    if (redirectResponse)
        paramsObject->setValue("redirectResponse", redirectResponse);
    if (type)
        paramsObject->setString("type", TypeBuilder::getEnumConstantValue(*type));
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::requestServedFromCache(const TypeBuilder::Network::RequestId& requestId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.requestServedFromCache");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::responseReceived(const TypeBuilder::Network::RequestId& requestId, const TypeBuilder::Page::FrameId& frameId, const TypeBuilder::Network::LoaderId& loaderId, double timestamp, TypeBuilder::Page::ResourceType::Enum type, PassRefPtr<TypeBuilder::Network::Response> response)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.responseReceived");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setString("frameId", frameId);
    paramsObject->setString("loaderId", loaderId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setString("type", TypeBuilder::getEnumConstantValue(type));
    paramsObject->setValue("response", response);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::dataReceived(const TypeBuilder::Network::RequestId& requestId, double timestamp, int dataLength, int encodedDataLength)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.dataReceived");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setNumber("dataLength", dataLength);
    paramsObject->setNumber("encodedDataLength", encodedDataLength);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::loadingFinished(const TypeBuilder::Network::RequestId& requestId, double timestamp, double encodedDataLength)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.loadingFinished");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setNumber("encodedDataLength", encodedDataLength);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::loadingFailed(const TypeBuilder::Network::RequestId& requestId, double timestamp, TypeBuilder::Page::ResourceType::Enum type, const String& errorText, const bool* const canceled)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.loadingFailed");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setString("type", TypeBuilder::getEnumConstantValue(type));
    paramsObject->setString("errorText", errorText);
    if (canceled)
        paramsObject->setBoolean("canceled", *canceled);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketWillSendHandshakeRequest(const TypeBuilder::Network::RequestId& requestId, double timestamp, double wallTime, PassRefPtr<TypeBuilder::Network::WebSocketRequest> request)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketWillSendHandshakeRequest");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setNumber("wallTime", wallTime);
    paramsObject->setValue("request", request);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketHandshakeResponseReceived(const TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<TypeBuilder::Network::WebSocketResponse> response)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketHandshakeResponseReceived");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setValue("response", response);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketCreated(const TypeBuilder::Network::RequestId& requestId, const String& url)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketCreated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setString("url", url);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketClosed(const TypeBuilder::Network::RequestId& requestId, double timestamp)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketClosed");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketFrameReceived(const TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<TypeBuilder::Network::WebSocketFrame> response)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketFrameReceived");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setValue("response", response);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketFrameError(const TypeBuilder::Network::RequestId& requestId, double timestamp, const String& errorMessage)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketFrameError");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setString("errorMessage", errorMessage);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::webSocketFrameSent(const TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<TypeBuilder::Network::WebSocketFrame> response)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.webSocketFrameSent");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setValue("response", response);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Network::eventSourceMessageReceived(const TypeBuilder::Network::RequestId& requestId, double timestamp, const String& eventName, const String& eventId, const String& data)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Network.eventSourceMessageReceived");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("requestId", requestId);
    paramsObject->setNumber("timestamp", timestamp);
    paramsObject->setString("eventName", eventName);
    paramsObject->setString("eventId", eventId);
    paramsObject->setString("data", data);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Database::addDatabase(PassRefPtr<TypeBuilder::Database::Database> database)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Database.addDatabase");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("database", database);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOMStorage::domStorageItemsCleared(PassRefPtr<TypeBuilder::DOMStorage::StorageId> storageId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOMStorage.domStorageItemsCleared");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("storageId", storageId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOMStorage::domStorageItemRemoved(PassRefPtr<TypeBuilder::DOMStorage::StorageId> storageId, const String& key)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOMStorage.domStorageItemRemoved");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("storageId", storageId);
    paramsObject->setString("key", key);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOMStorage::domStorageItemAdded(PassRefPtr<TypeBuilder::DOMStorage::StorageId> storageId, const String& key, const String& newValue)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOMStorage.domStorageItemAdded");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("storageId", storageId);
    paramsObject->setString("key", key);
    paramsObject->setString("newValue", newValue);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOMStorage::domStorageItemUpdated(PassRefPtr<TypeBuilder::DOMStorage::StorageId> storageId, const String& key, const String& oldValue, const String& newValue)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOMStorage.domStorageItemUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("storageId", storageId);
    paramsObject->setString("key", key);
    paramsObject->setString("oldValue", oldValue);
    paramsObject->setString("newValue", newValue);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::ApplicationCache::applicationCacheStatusUpdated(const TypeBuilder::Page::FrameId& frameId, const String& manifestURL, int status)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "ApplicationCache.applicationCacheStatusUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("frameId", frameId);
    paramsObject->setString("manifestURL", manifestURL);
    paramsObject->setNumber("status", status);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::ApplicationCache::networkStateUpdated(bool isNowOnline)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "ApplicationCache.networkStateUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setBoolean("isNowOnline", isNowOnline);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::documentUpdated()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.documentUpdated");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::inspectNodeRequested(int backendNodeId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.inspectNodeRequested");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("backendNodeId", backendNodeId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::setChildNodes(int parentId, PassRefPtr<TypeBuilder::Array<TypeBuilder::DOM::Node> > nodes)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.setChildNodes");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("parentId", parentId);
    paramsObject->setValue("nodes", nodes);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::attributeModified(int nodeId, const String& name, const String& value)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.attributeModified");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("nodeId", nodeId);
    paramsObject->setString("name", name);
    paramsObject->setString("value", value);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::attributeRemoved(int nodeId, const String& name)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.attributeRemoved");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("nodeId", nodeId);
    paramsObject->setString("name", name);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::inlineStyleInvalidated(PassRefPtr<TypeBuilder::Array<int> > nodeIds)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.inlineStyleInvalidated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("nodeIds", nodeIds);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::characterDataModified(int nodeId, const String& characterData)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.characterDataModified");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("nodeId", nodeId);
    paramsObject->setString("characterData", characterData);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::childNodeCountUpdated(int nodeId, int childNodeCount)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.childNodeCountUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("nodeId", nodeId);
    paramsObject->setNumber("childNodeCount", childNodeCount);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::childNodeInserted(int parentNodeId, int previousNodeId, PassRefPtr<TypeBuilder::DOM::Node> node)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.childNodeInserted");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("parentNodeId", parentNodeId);
    paramsObject->setNumber("previousNodeId", previousNodeId);
    paramsObject->setValue("node", node);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::childNodeRemoved(int parentNodeId, int nodeId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.childNodeRemoved");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("parentNodeId", parentNodeId);
    paramsObject->setNumber("nodeId", nodeId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::shadowRootPushed(int hostId, PassRefPtr<TypeBuilder::DOM::Node> root)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.shadowRootPushed");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("hostId", hostId);
    paramsObject->setValue("root", root);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::shadowRootPopped(int hostId, int rootId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.shadowRootPopped");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("hostId", hostId);
    paramsObject->setNumber("rootId", rootId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::pseudoElementAdded(int parentId, PassRefPtr<TypeBuilder::DOM::Node> pseudoElement)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.pseudoElementAdded");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("parentId", parentId);
    paramsObject->setValue("pseudoElement", pseudoElement);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::pseudoElementRemoved(int parentId, int pseudoElementId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.pseudoElementRemoved");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("parentId", parentId);
    paramsObject->setNumber("pseudoElementId", pseudoElementId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::DOM::distributedNodesUpdated(int insertionPointId, PassRefPtr<TypeBuilder::Array<TypeBuilder::DOM::BackendNode> > distributedNodes)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "DOM.distributedNodesUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("insertionPointId", insertionPointId);
    paramsObject->setValue("distributedNodes", distributedNodes);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::CSS::mediaQueryResultChanged()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "CSS.mediaQueryResultChanged");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::CSS::styleSheetChanged(const TypeBuilder::CSS::StyleSheetId& styleSheetId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "CSS.styleSheetChanged");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("styleSheetId", styleSheetId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::CSS::styleSheetAdded(PassRefPtr<TypeBuilder::CSS::CSSStyleSheetHeader> header)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "CSS.styleSheetAdded");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("header", header);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::CSS::styleSheetRemoved(const TypeBuilder::CSS::StyleSheetId& styleSheetId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "CSS.styleSheetRemoved");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("styleSheetId", styleSheetId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Timeline::eventRecorded(PassRefPtr<TypeBuilder::Timeline::TimelineEvent> record)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Timeline.eventRecorded");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("record", record);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::globalObjectCleared()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.globalObjectCleared");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::scriptParsed(const TypeBuilder::Debugger::ScriptId& scriptId, const String& url, int startLine, int startColumn, int endLine, int endColumn, const bool* const isContentScript, const bool* const isInternalScript, const String* const sourceMapURL, const bool* const hasSourceURL)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.scriptParsed");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("scriptId", scriptId);
    paramsObject->setString("url", url);
    paramsObject->setNumber("startLine", startLine);
    paramsObject->setNumber("startColumn", startColumn);
    paramsObject->setNumber("endLine", endLine);
    paramsObject->setNumber("endColumn", endColumn);
    if (isContentScript)
        paramsObject->setBoolean("isContentScript", *isContentScript);
    if (isInternalScript)
        paramsObject->setBoolean("isInternalScript", *isInternalScript);
    if (sourceMapURL)
        paramsObject->setString("sourceMapURL", *sourceMapURL);
    if (hasSourceURL)
        paramsObject->setBoolean("hasSourceURL", *hasSourceURL);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::scriptFailedToParse(const TypeBuilder::Debugger::ScriptId& scriptId, const String& url, int startLine, int startColumn, int endLine, int endColumn, const bool* const isContentScript, const bool* const isInternalScript, const String* const sourceMapURL, const bool* const hasSourceURL)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.scriptFailedToParse");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("scriptId", scriptId);
    paramsObject->setString("url", url);
    paramsObject->setNumber("startLine", startLine);
    paramsObject->setNumber("startColumn", startColumn);
    paramsObject->setNumber("endLine", endLine);
    paramsObject->setNumber("endColumn", endColumn);
    if (isContentScript)
        paramsObject->setBoolean("isContentScript", *isContentScript);
    if (isInternalScript)
        paramsObject->setBoolean("isInternalScript", *isInternalScript);
    if (sourceMapURL)
        paramsObject->setString("sourceMapURL", *sourceMapURL);
    if (hasSourceURL)
        paramsObject->setBoolean("hasSourceURL", *hasSourceURL);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::breakpointResolved(const TypeBuilder::Debugger::BreakpointId& breakpointId, PassRefPtr<TypeBuilder::Debugger::Location> location)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.breakpointResolved");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("breakpointId", breakpointId);
    paramsObject->setValue("location", location);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::paused(PassRefPtr<TypeBuilder::Array<TypeBuilder::Debugger::CallFrame> > callFrames, Reason::Enum reason, PassRefPtr<JSONObject> data, PassRefPtr<TypeBuilder::Array<String> > hitBreakpoints, PassRefPtr<TypeBuilder::Debugger::StackTrace> asyncStackTrace)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.paused");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("callFrames", callFrames);
    paramsObject->setString("reason", TypeBuilder::getEnumConstantValue(reason));
    if (data)
        paramsObject->setValue("data", data);
    if (hitBreakpoints)
        paramsObject->setValue("hitBreakpoints", hitBreakpoints);
    if (asyncStackTrace)
        paramsObject->setValue("asyncStackTrace", asyncStackTrace);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::resumed()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.resumed");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::promiseUpdated(EventType::Enum eventType, PassRefPtr<TypeBuilder::Debugger::PromiseDetails> promise)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.promiseUpdated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("eventType", TypeBuilder::getEnumConstantValue(eventType));
    paramsObject->setValue("promise", promise);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::asyncOperationStarted(PassRefPtr<TypeBuilder::Debugger::AsyncOperation> operation)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.asyncOperationStarted");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("operation", operation);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Debugger::asyncOperationCompleted(int id)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Debugger.asyncOperationCompleted");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("id", id);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Profiler::consoleProfileStarted(const String& id, PassRefPtr<TypeBuilder::Debugger::Location> location, const String* const title)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Profiler.consoleProfileStarted");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("id", id);
    paramsObject->setValue("location", location);
    if (title)
        paramsObject->setString("title", *title);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Profiler::consoleProfileFinished(const String& id, PassRefPtr<TypeBuilder::Debugger::Location> location, PassRefPtr<TypeBuilder::Profiler::CPUProfile> profile, const String* const title)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Profiler.consoleProfileFinished");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("id", id);
    paramsObject->setValue("location", location);
    paramsObject->setValue("profile", profile);
    if (title)
        paramsObject->setString("title", *title);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::HeapProfiler::addHeapSnapshotChunk(const String& chunk)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "HeapProfiler.addHeapSnapshotChunk");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("chunk", chunk);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::HeapProfiler::resetProfiles()
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "HeapProfiler.resetProfiles");
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::HeapProfiler::reportHeapSnapshotProgress(int done, int total, const bool* const finished)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "HeapProfiler.reportHeapSnapshotProgress");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("done", done);
    paramsObject->setNumber("total", total);
    if (finished)
        paramsObject->setBoolean("finished", *finished);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::HeapProfiler::lastSeenObjectId(int lastSeenObjectId, double timestamp)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "HeapProfiler.lastSeenObjectId");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setNumber("lastSeenObjectId", lastSeenObjectId);
    paramsObject->setNumber("timestamp", timestamp);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::HeapProfiler::heapStatsUpdate(PassRefPtr<TypeBuilder::Array<int> > statsUpdate)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "HeapProfiler.heapStatsUpdate");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("statsUpdate", statsUpdate);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Worker::workerCreated(const String& workerId, const String& url, bool inspectorConnected)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Worker.workerCreated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("workerId", workerId);
    paramsObject->setString("url", url);
    paramsObject->setBoolean("inspectorConnected", inspectorConnected);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Worker::workerTerminated(const String& workerId)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Worker.workerTerminated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("workerId", workerId);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Worker::dispatchMessageFromWorker(const String& workerId, const String& message)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Worker.dispatchMessageFromWorker");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("workerId", workerId);
    paramsObject->setString("message", message);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::LayerTree::layerTreeDidChange(PassRefPtr<TypeBuilder::Array<TypeBuilder::LayerTree::Layer> > layers)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "LayerTree.layerTreeDidChange");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    if (layers)
        paramsObject->setValue("layers", layers);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::LayerTree::layerPainted(const TypeBuilder::LayerTree::LayerId& layerId, PassRefPtr<TypeBuilder::DOM::Rect> clip)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "LayerTree.layerPainted");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("layerId", layerId);
    paramsObject->setValue("clip", clip);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Animation::animationCreated(PassRefPtr<TypeBuilder::Animation::Animation> player, bool resetTimeline)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Animation.animationCreated");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setValue("player", player);
    paramsObject->setBoolean("resetTimeline", resetTimeline);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}

void InspectorFrontend::Animation::animationCanceled(const String& id)
{
    RefPtr<JSONObject> jsonMessage = JSONObject::create();
    jsonMessage->setString("method", "Animation.animationCanceled");
    RefPtr<JSONObject> paramsObject = JSONObject::create();
    paramsObject->setString("id", id);
    jsonMessage->setObject("params", paramsObject);
    if (m_inspectorFrontendChannel)
        m_inspectorFrontendChannel->sendProtocolNotification(jsonMessage.release());
}


} // namespace blink

