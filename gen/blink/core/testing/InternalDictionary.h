// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef InternalDictionary_h
#define InternalDictionary_h

#include "bindings/core/v8/Nullable.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/UnionTypesCore.h"
#include "core/dom/Element.h"
#include "core/events/EventTarget.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class InternalDictionary {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    InternalDictionary();

    bool hasBooleanMember() const { return !m_booleanMember.isNull(); }
    bool booleanMember() const { return m_booleanMember.get(); }
    void setBooleanMember(bool value) { m_booleanMember = value; }

    bool hasByteStringMember() const { return !m_byteStringMember.isNull(); }
    String byteStringMember() const { return m_byteStringMember; }
    void setByteStringMember(String value) { m_byteStringMember = value; }

    bool hasDoubleMember() const { return !m_doubleMember.isNull(); }
    double doubleMember() const { return m_doubleMember.get(); }
    void setDoubleMember(double value) { m_doubleMember = value; }

    bool hasDoubleOrStringMember() const { return !m_doubleOrStringMember.isNull(); }
    const DoubleOrString& doubleOrStringMember() const { return m_doubleOrStringMember; }
    void setDoubleOrStringMember(const DoubleOrString& value) { m_doubleOrStringMember = value; }

    bool hasDoubleOrStringSequenceMember() const { return !m_doubleOrStringSequenceMember.isNull(); }
    const HeapVector<DoubleOrString>& doubleOrStringSequenceMember() const { return m_doubleOrStringSequenceMember.get(); }
    void setDoubleOrStringSequenceMember(const HeapVector<DoubleOrString>& value) { m_doubleOrStringSequenceMember = value; }

    bool hasElementMember() const { return m_elementMember; }
    PassRefPtrWillBeRawPtr<Element> elementMember() const { return m_elementMember; }
    void setElementMember(PassRefPtrWillBeRawPtr<Element> value) { m_elementMember = value; }

    bool hasElementOrNullMember() const { return m_elementOrNullMember; }
    PassRefPtrWillBeRawPtr<Element> elementOrNullMember() const { return m_elementOrNullMember; }
    void setElementOrNullMember(PassRefPtrWillBeRawPtr<Element> value) { m_elementOrNullMember = value; }
    void setElementOrNullMemberToNull() { m_elementOrNullMember = RefPtrWillBeMember<Element>(); }

    bool hasEnumArrayMember() const { return !m_enumArrayMember.isNull(); }
    const Vector<String>& enumArrayMember() const { return m_enumArrayMember.get(); }
    void setEnumArrayMember(const Vector<String>& value) { m_enumArrayMember = value; }

    bool hasEnumMember() const { return !m_enumMember.isNull(); }
    String enumMember() const { return m_enumMember; }
    void setEnumMember(String value) { m_enumMember = value; }

    bool hasEnumMemberWithDefault() const { return !m_enumMemberWithDefault.isNull(); }
    String enumMemberWithDefault() const { return m_enumMemberWithDefault; }
    void setEnumMemberWithDefault(String value) { m_enumMemberWithDefault = value; }

    bool hasEnumOrNullMember() const { return !m_enumOrNullMember.isNull(); }
    String enumOrNullMember() const { return m_enumOrNullMember; }
    void setEnumOrNullMember(String value) { m_enumOrNullMember = value; }
    void setEnumOrNullMemberToNull() { m_enumOrNullMember = String(); }

    bool hasEventTargetOrNullMember() const { return m_eventTargetOrNullMember; }
    PassRefPtrWillBeRawPtr<EventTarget> eventTargetOrNullMember() const { return m_eventTargetOrNullMember; }
    void setEventTargetOrNullMember(PassRefPtrWillBeRawPtr<EventTarget> value) { m_eventTargetOrNullMember = value; }
    void setEventTargetOrNullMemberToNull() { m_eventTargetOrNullMember = RefPtrWillBeMember<EventTarget>(); }

    bool hasLongMember() const { return !m_longMember.isNull(); }
    int longMember() const { return m_longMember.get(); }
    void setLongMember(int value) { m_longMember = value; }

    bool hasLongMemberWithClamp() const { return !m_longMemberWithClamp.isNull(); }
    int longMemberWithClamp() const { return m_longMemberWithClamp.get(); }
    void setLongMemberWithClamp(int value) { m_longMemberWithClamp = value; }

    bool hasLongMemberWithDefault() const { return !m_longMemberWithDefault.isNull(); }
    int longMemberWithDefault() const { return m_longMemberWithDefault.get(); }
    void setLongMemberWithDefault(int value) { m_longMemberWithDefault = value; }

    bool hasLongMemberWithEnforceRange() const { return !m_longMemberWithEnforceRange.isNull(); }
    int longMemberWithEnforceRange() const { return m_longMemberWithEnforceRange.get(); }
    void setLongMemberWithEnforceRange(int value) { m_longMemberWithEnforceRange = value; }

    bool hasLongOrNullMember() const { return !m_longOrNullMember.isNull(); }
    int longOrNullMember() const { return m_longOrNullMember.get(); }
    void setLongOrNullMember(int value) { m_longOrNullMember = value; }
    void setLongOrNullMemberToNull() { m_longOrNullMember = Nullable<int>(); }

    bool hasLongOrNullMemberWithDefault() const { return !m_longOrNullMemberWithDefault.isNull(); }
    int longOrNullMemberWithDefault() const { return m_longOrNullMemberWithDefault.get(); }
    void setLongOrNullMemberWithDefault(int value) { m_longOrNullMemberWithDefault = value; }
    void setLongOrNullMemberWithDefaultToNull() { m_longOrNullMemberWithDefault = Nullable<int>(); }

    bool hasObjectMember() const { return !(m_objectMember.isEmpty() || m_objectMember.isNull() || m_objectMember.isUndefined()); }
    ScriptValue objectMember() const { return m_objectMember; }
    void setObjectMember(ScriptValue value) { m_objectMember = value; }

    bool hasObjectOrNullMemberWithDefault() const { return !(m_objectOrNullMemberWithDefault.isEmpty() || m_objectOrNullMemberWithDefault.isNull() || m_objectOrNullMemberWithDefault.isUndefined()); }
    ScriptValue objectOrNullMemberWithDefault() const { return m_objectOrNullMemberWithDefault; }
    void setObjectOrNullMemberWithDefault(ScriptValue value) { m_objectOrNullMemberWithDefault = value; }
    void setObjectOrNullMemberWithDefaultToNull() { m_objectOrNullMemberWithDefault = ScriptValue(); }

    bool hasStringMember() const { return !m_stringMember.isNull(); }
    String stringMember() const { return m_stringMember; }
    void setStringMember(String value) { m_stringMember = value; }

    bool hasStringMemberWithDefault() const { return !m_stringMemberWithDefault.isNull(); }
    String stringMemberWithDefault() const { return m_stringMemberWithDefault; }
    void setStringMemberWithDefault(String value) { m_stringMemberWithDefault = value; }

    bool hasStringSequenceMember() const { return !m_stringSequenceMember.isNull(); }
    const Vector<String>& stringSequenceMember() const { return m_stringSequenceMember.get(); }
    void setStringSequenceMember(const Vector<String>& value) { m_stringSequenceMember = value; }

    bool hasStringSequenceMemberWithDefault() const { return !m_stringSequenceMemberWithDefault.isNull(); }
    const Vector<String>& stringSequenceMemberWithDefault() const { return m_stringSequenceMemberWithDefault.get(); }
    void setStringSequenceMemberWithDefault(const Vector<String>& value) { m_stringSequenceMemberWithDefault = value; }

    bool hasStringSequenceOrNullMember() const { return !m_stringSequenceOrNullMember.isNull(); }
    const Vector<String>& stringSequenceOrNullMember() const { return m_stringSequenceOrNullMember.get(); }
    void setStringSequenceOrNullMember(const Vector<String>& value) { m_stringSequenceOrNullMember = value; }
    void setStringSequenceOrNullMemberToNull() { m_stringSequenceOrNullMember = Nullable<Vector<String>>(); }

    bool hasUnrestrictedDoubleMember() const { return !m_unrestrictedDoubleMember.isNull(); }
    double unrestrictedDoubleMember() const { return m_unrestrictedDoubleMember.get(); }
    void setUnrestrictedDoubleMember(double value) { m_unrestrictedDoubleMember = value; }

    bool hasUsvStringMember() const { return !m_usvStringMember.isNull(); }
    String usvStringMember() const { return m_usvStringMember; }
    void setUsvStringMember(String value) { m_usvStringMember = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<bool> m_booleanMember;
    String m_byteStringMember;
    Nullable<double> m_doubleMember;
    DoubleOrString m_doubleOrStringMember;
    Nullable<HeapVector<DoubleOrString>> m_doubleOrStringSequenceMember;
    RefPtrWillBeMember<Element> m_elementMember;
    RefPtrWillBeMember<Element> m_elementOrNullMember;
    Nullable<Vector<String>> m_enumArrayMember;
    String m_enumMember;
    String m_enumMemberWithDefault;
    String m_enumOrNullMember;
    RefPtrWillBeMember<EventTarget> m_eventTargetOrNullMember;
    Nullable<int> m_longMember;
    Nullable<int> m_longMemberWithClamp;
    Nullable<int> m_longMemberWithDefault;
    Nullable<int> m_longMemberWithEnforceRange;
    Nullable<int> m_longOrNullMember;
    Nullable<int> m_longOrNullMemberWithDefault;
    ScriptValue m_objectMember;
    ScriptValue m_objectOrNullMemberWithDefault;
    String m_stringMember;
    String m_stringMemberWithDefault;
    Nullable<Vector<String>> m_stringSequenceMember;
    Nullable<Vector<String>> m_stringSequenceMemberWithDefault;
    Nullable<Vector<String>> m_stringSequenceOrNullMember;
    Nullable<double> m_unrestrictedDoubleMember;
    String m_usvStringMember;

    friend class V8InternalDictionary;
};

} // namespace blink

#endif // InternalDictionary_h
