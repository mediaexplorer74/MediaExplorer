// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef MutationObserverInit_h
#define MutationObserverInit_h

#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT MutationObserverInit {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    MutationObserverInit();

    bool hasAttributeFilter() const { return !m_attributeFilter.isNull(); }
    const Vector<String>& attributeFilter() const { return m_attributeFilter.get(); }
    void setAttributeFilter(const Vector<String>& value) { m_attributeFilter = value; }

    bool hasAttributeOldValue() const { return !m_attributeOldValue.isNull(); }
    bool attributeOldValue() const { return m_attributeOldValue.get(); }
    void setAttributeOldValue(bool value) { m_attributeOldValue = value; }

    bool hasAttributes() const { return !m_attributes.isNull(); }
    bool attributes() const { return m_attributes.get(); }
    void setAttributes(bool value) { m_attributes = value; }

    bool hasCharacterData() const { return !m_characterData.isNull(); }
    bool characterData() const { return m_characterData.get(); }
    void setCharacterData(bool value) { m_characterData = value; }

    bool hasCharacterDataOldValue() const { return !m_characterDataOldValue.isNull(); }
    bool characterDataOldValue() const { return m_characterDataOldValue.get(); }
    void setCharacterDataOldValue(bool value) { m_characterDataOldValue = value; }

    bool hasChildList() const { return !m_childList.isNull(); }
    bool childList() const { return m_childList.get(); }
    void setChildList(bool value) { m_childList = value; }

    bool hasSubtree() const { return !m_subtree.isNull(); }
    bool subtree() const { return m_subtree.get(); }
    void setSubtree(bool value) { m_subtree = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<Vector<String>> m_attributeFilter;
    Nullable<bool> m_attributeOldValue;
    Nullable<bool> m_attributes;
    Nullable<bool> m_characterData;
    Nullable<bool> m_characterDataOldValue;
    Nullable<bool> m_childList;
    Nullable<bool> m_subtree;

    friend class V8MutationObserverInit;
};

} // namespace blink

#endif // MutationObserverInit_h
