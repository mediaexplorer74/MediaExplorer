// File is generated by Source/core/inspector/CodeGeneratorInspector.py

// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
#ifndef InspectorBackendDispatcher_h
#define InspectorBackendDispatcher_h

#include "InspectorTypeBuilder.h"

#include "core/CoreExport.h"
#include "platform/heap/Handle.h"
#include "wtf/PassRefPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/text/WTFString.h"

namespace blink {

class JSONObject;
class JSONArray;
class InspectorFrontendChannel;

typedef String ErrorString;

class InspectorBackendDispatcherImpl;

class CORE_EXPORT InspectorBackendDispatcher: public RefCountedWillBeGarbageCollectedFinalized<InspectorBackendDispatcher> {
public:
    static PassRefPtrWillBeRawPtr<InspectorBackendDispatcher> create(InspectorFrontendChannel* inspectorFrontendChannel);
    virtual ~InspectorBackendDispatcher() { }
    DEFINE_INLINE_VIRTUAL_TRACE() { }

    class CORE_EXPORT CallbackBase: public RefCountedWillBeGarbageCollectedFinalized<CallbackBase> {
    public:
        CallbackBase(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl> backendImpl, int id);
        virtual ~CallbackBase();
        DECLARE_VIRTUAL_TRACE();
        void sendFailure(const ErrorString&);
        bool isActive();

    protected:
        void sendIfActive(PassRefPtr<JSONObject> partialMessage, const ErrorString& invocationError, PassRefPtr<JSONValue> errorData);

    private:
        void disable() { m_alreadySent = true; }

        RefPtrWillBeMember<InspectorBackendDispatcherImpl> m_backendImpl;
        int m_id;
        bool m_alreadySent;

        friend class InspectorBackendDispatcherImpl;
    };

    class CORE_EXPORT InspectorCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;

    protected:
        virtual ~InspectorCommandHandler() { }
    };

    class CORE_EXPORT MemoryCommandHandler {
    public:
        virtual void getDOMCounters(ErrorString*, int* out_documents, int* out_nodes, int* out_jsEventListeners) = 0;

    protected:
        virtual ~MemoryCommandHandler() { }
    };

    class CORE_EXPORT PageCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void addScriptToEvaluateOnLoad(ErrorString*, const String& in_scriptSource, TypeBuilder::Page::ScriptIdentifier* out_identifier) = 0;
        virtual void removeScriptToEvaluateOnLoad(ErrorString*, const String& in_identifier) = 0;
        virtual void reload(ErrorString*, const bool* in_ignoreCache, const String* in_scriptToEvaluateOnLoad) = 0;
        virtual void navigate(ErrorString*, const String& in_url, TypeBuilder::Page::FrameId* out_frameId) = 0;
        virtual void getResourceTree(ErrorString*, RefPtr<TypeBuilder::Page::FrameResourceTree>& out_frameTree) = 0;
        class GetResourceContentCallback : public CallbackBase {
        public:
            GetResourceContentCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(const String& content, bool base64Encoded);
        };
        virtual void getResourceContent(ErrorString*, const String& in_frameId, const String& in_url, PassRefPtrWillBeRawPtr<GetResourceContentCallback> callback) = 0;
        virtual void searchInResource(ErrorString*, const String& in_frameId, const String& in_url, const String& in_query, const bool* in_caseSensitive, const bool* in_isRegex, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::SearchMatch> >& out_result) = 0;
        virtual void setDocumentContent(ErrorString*, const String& in_frameId, const String& in_html) = 0;
        virtual void startScreencast(ErrorString*, const String* in_format, const int* in_quality, const int* in_maxWidth, const int* in_maxHeight) = 0;
        virtual void stopScreencast(ErrorString*) = 0;
        virtual void setShowViewportSizeOnResize(ErrorString*, bool in_show, const bool* in_showGrid) = 0;
        virtual void setOverlayMessage(ErrorString*, const String* in_message) = 0;

    protected:
        virtual ~PageCommandHandler() { }
    };

    class CORE_EXPORT RenderingCommandHandler {
    public:
        virtual void setShowPaintRects(ErrorString*, bool in_result) = 0;
        virtual void setShowDebugBorders(ErrorString*, bool in_show) = 0;
        virtual void setShowFPSCounter(ErrorString*, bool in_show) = 0;
        virtual void setContinuousPaintingEnabled(ErrorString*, bool in_enabled) = 0;
        virtual void setShowScrollBottleneckRects(ErrorString*, bool in_show) = 0;

    protected:
        virtual ~RenderingCommandHandler() { }
    };

    class CORE_EXPORT EmulationCommandHandler {
    public:
        virtual void resetScrollAndPageScaleFactor(ErrorString*) = 0;
        virtual void setPageScaleFactor(ErrorString*, double in_pageScaleFactor) = 0;
        virtual void setScriptExecutionDisabled(ErrorString*, bool in_value) = 0;
        virtual void setTouchEmulationEnabled(ErrorString*, bool in_enabled, const String* in_configuration) = 0;
        virtual void setEmulatedMedia(ErrorString*, const String& in_media) = 0;

    protected:
        virtual ~EmulationCommandHandler() { }
    };

    class CORE_EXPORT RuntimeCommandHandler {
    public:
        virtual void evaluate(ErrorString*, const String& in_expression, const String* in_objectGroup, const bool* in_includeCommandLineAPI, const bool* in_doNotPauseOnExceptionsAndMuteConsole, const int* in_contextId, const bool* in_returnByValue, const bool* in_generatePreview, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_result, TypeBuilder::OptOutput<bool>* opt_out_wasThrown, RefPtr<TypeBuilder::Debugger::ExceptionDetails>& opt_out_exceptionDetails) = 0;
        virtual void callFunctionOn(ErrorString*, const String& in_objectId, const String& in_functionDeclaration, const RefPtr<JSONArray>* in_arguments, const bool* in_doNotPauseOnExceptionsAndMuteConsole, const bool* in_returnByValue, const bool* in_generatePreview, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_result, TypeBuilder::OptOutput<bool>* opt_out_wasThrown) = 0;
        virtual void getProperties(ErrorString*, const String& in_objectId, const bool* in_ownProperties, const bool* in_accessorPropertiesOnly, const bool* in_generatePreview, RefPtr<TypeBuilder::Array<TypeBuilder::Runtime::PropertyDescriptor> >& out_result, RefPtr<TypeBuilder::Array<TypeBuilder::Runtime::InternalPropertyDescriptor> >& opt_out_internalProperties, RefPtr<TypeBuilder::Debugger::ExceptionDetails>& opt_out_exceptionDetails) = 0;
        virtual void releaseObject(ErrorString*, const String& in_objectId) = 0;
        virtual void releaseObjectGroup(ErrorString*, const String& in_objectGroup) = 0;
        virtual void run(ErrorString*) = 0;
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void isRunRequired(ErrorString*, bool* out_result) = 0;
        virtual void setCustomObjectFormatterEnabled(ErrorString*, bool in_enabled) = 0;

    protected:
        virtual ~RuntimeCommandHandler() { }
    };

    class CORE_EXPORT ConsoleCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void clearMessages(ErrorString*) = 0;

    protected:
        virtual ~ConsoleCommandHandler() { }
    };

    class CORE_EXPORT NetworkCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void setUserAgentOverride(ErrorString*, const String& in_userAgent) = 0;
        virtual void setExtraHTTPHeaders(ErrorString*, const RefPtr<JSONObject>& in_headers) = 0;
        class GetResponseBodyCallback : public CallbackBase {
        public:
            GetResponseBodyCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(const String& body, bool base64Encoded);
        };
        virtual void getResponseBody(ErrorString*, const String& in_requestId, PassRefPtrWillBeRawPtr<GetResponseBodyCallback> callback) = 0;
        virtual void replayXHR(ErrorString*, const String& in_requestId) = 0;
        virtual void setMonitoringXHREnabled(ErrorString*, bool in_enabled) = 0;
        virtual void canClearBrowserCache(ErrorString*, bool* out_result) = 0;
        virtual void canClearBrowserCookies(ErrorString*, bool* out_result) = 0;
        virtual void emulateNetworkConditions(ErrorString*, bool in_offline, double in_latency, double in_downloadThroughput, double in_uploadThroughput) = 0;
        virtual void setCacheDisabled(ErrorString*, bool in_cacheDisabled) = 0;
        virtual void setDataSizeLimitsForTest(ErrorString*, int in_maxTotalSize, int in_maxResourceSize) = 0;

    protected:
        virtual ~NetworkCommandHandler() { }
    };

    class CORE_EXPORT DatabaseCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void getDatabaseTableNames(ErrorString*, const String& in_databaseId, RefPtr<TypeBuilder::Array<String> >& out_tableNames) = 0;
        class ExecuteSQLCallback : public CallbackBase {
        public:
            ExecuteSQLCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(PassRefPtr<TypeBuilder::Array<String> > columnNames, PassRefPtr<TypeBuilder::Array<JSONValue> > values, PassRefPtr<TypeBuilder::Database::Error> sqlError);
        };
        virtual void executeSQL(ErrorString*, const String& in_databaseId, const String& in_query, PassRefPtrWillBeRawPtr<ExecuteSQLCallback> callback) = 0;

    protected:
        virtual ~DatabaseCommandHandler() { }
    };

    class CORE_EXPORT IndexedDBCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        class RequestDatabaseNamesCallback : public CallbackBase {
        public:
            RequestDatabaseNamesCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(PassRefPtr<TypeBuilder::Array<String> > databaseNames);
        };
        virtual void requestDatabaseNames(ErrorString*, const String& in_securityOrigin, PassRefPtrWillBeRawPtr<RequestDatabaseNamesCallback> callback) = 0;
        class RequestDatabaseCallback : public CallbackBase {
        public:
            RequestDatabaseCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(PassRefPtr<TypeBuilder::IndexedDB::DatabaseWithObjectStores> databaseWithObjectStores);
        };
        virtual void requestDatabase(ErrorString*, const String& in_securityOrigin, const String& in_databaseName, PassRefPtrWillBeRawPtr<RequestDatabaseCallback> callback) = 0;
        class RequestDataCallback : public CallbackBase {
        public:
            RequestDataCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(PassRefPtr<TypeBuilder::Array<TypeBuilder::IndexedDB::DataEntry> > objectStoreDataEntries, bool hasMore);
        };
        virtual void requestData(ErrorString*, const String& in_securityOrigin, const String& in_databaseName, const String& in_objectStoreName, const String& in_indexName, int in_skipCount, int in_pageSize, const RefPtr<JSONObject>* in_keyRange, PassRefPtrWillBeRawPtr<RequestDataCallback> callback) = 0;
        class ClearObjectStoreCallback : public CallbackBase {
        public:
            ClearObjectStoreCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess();
        };
        virtual void clearObjectStore(ErrorString*, const String& in_securityOrigin, const String& in_databaseName, const String& in_objectStoreName, PassRefPtrWillBeRawPtr<ClearObjectStoreCallback> callback) = 0;

    protected:
        virtual ~IndexedDBCommandHandler() { }
    };

    class CORE_EXPORT CacheStorageCommandHandler {
    public:
        class RequestCacheNamesCallback : public CallbackBase {
        public:
            RequestCacheNamesCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(PassRefPtr<TypeBuilder::Array<TypeBuilder::CacheStorage::Cache> > caches);
        };
        virtual void requestCacheNames(ErrorString*, const String& in_securityOrigin, PassRefPtrWillBeRawPtr<RequestCacheNamesCallback> callback) = 0;
        class RequestEntriesCallback : public CallbackBase {
        public:
            RequestEntriesCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(PassRefPtr<TypeBuilder::Array<TypeBuilder::CacheStorage::DataEntry> > cacheDataEntries, bool hasMore);
        };
        virtual void requestEntries(ErrorString*, const String& in_cacheId, int in_skipCount, int in_pageSize, PassRefPtrWillBeRawPtr<RequestEntriesCallback> callback) = 0;
        class DeleteCacheCallback : public CallbackBase {
        public:
            DeleteCacheCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess();
        };
        virtual void deleteCache(ErrorString*, const String& in_cacheId, PassRefPtrWillBeRawPtr<DeleteCacheCallback> callback) = 0;
        class DeleteEntryCallback : public CallbackBase {
        public:
            DeleteEntryCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess();
        };
        virtual void deleteEntry(ErrorString*, const String& in_cacheId, const String& in_request, PassRefPtrWillBeRawPtr<DeleteEntryCallback> callback) = 0;

    protected:
        virtual ~CacheStorageCommandHandler() { }
    };

    class CORE_EXPORT DOMStorageCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void getDOMStorageItems(ErrorString*, const RefPtr<JSONObject>& in_storageId, RefPtr<TypeBuilder::Array<TypeBuilder::Array<String> > >& out_entries) = 0;
        virtual void setDOMStorageItem(ErrorString*, const RefPtr<JSONObject>& in_storageId, const String& in_key, const String& in_value) = 0;
        virtual void removeDOMStorageItem(ErrorString*, const RefPtr<JSONObject>& in_storageId, const String& in_key) = 0;

    protected:
        virtual ~DOMStorageCommandHandler() { }
    };

    class CORE_EXPORT ApplicationCacheCommandHandler {
    public:
        virtual void getFramesWithManifests(ErrorString*, RefPtr<TypeBuilder::Array<TypeBuilder::ApplicationCache::FrameWithManifest> >& out_frameIds) = 0;
        virtual void enable(ErrorString*) = 0;
        virtual void getManifestForFrame(ErrorString*, const String& in_frameId, String* out_manifestURL) = 0;
        virtual void getApplicationCacheForFrame(ErrorString*, const String& in_frameId, RefPtr<TypeBuilder::ApplicationCache::ApplicationCache>& out_applicationCache) = 0;

    protected:
        virtual ~ApplicationCacheCommandHandler() { }
    };

    class CORE_EXPORT FileSystemCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        class RequestFileSystemRootCallback : public CallbackBase {
        public:
            RequestFileSystemRootCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(int errorCode, PassRefPtr<TypeBuilder::FileSystem::Entry> root);
        };
        virtual void requestFileSystemRoot(ErrorString*, const String& in_origin, const String& in_type, PassRefPtrWillBeRawPtr<RequestFileSystemRootCallback> callback) = 0;
        class RequestDirectoryContentCallback : public CallbackBase {
        public:
            RequestDirectoryContentCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(int errorCode, PassRefPtr<TypeBuilder::Array<TypeBuilder::FileSystem::Entry> > entries);
        };
        virtual void requestDirectoryContent(ErrorString*, const String& in_url, PassRefPtrWillBeRawPtr<RequestDirectoryContentCallback> callback) = 0;
        class RequestMetadataCallback : public CallbackBase {
        public:
            RequestMetadataCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(int errorCode, PassRefPtr<TypeBuilder::FileSystem::Metadata> metadata);
        };
        virtual void requestMetadata(ErrorString*, const String& in_url, PassRefPtrWillBeRawPtr<RequestMetadataCallback> callback) = 0;
        class RequestFileContentCallback : public CallbackBase {
        public:
            RequestFileContentCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(int errorCode, const String* const content, const String* const charset);
        };
        virtual void requestFileContent(ErrorString*, const String& in_url, bool in_readAsText, const int* in_start, const int* in_end, const String* in_charset, PassRefPtrWillBeRawPtr<RequestFileContentCallback> callback) = 0;
        class DeleteEntryCallback : public CallbackBase {
        public:
            DeleteEntryCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess(int errorCode);
        };
        virtual void deleteEntry(ErrorString*, const String& in_url, PassRefPtrWillBeRawPtr<DeleteEntryCallback> callback) = 0;

    protected:
        virtual ~FileSystemCommandHandler() { }
    };

    class CORE_EXPORT DOMCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void getDocument(ErrorString*, RefPtr<TypeBuilder::DOM::Node>& out_root) = 0;
        virtual void requestChildNodes(ErrorString*, int in_nodeId, const int* in_depth) = 0;
        virtual void querySelector(ErrorString*, int in_nodeId, const String& in_selector, int* out_nodeId) = 0;
        virtual void querySelectorAll(ErrorString*, int in_nodeId, const String& in_selector, RefPtr<TypeBuilder::Array<int> >& out_nodeIds) = 0;
        virtual void setNodeName(ErrorString*, int in_nodeId, const String& in_name, int* out_nodeId) = 0;
        virtual void setNodeValue(ErrorString*, int in_nodeId, const String& in_value) = 0;
        virtual void removeNode(ErrorString*, int in_nodeId) = 0;
        virtual void setAttributeValue(ErrorString*, int in_nodeId, const String& in_name, const String& in_value) = 0;
        virtual void setAttributesAsText(ErrorString*, int in_nodeId, const String& in_text, const String* in_name) = 0;
        virtual void removeAttribute(ErrorString*, int in_nodeId, const String& in_name) = 0;
        virtual void getOuterHTML(ErrorString*, int in_nodeId, String* out_outerHTML) = 0;
        virtual void setOuterHTML(ErrorString*, int in_nodeId, const String& in_outerHTML) = 0;
        virtual void performSearch(ErrorString*, const String& in_query, const bool* in_includeUserAgentShadowDOM, String* out_searchId, int* out_resultCount) = 0;
        virtual void getSearchResults(ErrorString*, const String& in_searchId, int in_fromIndex, int in_toIndex, RefPtr<TypeBuilder::Array<int> >& out_nodeIds) = 0;
        virtual void discardSearchResults(ErrorString*, const String& in_searchId) = 0;
        virtual void requestNode(ErrorString*, const String& in_objectId, int* out_nodeId) = 0;
        virtual void setInspectModeEnabled(ErrorString*, bool in_enabled, const bool* in_inspectUAShadowDOM, const RefPtr<JSONObject>* in_highlightConfig) = 0;
        virtual void highlightRect(ErrorString*, int in_x, int in_y, int in_width, int in_height, const RefPtr<JSONObject>* in_color, const RefPtr<JSONObject>* in_outlineColor) = 0;
        virtual void highlightQuad(ErrorString*, const RefPtr<JSONArray>& in_quad, const RefPtr<JSONObject>* in_color, const RefPtr<JSONObject>* in_outlineColor) = 0;
        virtual void highlightNode(ErrorString*, const RefPtr<JSONObject>& in_highlightConfig, const int* in_nodeId, const int* in_backendNodeId, const String* in_objectId) = 0;
        virtual void hideHighlight(ErrorString*) = 0;
        virtual void highlightFrame(ErrorString*, const String& in_frameId, const RefPtr<JSONObject>* in_contentColor, const RefPtr<JSONObject>* in_contentOutlineColor) = 0;
        virtual void pushNodeByPathToFrontend(ErrorString*, const String& in_path, int* out_nodeId) = 0;
        virtual void pushNodesByBackendIdsToFrontend(ErrorString*, const RefPtr<JSONArray>& in_backendNodeIds, RefPtr<TypeBuilder::Array<int> >& out_nodeIds) = 0;
        virtual void setInspectedNode(ErrorString*, int in_nodeId) = 0;
        virtual void resolveNode(ErrorString*, int in_nodeId, const String* in_objectGroup, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_object) = 0;
        virtual void getAttributes(ErrorString*, int in_nodeId, RefPtr<TypeBuilder::Array<String> >& out_attributes) = 0;
        virtual void copyTo(ErrorString*, int in_nodeId, int in_targetNodeId, const int* in_insertBeforeNodeId, int* out_nodeId) = 0;
        virtual void moveTo(ErrorString*, int in_nodeId, int in_targetNodeId, const int* in_insertBeforeNodeId, int* out_nodeId) = 0;
        virtual void undo(ErrorString*) = 0;
        virtual void redo(ErrorString*) = 0;
        virtual void markUndoableState(ErrorString*) = 0;
        virtual void focus(ErrorString*, int in_nodeId) = 0;
        virtual void setFileInputFiles(ErrorString*, int in_nodeId, const RefPtr<JSONArray>& in_files) = 0;
        virtual void getBoxModel(ErrorString*, int in_nodeId, RefPtr<TypeBuilder::DOM::BoxModel>& out_model) = 0;
        virtual void getNodeForLocation(ErrorString*, int in_x, int in_y, int* out_nodeId) = 0;
        virtual void getRelayoutBoundary(ErrorString*, int in_nodeId, int* out_nodeId) = 0;
        virtual void getHighlightObjectForTest(ErrorString*, int in_nodeId, RefPtr<JSONObject>& out_highlight) = 0;

    protected:
        virtual ~DOMCommandHandler() { }
    };

    class CORE_EXPORT CSSCommandHandler {
    public:
        class EnableCallback : public CallbackBase {
        public:
            EnableCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess();
        };
        virtual void enable(ErrorString*, PassRefPtrWillBeRawPtr<EnableCallback> callback) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void getMatchedStylesForNode(ErrorString*, int in_nodeId, const bool* in_excludePseudo, const bool* in_excludeInherited, 
            RefPtr<TypeBuilder::CSS::CSSStyle>& opt_out_inlineStyle, RefPtr<TypeBuilder::CSS::CSSStyle>& opt_out_attributesStyle,
            RefPtr<TypeBuilder::Array<TypeBuilder::CSS::RuleMatch> >& opt_out_matchedCSSRules, RefPtr<TypeBuilder::Array<TypeBuilder::CSS::PseudoIdMatches> >& opt_out_pseudoElements, RefPtr<TypeBuilder::Array<TypeBuilder::CSS::InheritedStyleEntry> >& opt_out_inherited) = 0;
        virtual void getInlineStylesForNode(ErrorString*, int in_nodeId, RefPtr<TypeBuilder::CSS::CSSStyle>& opt_out_inlineStyle, RefPtr<TypeBuilder::CSS::CSSStyle>& opt_out_attributesStyle) = 0;
        virtual void getComputedStyleForNode(ErrorString*, int in_nodeId, RefPtr<TypeBuilder::Array<TypeBuilder::CSS::CSSComputedStyleProperty> >& out_computedStyle) = 0;
        virtual void getPlatformFontsForNode(ErrorString*, int in_nodeId, RefPtr<TypeBuilder::Array<TypeBuilder::CSS::PlatformFontUsage> >& out_fonts) = 0;
        virtual void getStyleSheetText(ErrorString*, const String& in_styleSheetId, String* out_text) = 0;
        virtual void setStyleSheetText(ErrorString*, const String& in_styleSheetId, const String& in_text) = 0;
        virtual void setRuleSelector(ErrorString*, const String& in_styleSheetId, const RefPtr<JSONObject>& in_range, const String& in_selector, RefPtr<TypeBuilder::CSS::CSSRule>& out_rule) = 0;
        virtual void setStyleText(ErrorString*, const String& in_styleSheetId, const RefPtr<JSONObject>& in_range, const String& in_text, RefPtr<TypeBuilder::CSS::CSSStyle>& out_style) = 0;
        virtual void setMediaText(ErrorString*, const String& in_styleSheetId, const RefPtr<JSONObject>& in_range, const String& in_text, RefPtr<TypeBuilder::CSS::CSSMedia>& out_media) = 0;
        virtual void createStyleSheet(ErrorString*, const String& in_frameId, TypeBuilder::CSS::StyleSheetId* out_styleSheetId) = 0;
        virtual void addRule(ErrorString*, const String& in_styleSheetId, const String& in_ruleText, const RefPtr<JSONObject>& in_location, RefPtr<TypeBuilder::CSS::CSSRule>& out_rule) = 0;
        virtual void forcePseudoState(ErrorString*, int in_nodeId, const RefPtr<JSONArray>& in_forcedPseudoClasses) = 0;
        virtual void getMediaQueries(ErrorString*, RefPtr<TypeBuilder::Array<TypeBuilder::CSS::CSSMedia> >& out_medias) = 0;
        virtual void setEffectivePropertyValueForNode(ErrorString*, int in_nodeId, const String& in_propertyName, const String& in_value) = 0;

    protected:
        virtual ~CSSCommandHandler() { }
    };

    class CORE_EXPORT TimelineCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void start(ErrorString*, const int* in_maxCallStackDepth, const bool* in_bufferEvents, const String* in_liveEvents, const bool* in_includeCounters, const bool* in_includeGPUEvents) = 0;
        virtual void stop(ErrorString*) = 0;

    protected:
        virtual ~TimelineCommandHandler() { }
    };

    class CORE_EXPORT DebuggerCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void setBreakpointsActive(ErrorString*, bool in_active) = 0;
        virtual void setSkipAllPauses(ErrorString*, bool in_skipped) = 0;
        virtual void setBreakpointByUrl(ErrorString*, int in_lineNumber, const String* in_url, const String* in_urlRegex, const int* in_columnNumber, const String* in_condition, TypeBuilder::Debugger::BreakpointId* out_breakpointId, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::Location> >& out_locations) = 0;
        virtual void setBreakpoint(ErrorString*, const RefPtr<JSONObject>& in_location, const String* in_condition, TypeBuilder::Debugger::BreakpointId* out_breakpointId, RefPtr<TypeBuilder::Debugger::Location>& out_actualLocation) = 0;
        virtual void removeBreakpoint(ErrorString*, const String& in_breakpointId) = 0;
        virtual void continueToLocation(ErrorString*, const RefPtr<JSONObject>& in_location, const bool* in_interstatementLocation) = 0;
        virtual void stepOver(ErrorString*) = 0;
        virtual void stepInto(ErrorString*) = 0;
        virtual void stepOut(ErrorString*) = 0;
        virtual void pause(ErrorString*) = 0;
        virtual void resume(ErrorString*) = 0;
        virtual void stepIntoAsync(ErrorString*) = 0;
        virtual void searchInContent(ErrorString*, const String& in_scriptId, const String& in_query, const bool* in_caseSensitive, const bool* in_isRegex, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::SearchMatch> >& out_result) = 0;
        virtual void canSetScriptSource(ErrorString*, bool* out_result) = 0;
        virtual void setScriptSource(ErrorString*, RefPtr<TypeBuilder::Debugger::SetScriptSourceError>& errorData, const String& in_scriptId, const String& in_scriptSource, const bool* in_preview, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::CallFrame> >& opt_out_callFrames, RefPtr<JSONObject>& opt_out_result, RefPtr<TypeBuilder::Debugger::StackTrace>& opt_out_asyncStackTrace) = 0;
        virtual void restartFrame(ErrorString*, const String& in_callFrameId, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::CallFrame> >& out_callFrames, RefPtr<JSONObject>& out_result, RefPtr<TypeBuilder::Debugger::StackTrace>& opt_out_asyncStackTrace) = 0;
        virtual void getScriptSource(ErrorString*, const String& in_scriptId, String* out_scriptSource) = 0;
        virtual void getFunctionDetails(ErrorString*, const String& in_functionId, RefPtr<TypeBuilder::Debugger::FunctionDetails>& out_details) = 0;
        virtual void getGeneratorObjectDetails(ErrorString*, const String& in_objectId, RefPtr<TypeBuilder::Debugger::GeneratorObjectDetails>& out_details) = 0;
        virtual void getCollectionEntries(ErrorString*, const String& in_objectId, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::CollectionEntry> >& out_entries) = 0;
        virtual void setPauseOnExceptions(ErrorString*, const String& in_state) = 0;
        virtual void evaluateOnCallFrame(ErrorString*, const String& in_callFrameId, const String& in_expression, const String* in_objectGroup, const bool* in_includeCommandLineAPI, const bool* in_doNotPauseOnExceptionsAndMuteConsole, const bool* in_returnByValue, const bool* in_generatePreview, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_result, TypeBuilder::OptOutput<bool>* opt_out_wasThrown, RefPtr<TypeBuilder::Debugger::ExceptionDetails>& opt_out_exceptionDetails) = 0;
        virtual void compileScript(ErrorString*, const String& in_expression, const String& in_sourceURL, bool in_persistScript, const int* in_executionContextId, TypeBuilder::OptOutput<TypeBuilder::Debugger::ScriptId>* opt_out_scriptId, RefPtr<TypeBuilder::Debugger::ExceptionDetails>& opt_out_exceptionDetails) = 0;
        virtual void runScript(ErrorString*, const String& in_scriptId, const int* in_executionContextId, const String* in_objectGroup, const bool* in_doNotPauseOnExceptionsAndMuteConsole, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_result, RefPtr<TypeBuilder::Debugger::ExceptionDetails>& opt_out_exceptionDetails) = 0;
        virtual void setVariableValue(ErrorString*, int in_scopeNumber, const String& in_variableName, const RefPtr<JSONObject>& in_newValue, const String* in_callFrameId, const String* in_functionObjectId) = 0;
        virtual void getStepInPositions(ErrorString*, const String& in_callFrameId, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::Location> >& opt_out_stepInPositions) = 0;
        virtual void getBacktrace(ErrorString*, RefPtr<TypeBuilder::Array<TypeBuilder::Debugger::CallFrame> >& out_callFrames, RefPtr<TypeBuilder::Debugger::StackTrace>& opt_out_asyncStackTrace) = 0;
        virtual void skipStackFrames(ErrorString*, const String* in_script, const bool* in_skipContentScripts) = 0;
        virtual void setAsyncCallStackDepth(ErrorString*, int in_maxDepth) = 0;
        virtual void enablePromiseTracker(ErrorString*, const bool* in_captureStacks) = 0;
        virtual void disablePromiseTracker(ErrorString*) = 0;
        virtual void getPromiseById(ErrorString*, int in_promiseId, const String* in_objectGroup, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_promise) = 0;
        virtual void flushAsyncOperationEvents(ErrorString*) = 0;
        virtual void setAsyncOperationBreakpoint(ErrorString*, int in_operationId) = 0;
        virtual void removeAsyncOperationBreakpoint(ErrorString*, int in_operationId) = 0;

    protected:
        virtual ~DebuggerCommandHandler() { }
    };

    class CORE_EXPORT DOMDebuggerCommandHandler {
    public:
        virtual void setDOMBreakpoint(ErrorString*, int in_nodeId, const String& in_type) = 0;
        virtual void removeDOMBreakpoint(ErrorString*, int in_nodeId, const String& in_type) = 0;
        virtual void setEventListenerBreakpoint(ErrorString*, const String& in_eventName, const String* in_targetName) = 0;
        virtual void removeEventListenerBreakpoint(ErrorString*, const String& in_eventName, const String* in_targetName) = 0;
        virtual void setInstrumentationBreakpoint(ErrorString*, const String& in_eventName) = 0;
        virtual void removeInstrumentationBreakpoint(ErrorString*, const String& in_eventName) = 0;
        virtual void setXHRBreakpoint(ErrorString*, const String& in_url) = 0;
        virtual void removeXHRBreakpoint(ErrorString*, const String& in_url) = 0;
        virtual void getEventListeners(ErrorString*, const String& in_objectId, RefPtr<TypeBuilder::Array<TypeBuilder::DOMDebugger::EventListener> >& out_listeners) = 0;

    protected:
        virtual ~DOMDebuggerCommandHandler() { }
    };

    class CORE_EXPORT ProfilerCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void setSamplingInterval(ErrorString*, int in_interval) = 0;
        virtual void start(ErrorString*) = 0;
        virtual void stop(ErrorString*, RefPtr<TypeBuilder::Profiler::CPUProfile>& out_profile) = 0;

    protected:
        virtual ~ProfilerCommandHandler() { }
    };

    class CORE_EXPORT HeapProfilerCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void startTrackingHeapObjects(ErrorString*, const bool* in_trackAllocations) = 0;
        virtual void stopTrackingHeapObjects(ErrorString*, const bool* in_reportProgress) = 0;
        virtual void takeHeapSnapshot(ErrorString*, const bool* in_reportProgress) = 0;
        virtual void collectGarbage(ErrorString*) = 0;
        virtual void getObjectByHeapObjectId(ErrorString*, const String& in_objectId, const String* in_objectGroup, RefPtr<TypeBuilder::Runtime::RemoteObject>& out_result) = 0;
        virtual void addInspectedHeapObject(ErrorString*, const String& in_heapObjectId) = 0;
        virtual void getHeapObjectId(ErrorString*, const String& in_objectId, TypeBuilder::HeapProfiler::HeapSnapshotObjectId* out_heapSnapshotObjectId) = 0;

    protected:
        virtual ~HeapProfilerCommandHandler() { }
    };

    class CORE_EXPORT WorkerCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void sendMessageToWorker(ErrorString*, const String& in_workerId, const String& in_message) = 0;
        virtual void connectToWorker(ErrorString*, const String& in_workerId) = 0;
        virtual void disconnectFromWorker(ErrorString*, const String& in_workerId) = 0;
        virtual void setAutoconnectToWorkers(ErrorString*, bool in_value) = 0;

    protected:
        virtual ~WorkerCommandHandler() { }
    };

    class CORE_EXPORT ServiceWorkerCommandHandler {
    public:

    protected:
        virtual ~ServiceWorkerCommandHandler() { }
    };

    class CORE_EXPORT InputCommandHandler {
    public:
        virtual void dispatchTouchEvent(ErrorString*, const String& in_type, const RefPtr<JSONArray>& in_touchPoints, const int* in_modifiers, const double* in_timestamp) = 0;

    protected:
        virtual ~InputCommandHandler() { }
    };

    class CORE_EXPORT LayerTreeCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void compositingReasons(ErrorString*, const String& in_layerId, RefPtr<TypeBuilder::Array<String> >& out_compositingReasons) = 0;
        virtual void makeSnapshot(ErrorString*, const String& in_layerId, TypeBuilder::LayerTree::SnapshotId* out_snapshotId) = 0;
        virtual void loadSnapshot(ErrorString*, const RefPtr<JSONArray>& in_tiles, TypeBuilder::LayerTree::SnapshotId* out_snapshotId) = 0;
        virtual void releaseSnapshot(ErrorString*, const String& in_snapshotId) = 0;
        virtual void profileSnapshot(ErrorString*, const String& in_snapshotId, const int* in_minRepeatCount, const double* in_minDuration, const RefPtr<JSONObject>* in_clipRect, RefPtr<TypeBuilder::Array<TypeBuilder::Array<double> > >& out_timings) = 0;
        virtual void replaySnapshot(ErrorString*, const String& in_snapshotId, const int* in_fromStep, const int* in_toStep, const double* in_scale, String* out_dataURL) = 0;
        virtual void snapshotCommandLog(ErrorString*, const String& in_snapshotId, RefPtr<TypeBuilder::Array<JSONObject> >& out_commandLog) = 0;

    protected:
        virtual ~LayerTreeCommandHandler() { }
    };

    class CORE_EXPORT DeviceOrientationCommandHandler {
    public:
        virtual void setDeviceOrientationOverride(ErrorString*, double in_alpha, double in_beta, double in_gamma) = 0;
        virtual void clearDeviceOrientationOverride(ErrorString*) = 0;

    protected:
        virtual ~DeviceOrientationCommandHandler() { }
    };

    class CORE_EXPORT ScreenOrientationCommandHandler {
    public:
        virtual void setScreenOrientationOverride(ErrorString*, int in_angle, const String& in_type) = 0;
        virtual void clearScreenOrientationOverride(ErrorString*) = 0;

    protected:
        virtual ~ScreenOrientationCommandHandler() { }
    };

    class CORE_EXPORT TracingCommandHandler {
    public:
        class StartCallback : public CallbackBase {
        public:
            StartCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess();
        };
        virtual void start(ErrorString*, const String* in_categories, const String* in_options, const double* in_bufferUsageReportingInterval, PassRefPtrWillBeRawPtr<StartCallback> callback) = 0;
        class EndCallback : public CallbackBase {
        public:
            EndCallback(PassRefPtrWillBeRawPtr<InspectorBackendDispatcherImpl>, int id);
            CORE_EXPORT void sendSuccess();
        };
        virtual void end(ErrorString*, PassRefPtrWillBeRawPtr<EndCallback> callback) = 0;

    protected:
        virtual ~TracingCommandHandler() { }
    };

    class CORE_EXPORT PowerCommandHandler {
    public:

    protected:
        virtual ~PowerCommandHandler() { }
    };

    class CORE_EXPORT AnimationCommandHandler {
    public:
        virtual void enable(ErrorString*) = 0;
        virtual void disable(ErrorString*) = 0;
        virtual void getPlaybackRate(ErrorString*, double* out_playbackRate) = 0;
        virtual void setPlaybackRate(ErrorString*, double in_playbackRate) = 0;
        virtual void setCurrentTime(ErrorString*, double in_currentTime) = 0;
        virtual void setTiming(ErrorString*, const String& in_playerId, double in_duration, double in_delay) = 0;

    protected:
        virtual ~AnimationCommandHandler() { }
    };

    class CORE_EXPORT AccessibilityCommandHandler {
    public:
        virtual void getAXNode(ErrorString*, int in_nodeId, RefPtr<TypeBuilder::Accessibility::AXNode>& opt_out_accessibilityNode) = 0;

    protected:
        virtual ~AccessibilityCommandHandler() { }
    };

    class CORE_EXPORT SecurityCommandHandler {
    public:

    protected:
        virtual ~SecurityCommandHandler() { }
    };


    virtual void registerAgent(InspectorCommandHandler* inspectorAgent) = 0;
    virtual void registerAgent(MemoryCommandHandler* memoryAgent) = 0;
    virtual void registerAgent(PageCommandHandler* pageAgent) = 0;
    virtual void registerAgent(RenderingCommandHandler* renderingAgent) = 0;
    virtual void registerAgent(EmulationCommandHandler* emulationAgent) = 0;
    virtual void registerAgent(RuntimeCommandHandler* runtimeAgent) = 0;
    virtual void registerAgent(ConsoleCommandHandler* consoleAgent) = 0;
    virtual void registerAgent(NetworkCommandHandler* networkAgent) = 0;
    virtual void registerAgent(DatabaseCommandHandler* databaseAgent) = 0;
    virtual void registerAgent(IndexedDBCommandHandler* indexedDBAgent) = 0;
    virtual void registerAgent(CacheStorageCommandHandler* cacheStorageAgent) = 0;
    virtual void registerAgent(DOMStorageCommandHandler* domStorageAgent) = 0;
    virtual void registerAgent(ApplicationCacheCommandHandler* applicationCacheAgent) = 0;
    virtual void registerAgent(FileSystemCommandHandler* fileSystemAgent) = 0;
    virtual void registerAgent(DOMCommandHandler* domAgent) = 0;
    virtual void registerAgent(CSSCommandHandler* cssAgent) = 0;
    virtual void registerAgent(TimelineCommandHandler* timelineAgent) = 0;
    virtual void registerAgent(DebuggerCommandHandler* debuggerAgent) = 0;
    virtual void registerAgent(DOMDebuggerCommandHandler* domDebuggerAgent) = 0;
    virtual void registerAgent(ProfilerCommandHandler* profilerAgent) = 0;
    virtual void registerAgent(HeapProfilerCommandHandler* heapProfilerAgent) = 0;
    virtual void registerAgent(WorkerCommandHandler* workerAgent) = 0;
    virtual void registerAgent(ServiceWorkerCommandHandler* serviceWorkerAgent) = 0;
    virtual void registerAgent(InputCommandHandler* inputAgent) = 0;
    virtual void registerAgent(LayerTreeCommandHandler* layerTreeAgent) = 0;
    virtual void registerAgent(DeviceOrientationCommandHandler* deviceOrientationAgent) = 0;
    virtual void registerAgent(ScreenOrientationCommandHandler* screenOrientationAgent) = 0;
    virtual void registerAgent(TracingCommandHandler* tracingAgent) = 0;
    virtual void registerAgent(PowerCommandHandler* powerAgent) = 0;
    virtual void registerAgent(AnimationCommandHandler* animationAgent) = 0;
    virtual void registerAgent(AccessibilityCommandHandler* accessibilityAgent) = 0;
    virtual void registerAgent(SecurityCommandHandler* securityAgent) = 0;

    virtual void clearFrontend() = 0;

    enum CommonErrorCode {
        ParseError = 0,
        InvalidRequest,
        MethodNotFound,
        InvalidParams,
        InternalError,
        ServerError,
        LastEntry,
    };

    void reportProtocolError(int callId, CommonErrorCode, const String& errorMessage) const;
    virtual void reportProtocolError(int callId, CommonErrorCode, const String& errorMessage, PassRefPtr<JSONValue> data) const = 0;
    virtual void dispatch(const String& message) = 0;
    static bool getCommandName(const String& message, String* result);

    enum MethodNames {
        kInspector_enableCmd,
        kInspector_disableCmd,
        kMemory_getDOMCountersCmd,
        kPage_enableCmd,
        kPage_disableCmd,
        kPage_addScriptToEvaluateOnLoadCmd,
        kPage_removeScriptToEvaluateOnLoadCmd,
        kPage_reloadCmd,
        kPage_navigateCmd,
        kPage_getResourceTreeCmd,
        kPage_getResourceContentCmd,
        kPage_searchInResourceCmd,
        kPage_setDocumentContentCmd,
        kPage_setDeviceOrientationOverrideCmd,
        kPage_clearDeviceOrientationOverrideCmd,
        kPage_setTouchEmulationEnabledCmd,
        kPage_startScreencastCmd,
        kPage_stopScreencastCmd,
        kPage_setShowViewportSizeOnResizeCmd,
        kPage_setOverlayMessageCmd,
        kRendering_setShowPaintRectsCmd,
        kRendering_setShowDebugBordersCmd,
        kRendering_setShowFPSCounterCmd,
        kRendering_setContinuousPaintingEnabledCmd,
        kRendering_setShowScrollBottleneckRectsCmd,
        kEmulation_resetScrollAndPageScaleFactorCmd,
        kEmulation_setPageScaleFactorCmd,
        kEmulation_setScriptExecutionDisabledCmd,
        kEmulation_setTouchEmulationEnabledCmd,
        kEmulation_setEmulatedMediaCmd,
        kRuntime_evaluateCmd,
        kRuntime_callFunctionOnCmd,
        kRuntime_getPropertiesCmd,
        kRuntime_releaseObjectCmd,
        kRuntime_releaseObjectGroupCmd,
        kRuntime_runCmd,
        kRuntime_enableCmd,
        kRuntime_disableCmd,
        kRuntime_isRunRequiredCmd,
        kRuntime_setCustomObjectFormatterEnabledCmd,
        kConsole_enableCmd,
        kConsole_disableCmd,
        kConsole_clearMessagesCmd,
        kNetwork_enableCmd,
        kNetwork_disableCmd,
        kNetwork_setUserAgentOverrideCmd,
        kNetwork_setExtraHTTPHeadersCmd,
        kNetwork_getResponseBodyCmd,
        kNetwork_replayXHRCmd,
        kNetwork_setMonitoringXHREnabledCmd,
        kNetwork_canClearBrowserCacheCmd,
        kNetwork_canClearBrowserCookiesCmd,
        kNetwork_emulateNetworkConditionsCmd,
        kNetwork_setCacheDisabledCmd,
        kNetwork_setDataSizeLimitsForTestCmd,
        kDatabase_enableCmd,
        kDatabase_disableCmd,
        kDatabase_getDatabaseTableNamesCmd,
        kDatabase_executeSQLCmd,
        kIndexedDB_enableCmd,
        kIndexedDB_disableCmd,
        kIndexedDB_requestDatabaseNamesCmd,
        kIndexedDB_requestDatabaseCmd,
        kIndexedDB_requestDataCmd,
        kIndexedDB_clearObjectStoreCmd,
        kCacheStorage_requestCacheNamesCmd,
        kCacheStorage_requestEntriesCmd,
        kCacheStorage_deleteCacheCmd,
        kCacheStorage_deleteEntryCmd,
        kDOMStorage_enableCmd,
        kDOMStorage_disableCmd,
        kDOMStorage_getDOMStorageItemsCmd,
        kDOMStorage_setDOMStorageItemCmd,
        kDOMStorage_removeDOMStorageItemCmd,
        kApplicationCache_getFramesWithManifestsCmd,
        kApplicationCache_enableCmd,
        kApplicationCache_getManifestForFrameCmd,
        kApplicationCache_getApplicationCacheForFrameCmd,
        kFileSystem_enableCmd,
        kFileSystem_disableCmd,
        kFileSystem_requestFileSystemRootCmd,
        kFileSystem_requestDirectoryContentCmd,
        kFileSystem_requestMetadataCmd,
        kFileSystem_requestFileContentCmd,
        kFileSystem_deleteEntryCmd,
        kDOM_enableCmd,
        kDOM_disableCmd,
        kDOM_getDocumentCmd,
        kDOM_requestChildNodesCmd,
        kDOM_querySelectorCmd,
        kDOM_querySelectorAllCmd,
        kDOM_setNodeNameCmd,
        kDOM_setNodeValueCmd,
        kDOM_removeNodeCmd,
        kDOM_setAttributeValueCmd,
        kDOM_setAttributesAsTextCmd,
        kDOM_removeAttributeCmd,
        kDOM_getOuterHTMLCmd,
        kDOM_setOuterHTMLCmd,
        kDOM_performSearchCmd,
        kDOM_getSearchResultsCmd,
        kDOM_discardSearchResultsCmd,
        kDOM_requestNodeCmd,
        kDOM_setInspectModeEnabledCmd,
        kDOM_highlightRectCmd,
        kDOM_highlightQuadCmd,
        kDOM_highlightNodeCmd,
        kDOM_hideHighlightCmd,
        kDOM_highlightFrameCmd,
        kDOM_pushNodeByPathToFrontendCmd,
        kDOM_pushNodesByBackendIdsToFrontendCmd,
        kDOM_setInspectedNodeCmd,
        kDOM_resolveNodeCmd,
        kDOM_getAttributesCmd,
        kDOM_copyToCmd,
        kDOM_moveToCmd,
        kDOM_undoCmd,
        kDOM_redoCmd,
        kDOM_markUndoableStateCmd,
        kDOM_focusCmd,
        kDOM_setFileInputFilesCmd,
        kDOM_getBoxModelCmd,
        kDOM_getNodeForLocationCmd,
        kDOM_getRelayoutBoundaryCmd,
        kDOM_getHighlightObjectForTestCmd,
        kCSS_enableCmd,
        kCSS_disableCmd,
        kCSS_getMatchedStylesForNodeCmd,
        kCSS_getInlineStylesForNodeCmd,
        kCSS_getComputedStyleForNodeCmd,
        kCSS_getPlatformFontsForNodeCmd,
        kCSS_getStyleSheetTextCmd,
        kCSS_setStyleSheetTextCmd,
        kCSS_setRuleSelectorCmd,
        kCSS_setStyleTextCmd,
        kCSS_setMediaTextCmd,
        kCSS_createStyleSheetCmd,
        kCSS_addRuleCmd,
        kCSS_forcePseudoStateCmd,
        kCSS_getMediaQueriesCmd,
        kCSS_setEffectivePropertyValueForNodeCmd,
        kTimeline_enableCmd,
        kTimeline_disableCmd,
        kTimeline_startCmd,
        kTimeline_stopCmd,
        kDebugger_enableCmd,
        kDebugger_disableCmd,
        kDebugger_setBreakpointsActiveCmd,
        kDebugger_setSkipAllPausesCmd,
        kDebugger_setBreakpointByUrlCmd,
        kDebugger_setBreakpointCmd,
        kDebugger_removeBreakpointCmd,
        kDebugger_continueToLocationCmd,
        kDebugger_stepOverCmd,
        kDebugger_stepIntoCmd,
        kDebugger_stepOutCmd,
        kDebugger_pauseCmd,
        kDebugger_resumeCmd,
        kDebugger_stepIntoAsyncCmd,
        kDebugger_searchInContentCmd,
        kDebugger_canSetScriptSourceCmd,
        kDebugger_setScriptSourceCmd,
        kDebugger_restartFrameCmd,
        kDebugger_getScriptSourceCmd,
        kDebugger_getFunctionDetailsCmd,
        kDebugger_getGeneratorObjectDetailsCmd,
        kDebugger_getCollectionEntriesCmd,
        kDebugger_setPauseOnExceptionsCmd,
        kDebugger_evaluateOnCallFrameCmd,
        kDebugger_compileScriptCmd,
        kDebugger_runScriptCmd,
        kDebugger_setVariableValueCmd,
        kDebugger_getStepInPositionsCmd,
        kDebugger_getBacktraceCmd,
        kDebugger_skipStackFramesCmd,
        kDebugger_setAsyncCallStackDepthCmd,
        kDebugger_enablePromiseTrackerCmd,
        kDebugger_disablePromiseTrackerCmd,
        kDebugger_getPromiseByIdCmd,
        kDebugger_flushAsyncOperationEventsCmd,
        kDebugger_setAsyncOperationBreakpointCmd,
        kDebugger_removeAsyncOperationBreakpointCmd,
        kDOMDebugger_setDOMBreakpointCmd,
        kDOMDebugger_removeDOMBreakpointCmd,
        kDOMDebugger_setEventListenerBreakpointCmd,
        kDOMDebugger_removeEventListenerBreakpointCmd,
        kDOMDebugger_setInstrumentationBreakpointCmd,
        kDOMDebugger_removeInstrumentationBreakpointCmd,
        kDOMDebugger_setXHRBreakpointCmd,
        kDOMDebugger_removeXHRBreakpointCmd,
        kDOMDebugger_getEventListenersCmd,
        kProfiler_enableCmd,
        kProfiler_disableCmd,
        kProfiler_setSamplingIntervalCmd,
        kProfiler_startCmd,
        kProfiler_stopCmd,
        kHeapProfiler_enableCmd,
        kHeapProfiler_disableCmd,
        kHeapProfiler_startTrackingHeapObjectsCmd,
        kHeapProfiler_stopTrackingHeapObjectsCmd,
        kHeapProfiler_takeHeapSnapshotCmd,
        kHeapProfiler_collectGarbageCmd,
        kHeapProfiler_getObjectByHeapObjectIdCmd,
        kHeapProfiler_addInspectedHeapObjectCmd,
        kHeapProfiler_getHeapObjectIdCmd,
        kWorker_enableCmd,
        kWorker_disableCmd,
        kWorker_sendMessageToWorkerCmd,
        kWorker_connectToWorkerCmd,
        kWorker_disconnectFromWorkerCmd,
        kWorker_setAutoconnectToWorkersCmd,
        kInput_dispatchTouchEventCmd,
        kLayerTree_enableCmd,
        kLayerTree_disableCmd,
        kLayerTree_compositingReasonsCmd,
        kLayerTree_makeSnapshotCmd,
        kLayerTree_loadSnapshotCmd,
        kLayerTree_releaseSnapshotCmd,
        kLayerTree_profileSnapshotCmd,
        kLayerTree_replaySnapshotCmd,
        kLayerTree_snapshotCommandLogCmd,
        kDeviceOrientation_setDeviceOrientationOverrideCmd,
        kDeviceOrientation_clearDeviceOrientationOverrideCmd,
        kScreenOrientation_setScreenOrientationOverrideCmd,
        kScreenOrientation_clearScreenOrientationOverrideCmd,
        kTracing_startCmd,
        kTracing_endCmd,
        kAnimation_enableCmd,
        kAnimation_disableCmd,
        kAnimation_getPlaybackRateCmd,
        kAnimation_setPlaybackRateCmd,
        kAnimation_setCurrentTimeCmd,
        kAnimation_setTimingCmd,
        kAccessibility_getAXNodeCmd,

        kMethodNamesEnumSize
    };

    static const char* commandName(MethodNames);

private:
    static const char commandNames[];
    static const unsigned short commandNamesIndex[];
};

} // namespace blink
#endif // !defined(InspectorBackendDispatcher_h)


