// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef MouseEventInit_h
#define MouseEventInit_h

#include "bindings/core/v8/Nullable.h"
#include "core/CoreExport.h"
#include "core/events/EventModifierInit.h"
#include "core/events/EventTarget.h"
#include "platform/heap/Handle.h"

namespace blink {

class CORE_EXPORT MouseEventInit : public EventModifierInit {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    MouseEventInit();

    bool hasButton() const { return !m_button.isNull(); }
    int button() const { return m_button.get(); }
    void setButton(int value) { m_button = value; }

    bool hasButtons() const { return !m_buttons.isNull(); }
    unsigned buttons() const { return m_buttons.get(); }
    void setButtons(unsigned value) { m_buttons = value; }

    bool hasClientX() const { return !m_clientX.isNull(); }
    int clientX() const { return m_clientX.get(); }
    void setClientX(int value) { m_clientX = value; }

    bool hasClientY() const { return !m_clientY.isNull(); }
    int clientY() const { return m_clientY.get(); }
    void setClientY(int value) { m_clientY = value; }

    bool hasMovementX() const { return !m_movementX.isNull(); }
    int movementX() const { return m_movementX.get(); }
    void setMovementX(int value) { m_movementX = value; }

    bool hasMovementY() const { return !m_movementY.isNull(); }
    int movementY() const { return m_movementY.get(); }
    void setMovementY(int value) { m_movementY = value; }

    bool hasRelatedTarget() const { return m_relatedTarget; }
    PassRefPtrWillBeRawPtr<EventTarget> relatedTarget() const { return m_relatedTarget; }
    void setRelatedTarget(PassRefPtrWillBeRawPtr<EventTarget> value) { m_relatedTarget = value; }
    void setRelatedTargetToNull() { m_relatedTarget = RefPtrWillBeMember<EventTarget>(); }

    bool hasScreenX() const { return !m_screenX.isNull(); }
    int screenX() const { return m_screenX.get(); }
    void setScreenX(int value) { m_screenX = value; }

    bool hasScreenY() const { return !m_screenY.isNull(); }
    int screenY() const { return m_screenY.get(); }
    void setScreenY(int value) { m_screenY = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<int> m_button;
    Nullable<unsigned> m_buttons;
    Nullable<int> m_clientX;
    Nullable<int> m_clientY;
    Nullable<int> m_movementX;
    Nullable<int> m_movementY;
    RefPtrWillBeMember<EventTarget> m_relatedTarget;
    Nullable<int> m_screenX;
    Nullable<int> m_screenY;

    friend class V8MouseEventInit;
};

} // namespace blink

#endif // MouseEventInit_h
