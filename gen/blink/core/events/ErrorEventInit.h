// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef ErrorEventInit_h
#define ErrorEventInit_h

#include "bindings/core/v8/Nullable.h"
#include "bindings/core/v8/ScriptValue.h"
#include "core/CoreExport.h"
#include "core/events/EventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT ErrorEventInit : public EventInit {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    ErrorEventInit();

    bool hasColno() const { return !m_colno.isNull(); }
    unsigned colno() const { return m_colno.get(); }
    void setColno(unsigned value) { m_colno = value; }

    bool hasError() const { return !(m_error.isEmpty() || m_error.isNull() || m_error.isUndefined()); }
    ScriptValue error() const { return m_error; }
    void setError(ScriptValue value) { m_error = value; }

    bool hasFilename() const { return !m_filename.isNull(); }
    String filename() const { return m_filename; }
    void setFilename(String value) { m_filename = value; }

    bool hasLineno() const { return !m_lineno.isNull(); }
    unsigned lineno() const { return m_lineno.get(); }
    void setLineno(unsigned value) { m_lineno = value; }

    bool hasMessage() const { return !m_message.isNull(); }
    String message() const { return m_message; }
    void setMessage(String value) { m_message = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<unsigned> m_colno;
    ScriptValue m_error;
    String m_filename;
    Nullable<unsigned> m_lineno;
    String m_message;

    friend class V8ErrorEventInit;
};

} // namespace blink

#endif // ErrorEventInit_h
