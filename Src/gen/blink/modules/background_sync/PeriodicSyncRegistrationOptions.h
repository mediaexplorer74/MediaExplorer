// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef PeriodicSyncRegistrationOptions_h
#define PeriodicSyncRegistrationOptions_h

#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT PeriodicSyncRegistrationOptions {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    PeriodicSyncRegistrationOptions();

    bool hasMinPeriod() const { return !m_minPeriod.isNull(); }
    unsigned minPeriod() const { return m_minPeriod.get(); }
    void setMinPeriod(unsigned value) { m_minPeriod = value; }

    bool hasNetworkState() const { return !m_networkState.isNull(); }
    String networkState() const { return m_networkState; }
    void setNetworkState(String value) { m_networkState = value; }

    bool hasPowerState() const { return !m_powerState.isNull(); }
    String powerState() const { return m_powerState; }
    void setPowerState(String value) { m_powerState = value; }

    bool hasTag() const { return !m_tag.isNull(); }
    String tag() const { return m_tag; }
    void setTag(String value) { m_tag = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<unsigned> m_minPeriod;
    String m_networkState;
    String m_powerState;
    String m_tag;

    friend class V8PeriodicSyncRegistrationOptions;
};

} // namespace blink

#endif // PeriodicSyncRegistrationOptions_h
