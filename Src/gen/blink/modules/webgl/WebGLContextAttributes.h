// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef WebGLContextAttributes_h
#define WebGLContextAttributes_h

#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT WebGLContextAttributes {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    WebGLContextAttributes();

    bool hasAlpha() const { return !m_alpha.isNull(); }
    bool alpha() const { return m_alpha.get(); }
    void setAlpha(bool value) { m_alpha = value; }

    bool hasAntialias() const { return !m_antialias.isNull(); }
    bool antialias() const { return m_antialias.get(); }
    void setAntialias(bool value) { m_antialias = value; }

    bool hasDepth() const { return !m_depth.isNull(); }
    bool depth() const { return m_depth.get(); }
    void setDepth(bool value) { m_depth = value; }

    bool hasFailIfMajorPerformanceCaveat() const { return !m_failIfMajorPerformanceCaveat.isNull(); }
    bool failIfMajorPerformanceCaveat() const { return m_failIfMajorPerformanceCaveat.get(); }
    void setFailIfMajorPerformanceCaveat(bool value) { m_failIfMajorPerformanceCaveat = value; }

    bool hasPremultipliedAlpha() const { return !m_premultipliedAlpha.isNull(); }
    bool premultipliedAlpha() const { return m_premultipliedAlpha.get(); }
    void setPremultipliedAlpha(bool value) { m_premultipliedAlpha = value; }

    bool hasPreserveDrawingBuffer() const { return !m_preserveDrawingBuffer.isNull(); }
    bool preserveDrawingBuffer() const { return m_preserveDrawingBuffer.get(); }
    void setPreserveDrawingBuffer(bool value) { m_preserveDrawingBuffer = value; }

    bool hasStencil() const { return !m_stencil.isNull(); }
    bool stencil() const { return m_stencil.get(); }
    void setStencil(bool value) { m_stencil = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<bool> m_alpha;
    Nullable<bool> m_antialias;
    Nullable<bool> m_depth;
    Nullable<bool> m_failIfMajorPerformanceCaveat;
    Nullable<bool> m_premultipliedAlpha;
    Nullable<bool> m_preserveDrawingBuffer;
    Nullable<bool> m_stencil;

    friend class V8WebGLContextAttributes;
};

} // namespace blink

#endif // WebGLContextAttributes_h
