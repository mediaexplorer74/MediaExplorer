// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef HitRegionOptions_h
#define HitRegionOptions_h

#include "core/dom/Element.h"
#include "modules/ModulesExport.h"
#include "modules/canvas2d/Path2D.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT HitRegionOptions {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    HitRegionOptions();

    bool hasControl() const { return m_control; }
    PassRefPtrWillBeRawPtr<Element> control() const { return m_control; }
    void setControl(PassRefPtrWillBeRawPtr<Element> value) { m_control = value; }
    void setControlToNull() { m_control = RefPtrWillBeMember<Element>(); }

    bool hasFillRule() const { return !m_fillRule.isNull(); }
    String fillRule() const { return m_fillRule; }
    void setFillRule(String value) { m_fillRule = value; }

    bool hasId() const { return !m_id.isNull(); }
    String id() const { return m_id; }
    void setId(String value) { m_id = value; }

    bool hasPath() const { return m_path; }
    Path2D* path() const { return m_path; }
    void setPath(Path2D* value) { m_path = value; }
    void setPathToNull() { m_path = Member<Path2D>(); }

    DECLARE_VIRTUAL_TRACE();

private:
    RefPtrWillBeMember<Element> m_control;
    String m_fillRule;
    String m_id;
    Member<Path2D> m_path;

    friend class V8HitRegionOptions;
};

} // namespace blink

#endif // HitRegionOptions_h
