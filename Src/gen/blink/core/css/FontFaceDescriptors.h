// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef FontFaceDescriptors_h
#define FontFaceDescriptors_h

#include "core/CoreExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT FontFaceDescriptors {
    ALLOW_ONLY_INLINE_ALLOCATION();
public:
    FontFaceDescriptors();

    bool hasFeatureSettings() const { return !m_featureSettings.isNull(); }
    String featureSettings() const { return m_featureSettings; }
    void setFeatureSettings(String value) { m_featureSettings = value; }

    bool hasStretch() const { return !m_stretch.isNull(); }
    String stretch() const { return m_stretch; }
    void setStretch(String value) { m_stretch = value; }

    bool hasStyle() const { return !m_style.isNull(); }
    String style() const { return m_style; }
    void setStyle(String value) { m_style = value; }

    bool hasUnicodeRange() const { return !m_unicodeRange.isNull(); }
    String unicodeRange() const { return m_unicodeRange; }
    void setUnicodeRange(String value) { m_unicodeRange = value; }

    bool hasVariant() const { return !m_variant.isNull(); }
    String variant() const { return m_variant; }
    void setVariant(String value) { m_variant = value; }

    bool hasWeight() const { return !m_weight.isNull(); }
    String weight() const { return m_weight; }
    void setWeight(String value) { m_weight = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    String m_featureSettings;
    String m_stretch;
    String m_style;
    String m_unicodeRange;
    String m_variant;
    String m_weight;

    friend class V8FontFaceDescriptors;
};

} // namespace blink

#endif // FontFaceDescriptors_h
