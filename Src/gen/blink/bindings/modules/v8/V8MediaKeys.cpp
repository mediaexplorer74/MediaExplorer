// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8MediaKeys.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/UnionTypesModules.h"
#include "bindings/modules/v8/V8MediaKeySession.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8MediaKeys::wrapperTypeInfo = { gin::kEmbedderBlink, V8MediaKeys::domTemplate, V8MediaKeys::refObject, V8MediaKeys::derefObject, V8MediaKeys::trace, V8MediaKeys::toActiveDOMObject, 0, V8MediaKeys::preparePrototypeObject, V8MediaKeys::installConditionallyEnabledProperties, "MediaKeys", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in MediaKeys.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& MediaKeys::s_wrapperTypeInfo = V8MediaKeys::wrapperTypeInfo;

namespace MediaKeysV8Internal {

static void createSessionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSession", "MediaKeys", info.Holder(), info.GetIsolate());
    MediaKeys* impl = V8MediaKeys::toImpl(info.Holder());
    V8StringResource<> sessionType;
    {
        if (!info[0]->IsUndefined()) {
            sessionType = info[0];
            if (!sessionType.prepare())
                return;
            static const char* validValues[] = {
                "temporary",
                "persistent-license",
            };
            if (!isValidEnum(sessionType, validValues, WTF_ARRAY_LENGTH(validValues), "MediaKeySessionType", exceptionState)) {
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            sessionType = String("temporary");
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<MediaKeySession> result = impl->createSession(scriptState, sessionType, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createSessionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    MediaKeysV8Internal::createSessionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setServerCertificateMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    MediaKeys* impl = V8MediaKeys::toImpl(info.Holder());
    ArrayBufferOrArrayBufferView serverCertificate;
    {
        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[0], serverCertificate, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->setServerCertificate(scriptState, serverCertificate);
    v8SetReturnValue(info, result.v8Value());
}

static void setServerCertificateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setServerCertificate", "MediaKeys", info.Holder(), info.GetIsolate());
    setServerCertificateMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void setServerCertificateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    MediaKeysV8Internal::setServerCertificateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace MediaKeysV8Internal

static const V8DOMConfiguration::MethodConfiguration V8MediaKeysMethods[] = {
    {"createSession", MediaKeysV8Internal::createSessionMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setServerCertificate", MediaKeysV8Internal::setServerCertificateMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8MediaKeysTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::encryptedMediaEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "MediaKeys", v8::Local<v8::FunctionTemplate>(), V8MediaKeys::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "MediaKeys", v8::Local<v8::FunctionTemplate>(), V8MediaKeys::internalFieldCount,
            0, 0,
            0, 0,
            V8MediaKeysMethods, WTF_ARRAY_LENGTH(V8MediaKeysMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8MediaKeys::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8MediaKeysTemplate);
}

bool V8MediaKeys::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8MediaKeys::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MediaKeys* V8MediaKeys::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

ActiveDOMObject* V8MediaKeys::toActiveDOMObject(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

void V8MediaKeys::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8MediaKeys::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
