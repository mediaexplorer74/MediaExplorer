// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SQLError.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SQLError::wrapperTypeInfo = { gin::kEmbedderBlink, V8SQLError::domTemplate, V8SQLError::refObject, V8SQLError::derefObject, V8SQLError::trace, 0, 0, V8SQLError::preparePrototypeObject, V8SQLError::installConditionallyEnabledProperties, "SQLError", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SQLError.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SQLError::s_wrapperTypeInfo = V8SQLError::wrapperTypeInfo;

namespace SQLErrorV8Internal {

static void codeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SQLError* impl = V8SQLError::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->code());
}

static void codeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SQLErrorV8Internal::codeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void messageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SQLError* impl = V8SQLError::toImpl(holder);
    v8SetReturnValueString(info, impl->message(), info.GetIsolate());
}

static void messageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SQLErrorV8Internal::messageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace SQLErrorV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8SQLErrorAccessors[] = {
    {"code", SQLErrorV8Internal::codeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"message", SQLErrorV8Internal::messageAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8SQLErrorTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SQLError", v8::Local<v8::FunctionTemplate>(), V8SQLError::internalFieldCount,
        0, 0,
        V8SQLErrorAccessors, WTF_ARRAY_LENGTH(V8SQLErrorAccessors),
        0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8SQLErrorConstants[] = {
        {"UNKNOWN_ERR", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"DATABASE_ERR", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"VERSION_ERR", 2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"TOO_LARGE_ERR", 3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"QUOTA_ERR", 4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SYNTAX_ERR", 5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"CONSTRAINT_ERR", 6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"TIMEOUT_ERR", 7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8SQLErrorConstants, WTF_ARRAY_LENGTH(V8SQLErrorConstants));
    static_assert(0 == SQLError::UNKNOWN_ERR, "the value of SQLError_UNKNOWN_ERR does not match with implementation");
    static_assert(1 == SQLError::DATABASE_ERR, "the value of SQLError_DATABASE_ERR does not match with implementation");
    static_assert(2 == SQLError::VERSION_ERR, "the value of SQLError_VERSION_ERR does not match with implementation");
    static_assert(3 == SQLError::TOO_LARGE_ERR, "the value of SQLError_TOO_LARGE_ERR does not match with implementation");
    static_assert(4 == SQLError::QUOTA_ERR, "the value of SQLError_QUOTA_ERR does not match with implementation");
    static_assert(5 == SQLError::SYNTAX_ERR, "the value of SQLError_SYNTAX_ERR does not match with implementation");
    static_assert(6 == SQLError::CONSTRAINT_ERR, "the value of SQLError_CONSTRAINT_ERR does not match with implementation");
    static_assert(7 == SQLError::TIMEOUT_ERR, "the value of SQLError_TIMEOUT_ERR does not match with implementation");

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8SQLError::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SQLErrorTemplate);
}

bool V8SQLError::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SQLError::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SQLError* V8SQLError::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8SQLError::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8SQLError::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
