// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CHROMIUMSubscribeUniform.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8CHROMIUMValuebuffer.h"
#include "bindings/modules/v8/V8WebGLUniformLocation.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8CHROMIUMSubscribeUniform::wrapperTypeInfo = { gin::kEmbedderBlink, V8CHROMIUMSubscribeUniform::domTemplate, V8CHROMIUMSubscribeUniform::refObject, V8CHROMIUMSubscribeUniform::derefObject, V8CHROMIUMSubscribeUniform::trace, 0, V8CHROMIUMSubscribeUniform::visitDOMWrapper, V8CHROMIUMSubscribeUniform::preparePrototypeObject, V8CHROMIUMSubscribeUniform::installConditionallyEnabledProperties, "CHROMIUMSubscribeUniform", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CHROMIUMSubscribeUniform.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CHROMIUMSubscribeUniform::s_wrapperTypeInfo = V8CHROMIUMSubscribeUniform::wrapperTypeInfo;

namespace CHROMIUMSubscribeUniformV8Internal {

static void createValuebufferCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createValuebufferCHROMIUM());
}

static void createValuebufferCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::createValuebufferCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteValuebufferCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteValuebufferCHROMIUM", "CHROMIUMSubscribeUniform", 1, info.Length()), info.GetIsolate());
        return;
    }
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    CHROMIUMValuebuffer* buffer;
    {
        buffer = V8CHROMIUMValuebuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!buffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteValuebufferCHROMIUM", "CHROMIUMSubscribeUniform", "parameter 1 is not of type 'CHROMIUMValuebuffer'."));
            return;
        }
    }
    impl->deleteValuebufferCHROMIUM(buffer);
}

static void deleteValuebufferCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::deleteValuebufferCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isValuebufferCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isValuebufferCHROMIUM", "CHROMIUMSubscribeUniform", 1, info.Length()), info.GetIsolate());
        return;
    }
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    CHROMIUMValuebuffer* buffer;
    {
        buffer = V8CHROMIUMValuebuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!buffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isValuebufferCHROMIUM", "CHROMIUMSubscribeUniform", "parameter 1 is not of type 'CHROMIUMValuebuffer'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isValuebufferCHROMIUM(buffer));
}

static void isValuebufferCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::isValuebufferCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bindValuebufferCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bindValuebufferCHROMIUM", "CHROMIUMSubscribeUniform", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    unsigned target;
    CHROMIUMValuebuffer* buffer;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        buffer = V8CHROMIUMValuebuffer::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!buffer && !isUndefinedOrNull(info[1])) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CHROMIUMValuebuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bindValuebufferCHROMIUM(target, buffer);
}

static void bindValuebufferCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::bindValuebufferCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void subscribeValueCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "subscribeValueCHROMIUM", "CHROMIUMSubscribeUniform", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    unsigned target;
    unsigned subscriptions;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        subscriptions = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->subscribeValueCHROMIUM(target, subscriptions);
}

static void subscribeValueCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::subscribeValueCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void populateSubscribedValuesCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "populateSubscribedValuesCHROMIUM", "CHROMIUMSubscribeUniform", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    unsigned target;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->populateSubscribedValuesCHROMIUM(target);
}

static void populateSubscribedValuesCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::populateSubscribedValuesCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniformValuebufferCHROMIUMMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformValuebufferCHROMIUM", "CHROMIUMSubscribeUniform", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CHROMIUMSubscribeUniform* impl = V8CHROMIUMSubscribeUniform::toImpl(info.Holder());
    WebGLUniformLocation* location;
    unsigned target;
    unsigned subscription;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        target = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        subscription = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniformValuebufferCHROMIUM(location, target, subscription);
}

static void uniformValuebufferCHROMIUMMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CHROMIUMSubscribeUniformV8Internal::uniformValuebufferCHROMIUMMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace CHROMIUMSubscribeUniformV8Internal

void V8CHROMIUMSubscribeUniform::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    CHROMIUMSubscribeUniform* impl = scriptWrappable->toImpl<CHROMIUMSubscribeUniform>();
    // The canvas() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->canvas())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

static const V8DOMConfiguration::MethodConfiguration V8CHROMIUMSubscribeUniformMethods[] = {
    {"createValuebufferCHROMIUM", CHROMIUMSubscribeUniformV8Internal::createValuebufferCHROMIUMMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteValuebufferCHROMIUM", CHROMIUMSubscribeUniformV8Internal::deleteValuebufferCHROMIUMMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isValuebufferCHROMIUM", CHROMIUMSubscribeUniformV8Internal::isValuebufferCHROMIUMMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"bindValuebufferCHROMIUM", CHROMIUMSubscribeUniformV8Internal::bindValuebufferCHROMIUMMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"subscribeValueCHROMIUM", CHROMIUMSubscribeUniformV8Internal::subscribeValueCHROMIUMMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"populateSubscribedValuesCHROMIUM", CHROMIUMSubscribeUniformV8Internal::populateSubscribedValuesCHROMIUMMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"uniformValuebufferCHROMIUM", CHROMIUMSubscribeUniformV8Internal::uniformValuebufferCHROMIUMMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8CHROMIUMSubscribeUniformTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CHROMIUMSubscribeUniform", v8::Local<v8::FunctionTemplate>(), V8CHROMIUMSubscribeUniform::internalFieldCount,
        0, 0,
        0, 0,
        V8CHROMIUMSubscribeUniformMethods, WTF_ARRAY_LENGTH(V8CHROMIUMSubscribeUniformMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8CHROMIUMSubscribeUniformConstants[] = {
        {"SUBSCRIBED_VALUES_BUFFER_CHROMIUM", 0x924B, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MOUSE_POSITION_CHROMIUM", 0x924C, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8CHROMIUMSubscribeUniformConstants, WTF_ARRAY_LENGTH(V8CHROMIUMSubscribeUniformConstants));

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8CHROMIUMSubscribeUniform::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8CHROMIUMSubscribeUniformTemplate);
}

bool V8CHROMIUMSubscribeUniform::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8CHROMIUMSubscribeUniform::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CHROMIUMSubscribeUniform* V8CHROMIUMSubscribeUniform::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8CHROMIUMSubscribeUniform::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<CHROMIUMSubscribeUniform>()->ref();
#endif
}

void V8CHROMIUMSubscribeUniform::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<CHROMIUMSubscribeUniform>()->deref();
#endif
}

} // namespace blink
