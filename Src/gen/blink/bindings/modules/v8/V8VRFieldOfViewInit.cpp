// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8VRFieldOfViewInit.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8VRFieldOfViewInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, VRFieldOfViewInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> downDegreesValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "downDegrees")).ToLocal(&downDegreesValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (downDegreesValue.IsEmpty() || downDegreesValue->IsUndefined()) {
            // Do nothing.
        } else {
            double downDegrees = toRestrictedDouble(isolate, downDegreesValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setDownDegrees(downDegrees);
        }
    }

    {
        v8::Local<v8::Value> leftDegreesValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "leftDegrees")).ToLocal(&leftDegreesValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (leftDegreesValue.IsEmpty() || leftDegreesValue->IsUndefined()) {
            // Do nothing.
        } else {
            double leftDegrees = toRestrictedDouble(isolate, leftDegreesValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setLeftDegrees(leftDegrees);
        }
    }

    {
        v8::Local<v8::Value> rightDegreesValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "rightDegrees")).ToLocal(&rightDegreesValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (rightDegreesValue.IsEmpty() || rightDegreesValue->IsUndefined()) {
            // Do nothing.
        } else {
            double rightDegrees = toRestrictedDouble(isolate, rightDegreesValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setRightDegrees(rightDegrees);
        }
    }

    {
        v8::Local<v8::Value> upDegreesValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "upDegrees")).ToLocal(&upDegreesValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (upDegreesValue.IsEmpty() || upDegreesValue->IsUndefined()) {
            // Do nothing.
        } else {
            double upDegrees = toRestrictedDouble(isolate, upDegreesValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setUpDegrees(upDegrees);
        }
    }

}

v8::Local<v8::Value> toV8(const VRFieldOfViewInit& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8VRFieldOfViewInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8VRFieldOfViewInit(const VRFieldOfViewInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasDownDegrees()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "downDegrees"), v8::Number::New(isolate, impl.downDegrees()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "downDegrees"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasLeftDegrees()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "leftDegrees"), v8::Number::New(isolate, impl.leftDegrees()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "leftDegrees"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasRightDegrees()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rightDegrees"), v8::Number::New(isolate, impl.rightDegrees()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rightDegrees"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasUpDegrees()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "upDegrees"), v8::Number::New(isolate, impl.upDegrees()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "upDegrees"), v8::Number::New(isolate, 0))))
            return false;
    }

    return true;
}

VRFieldOfViewInit NativeValueTraits<VRFieldOfViewInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    VRFieldOfViewInit impl;
    V8VRFieldOfViewInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
