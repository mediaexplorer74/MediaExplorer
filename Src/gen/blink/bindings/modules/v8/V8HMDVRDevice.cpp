// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8HMDVRDevice.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8VREyeParameters.h"
#include "bindings/modules/v8/V8VRFieldOfView.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8HMDVRDevice::wrapperTypeInfo = { gin::kEmbedderBlink, V8HMDVRDevice::domTemplate, V8HMDVRDevice::refObject, V8HMDVRDevice::derefObject, V8HMDVRDevice::trace, 0, 0, V8HMDVRDevice::preparePrototypeObject, V8HMDVRDevice::installConditionallyEnabledProperties, "HMDVRDevice", &V8VRDevice::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in HMDVRDevice.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& HMDVRDevice::s_wrapperTypeInfo = V8HMDVRDevice::wrapperTypeInfo;

namespace HMDVRDeviceV8Internal {

static void getEyeParametersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getEyeParameters", "HMDVRDevice", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    HMDVRDevice* impl = V8HMDVRDevice::toImpl(info.Holder());
    V8StringResource<> whichEye;
    {
        whichEye = info[0];
        if (!whichEye.prepare())
            return;
        static const char* validValues[] = {
            "left",
            "right",
        };
        if (!isValidEnum(whichEye, validValues, WTF_ARRAY_LENGTH(validValues), "VREye", exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    v8SetReturnValue(info, impl->getEyeParameters(whichEye));
}

static void getEyeParametersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    HMDVRDeviceV8Internal::getEyeParametersMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setFieldOfViewMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    HMDVRDevice* impl = V8HMDVRDevice::toImpl(info.Holder());
    VRFieldOfView* leftFov;
    VRFieldOfView* rightFov;
    {
        if (UNLIKELY(info.Length() <= 0)) {
            impl->setFieldOfView();
            return;
        }
        leftFov = V8VRFieldOfView::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!leftFov) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setFieldOfView", "HMDVRDevice", "parameter 1 is not of type 'VRFieldOfView'."));
            return;
        }
        if (UNLIKELY(info.Length() <= 1)) {
            impl->setFieldOfView(leftFov);
            return;
        }
        rightFov = V8VRFieldOfView::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!rightFov) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setFieldOfView", "HMDVRDevice", "parameter 2 is not of type 'VRFieldOfView'."));
            return;
        }
    }
    impl->setFieldOfView(leftFov, rightFov);
}

static void setFieldOfViewMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    HMDVRDeviceV8Internal::setFieldOfViewMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace HMDVRDeviceV8Internal

static const V8DOMConfiguration::MethodConfiguration V8HMDVRDeviceMethods[] = {
    {"getEyeParameters", HMDVRDeviceV8Internal::getEyeParametersMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setFieldOfView", HMDVRDeviceV8Internal::setFieldOfViewMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8HMDVRDeviceTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::webVREnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "HMDVRDevice", V8VRDevice::domTemplate(isolate), V8HMDVRDevice::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "HMDVRDevice", V8VRDevice::domTemplate(isolate), V8HMDVRDevice::internalFieldCount,
            0, 0,
            0, 0,
            V8HMDVRDeviceMethods, WTF_ARRAY_LENGTH(V8HMDVRDeviceMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8HMDVRDevice::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8HMDVRDeviceTemplate);
}

bool V8HMDVRDevice::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8HMDVRDevice::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

HMDVRDevice* V8HMDVRDevice::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8HMDVRDevice::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8HMDVRDevice::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
