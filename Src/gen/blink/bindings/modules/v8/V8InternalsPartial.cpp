// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InternalsPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8Internals.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "modules/accessibility/testing/InternalsAccessibility.h"
#include "modules/geolocation/testing/InternalsGeolocation.h"
#include "modules/navigatorcontentutils/testing/InternalsNavigatorContentUtils.h"
#include "modules/serviceworkers/testing/InternalsServiceWorker.h"
#include "modules/speech/testing/InternalsSpeechSynthesis.h"
#include "modules/vibration/testing/InternalsVibration.h"
#include "modules/webaudio/testing/InternalsWebAudio.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace InternalsPartialV8Internal {

static void numberOfLiveAXObjectsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, InternalsAccessibility::numberOfLiveAXObjects(*impl));
}

static void numberOfLiveAXObjectsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::numberOfLiveAXObjectsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setGeolocationClientMockMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setGeolocationClientMock", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setGeolocationClientMock", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    InternalsGeolocation::setGeolocationClientMock(*impl, document);
}

static void setGeolocationClientMockMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::setGeolocationClientMockMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setGeolocationPositionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setGeolocationPosition", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    double latitude;
    double longitude;
    double accuracy;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        latitude = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        longitude = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        accuracy = toRestrictedDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    InternalsGeolocation::setGeolocationPosition(*impl, document, latitude, longitude, accuracy);
}

static void setGeolocationPositionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::setGeolocationPositionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setGeolocationPositionUnavailableErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setGeolocationPositionUnavailableError", "Internals", 2, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    V8StringResource<> message;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setGeolocationPositionUnavailableError", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
        message = info[1];
        if (!message.prepare())
            return;
    }
    InternalsGeolocation::setGeolocationPositionUnavailableError(*impl, document, message);
}

static void setGeolocationPositionUnavailableErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::setGeolocationPositionUnavailableErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setGeolocationPermissionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setGeolocationPermission", "Internals", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    bool allowed;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Document'.");
            exceptionState.throwIfNeeded();
            return;
        }
        allowed = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    InternalsGeolocation::setGeolocationPermission(*impl, document, allowed);
}

static void setGeolocationPermissionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::setGeolocationPermissionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void numberOfPendingGeolocationPermissionRequestsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "numberOfPendingGeolocationPermissionRequests", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("numberOfPendingGeolocationPermissionRequests", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueInt(info, InternalsGeolocation::numberOfPendingGeolocationPermissionRequests(*impl, document));
}

static void numberOfPendingGeolocationPermissionRequestsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::numberOfPendingGeolocationPermissionRequestsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setNavigatorContentUtilsClientMockMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setNavigatorContentUtilsClientMock", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setNavigatorContentUtilsClientMock", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    InternalsNavigatorContentUtils::setNavigatorContentUtilsClientMock(*impl, document);
}

static void setNavigatorContentUtilsClientMockMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::setNavigatorContentUtilsClientMockMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void terminateServiceWorkerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "terminateServiceWorker", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    ServiceWorker* worker;
    {
        worker = V8ServiceWorker::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!worker) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("terminateServiceWorker", "Internals", "parameter 1 is not of type 'ServiceWorker'."));
            return;
        }
    }
    InternalsServiceWorker::terminateServiceWorker(*impl, worker);
}

static void terminateServiceWorkerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::terminateServiceWorkerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void enableMockSpeechSynthesizerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "enableMockSpeechSynthesizer", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("enableMockSpeechSynthesizer", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    InternalsSpeechSynthesis::enableMockSpeechSynthesizer(*impl, document);
}

static void enableMockSpeechSynthesizerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::enableMockSpeechSynthesizerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isVibratingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isVibrating", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isVibrating", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValueBool(info, InternalsVibration::isVibrating(*impl, document));
}

static void isVibratingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::isVibratingMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pendingVibrationPatternMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "pendingVibrationPattern", "Internals", 1, info.Length()), info.GetIsolate());
        return;
    }
    Internals* impl = V8Internals::toImpl(info.Holder());
    Document* document;
    {
        document = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!document) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("pendingVibrationPattern", "Internals", "parameter 1 is not of type 'Document'."));
            return;
        }
    }
    v8SetReturnValue(info, toV8(InternalsVibration::pendingVibrationPattern(*impl, document), info.Holder(), info.GetIsolate()));
}

static void pendingVibrationPatternMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::pendingVibrationPatternMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void audioHandlerCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Internals* impl = V8Internals::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, InternalsWebAudio::audioHandlerCount(*impl));
}

static void audioHandlerCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalsPartialV8Internal::audioHandlerCountMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace InternalsPartialV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InternalsMethods[] = {
    {"numberOfLiveAXObjects", InternalsPartialV8Internal::numberOfLiveAXObjectsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setGeolocationClientMock", InternalsPartialV8Internal::setGeolocationClientMockMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setGeolocationPosition", InternalsPartialV8Internal::setGeolocationPositionMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"setGeolocationPositionUnavailableError", InternalsPartialV8Internal::setGeolocationPositionUnavailableErrorMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setGeolocationPermission", InternalsPartialV8Internal::setGeolocationPermissionMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"numberOfPendingGeolocationPermissionRequests", InternalsPartialV8Internal::numberOfPendingGeolocationPermissionRequestsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setNavigatorContentUtilsClientMock", InternalsPartialV8Internal::setNavigatorContentUtilsClientMockMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"terminateServiceWorker", InternalsPartialV8Internal::terminateServiceWorkerMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"enableMockSpeechSynthesizer", InternalsPartialV8Internal::enableMockSpeechSynthesizerMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isVibrating", InternalsPartialV8Internal::isVibratingMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"pendingVibrationPattern", InternalsPartialV8Internal::pendingVibrationPatternMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"audioHandlerCount", InternalsPartialV8Internal::audioHandlerCountMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

void V8InternalsPartial::installV8InternalsTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    V8Internals::installV8InternalsTemplate(functionTemplate, isolate);

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "Internals", v8::Local<v8::FunctionTemplate>(), V8Internals::internalFieldCount,
        0, 0,
        0, 0,
        V8InternalsMethods, WTF_ARRAY_LENGTH(V8InternalsMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

void V8InternalsPartial::preparePrototypeObject(v8::Isolate* isolate, v8::Local<v8::Object> prototypeObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8Internals::preparePrototypeObject(isolate, prototypeObject, interfaceTemplate);
}

void V8InternalsPartial::initialize()
{
    // Should be invoked from initModules.
    V8Internals::updateWrapperTypeInfo(
        &V8InternalsPartial::installV8InternalsTemplate,
        &V8InternalsPartial::preparePrototypeObject);
}

} // namespace blink
