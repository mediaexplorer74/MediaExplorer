// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8ServicePortConnectEventInit.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8ExtendableEventInit.h"

namespace blink {

void V8ServicePortConnectEventInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ServicePortConnectEventInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8ExtendableEventInit::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> originValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "origin")).ToLocal(&originValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (originValue.IsEmpty() || originValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> origin = originValue;
            if (!origin.prepare(exceptionState))
                return;
            impl.setOrigin(origin);
        }
    }

    {
        v8::Local<v8::Value> targetURLValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "targetURL")).ToLocal(&targetURLValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (targetURLValue.IsEmpty() || targetURLValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> targetURL = targetURLValue;
            if (!targetURL.prepare(exceptionState))
                return;
            impl.setTargetURL(targetURL);
        }
    }

}

v8::Local<v8::Value> toV8(const ServicePortConnectEventInit& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8ExtendableEventInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    if (!toV8ServicePortConnectEventInit(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8ServicePortConnectEventInit(const ServicePortConnectEventInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasOrigin()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "origin"), v8String(isolate, impl.origin()))))
            return false;
    }

    if (impl.hasTargetURL()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "targetURL"), v8String(isolate, impl.targetURL()))))
            return false;
    }

    return true;
}

ServicePortConnectEventInit NativeValueTraits<ServicePortConnectEventInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ServicePortConnectEventInit impl;
    V8ServicePortConnectEventInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
