// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8StorageUsageCallback.h"

#include "bindings/core/v8/ScriptController.h"
#include "bindings/core/v8/V8Binding.h"
#include "core/dom/ExecutionContext.h"
#include "wtf/Assertions.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

V8StorageUsageCallback::V8StorageUsageCallback(v8::Local<v8::Function> callback, ScriptState* scriptState)
    : ActiveDOMCallback(scriptState->executionContext())
    , m_scriptState(scriptState)
{
    m_callback.set(scriptState->isolate(), callback);
}

V8StorageUsageCallback::~V8StorageUsageCallback()
{
}

DEFINE_TRACE(V8StorageUsageCallback)
{
    StorageUsageCallback::trace(visitor);
    ActiveDOMCallback::trace(visitor);
}

void V8StorageUsageCallback::handleEvent(unsigned long long currentUsageInBytes, unsigned long long currentQuotaInBytes)
{
    if (!canInvokeCallback())
        return;

    if (!m_scriptState->contextIsValid())
        return;

    ScriptState::Scope scope(m_scriptState.get());
    v8::Local<v8::Value> currentUsageInBytesHandle = v8::Number::New(m_scriptState->isolate(), static_cast<double>(currentUsageInBytes));
    if (currentUsageInBytesHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return;
    }
    v8::Local<v8::Value> currentQuotaInBytesHandle = v8::Number::New(m_scriptState->isolate(), static_cast<double>(currentQuotaInBytes));
    if (currentQuotaInBytesHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return;
    }
    v8::Local<v8::Value> argv[] = { currentUsageInBytesHandle, currentQuotaInBytesHandle };

    ScriptController::callFunction(m_scriptState->executionContext(), m_callback.newLocal(m_scriptState->isolate()), m_scriptState->context()->Global(), 2, argv, m_scriptState->isolate());
}

} // namespace blink
