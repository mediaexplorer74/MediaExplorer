// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8IDBKeyRange.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8IDBKeyRange.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8IDBKeyRange::wrapperTypeInfo = { gin::kEmbedderBlink, V8IDBKeyRange::domTemplate, V8IDBKeyRange::refObject, V8IDBKeyRange::derefObject, V8IDBKeyRange::trace, 0, 0, V8IDBKeyRange::preparePrototypeObject, V8IDBKeyRange::installConditionallyEnabledProperties, "IDBKeyRange", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in IDBKeyRange.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& IDBKeyRange::s_wrapperTypeInfo = V8IDBKeyRange::wrapperTypeInfo;

namespace IDBKeyRangeV8Internal {

static void lowerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toImpl(holder);
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    v8SetReturnValue(info, impl->lowerValue(scriptState).v8Value());
}

static void lowerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBKeyRangeV8Internal::lowerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void upperAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toImpl(holder);
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    v8SetReturnValue(info, impl->upperValue(scriptState).v8Value());
}

static void upperAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBKeyRangeV8Internal::upperAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void lowerOpenAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toImpl(holder);
    v8SetReturnValueBool(info, impl->lowerOpen());
}

static void lowerOpenAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBKeyRangeV8Internal::lowerOpenAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void upperOpenAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toImpl(holder);
    v8SetReturnValueBool(info, impl->upperOpen());
}

static void upperOpenAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBKeyRangeV8Internal::upperOpenAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onlyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "only", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    ScriptValue value;
    {
        value = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::only(executionContext, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release(), info.GetIsolate()->GetCurrentContext()->Global());
}

static void onlyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBKeyRangeV8Internal::onlyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void lowerBoundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lowerBound", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    ScriptValue bound;
    bool open;
    {
        bound = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            open = toBoolean(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            open = false;
        }
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::lowerBound(executionContext, bound, open, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release(), info.GetIsolate()->GetCurrentContext()->Global());
}

static void lowerBoundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBKeyRangeV8Internal::lowerBoundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void upperBoundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "upperBound", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    ScriptValue bound;
    bool open;
    {
        bound = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            open = toBoolean(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            open = false;
        }
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::upperBound(executionContext, bound, open, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release(), info.GetIsolate()->GetCurrentContext()->Global());
}

static void upperBoundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBKeyRangeV8Internal::upperBoundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void boundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bound", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    ScriptValue lower;
    ScriptValue upper;
    bool lowerOpen;
    bool upperOpen;
    {
        lower = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        upper = ScriptValue(ScriptState::current(info.GetIsolate()), info[1]);
        if (!info[2]->IsUndefined()) {
            lowerOpen = toBoolean(info.GetIsolate(), info[2], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            lowerOpen = false;
        }
        if (!info[3]->IsUndefined()) {
            upperOpen = toBoolean(info.GetIsolate(), info[3], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            upperOpen = false;
        }
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::bound(executionContext, lower, upper, lowerOpen, upperOpen, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release(), info.GetIsolate()->GetCurrentContext()->Global());
}

static void boundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBKeyRangeV8Internal::boundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace IDBKeyRangeV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8IDBKeyRangeAccessors[] = {
    {"lower", IDBKeyRangeV8Internal::lowerAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"upper", IDBKeyRangeV8Internal::upperAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"lowerOpen", IDBKeyRangeV8Internal::lowerOpenAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"upperOpen", IDBKeyRangeV8Internal::upperOpenAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8IDBKeyRangeTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "IDBKeyRange", v8::Local<v8::FunctionTemplate>(), V8IDBKeyRange::internalFieldCount,
        0, 0,
        V8IDBKeyRangeAccessors, WTF_ARRAY_LENGTH(V8IDBKeyRangeAccessors),
        0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    const V8DOMConfiguration::MethodConfiguration onlyMethodConfiguration = {
        "only", IDBKeyRangeV8Internal::onlyMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
    };
    V8DOMConfiguration::installMethod(isolate, functionTemplate, v8::Local<v8::Signature>(), v8::None, onlyMethodConfiguration);
    const V8DOMConfiguration::MethodConfiguration lowerBoundMethodConfiguration = {
        "lowerBound", IDBKeyRangeV8Internal::lowerBoundMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
    };
    V8DOMConfiguration::installMethod(isolate, functionTemplate, v8::Local<v8::Signature>(), v8::None, lowerBoundMethodConfiguration);
    const V8DOMConfiguration::MethodConfiguration upperBoundMethodConfiguration = {
        "upperBound", IDBKeyRangeV8Internal::upperBoundMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
    };
    V8DOMConfiguration::installMethod(isolate, functionTemplate, v8::Local<v8::Signature>(), v8::None, upperBoundMethodConfiguration);
    const V8DOMConfiguration::MethodConfiguration boundMethodConfiguration = {
        "bound", IDBKeyRangeV8Internal::boundMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
    };
    V8DOMConfiguration::installMethod(isolate, functionTemplate, v8::Local<v8::Signature>(), v8::None, boundMethodConfiguration);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8IDBKeyRange::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8IDBKeyRangeTemplate);
}

bool V8IDBKeyRange::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8IDBKeyRange::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

IDBKeyRange* V8IDBKeyRange::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8IDBKeyRange::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8IDBKeyRange::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
