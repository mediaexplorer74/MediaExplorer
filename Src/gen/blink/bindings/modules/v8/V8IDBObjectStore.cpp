// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8IDBObjectStore.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMStringList.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/UnionTypesModules.h"
#include "bindings/modules/v8/V8IDBIndex.h"
#include "bindings/modules/v8/V8IDBIndexParameters.h"
#include "bindings/modules/v8/V8IDBRequest.h"
#include "bindings/modules/v8/V8IDBTransaction.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8IDBObjectStore::wrapperTypeInfo = { gin::kEmbedderBlink, V8IDBObjectStore::domTemplate, V8IDBObjectStore::refObject, V8IDBObjectStore::derefObject, V8IDBObjectStore::trace, 0, 0, V8IDBObjectStore::preparePrototypeObject, V8IDBObjectStore::installConditionallyEnabledProperties, "IDBObjectStore", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in IDBObjectStore.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& IDBObjectStore::s_wrapperTypeInfo = V8IDBObjectStore::wrapperTypeInfo;

namespace IDBObjectStoreV8Internal {

static void nameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(holder);
    v8SetReturnValueString(info, impl->name(), info.GetIsolate());
}

static void nameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBObjectStoreV8Internal::nameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void keyPathAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(holder);
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    v8SetReturnValue(info, impl->keyPath(scriptState).v8Value());
}

static void keyPathAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBObjectStoreV8Internal::keyPathAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void indexNamesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(holder);
    RefPtrWillBeRawPtr<DOMStringList> cppValue(impl->indexNames());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "indexNames"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void indexNamesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::V8IDBObjectStore_IndexNames_AttributeGetter);
    IDBObjectStoreV8Internal::indexNamesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void transactionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(holder);
    RawPtr<IDBTransaction> cppValue(impl->transaction());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "transaction"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void transactionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBObjectStoreV8Internal::transactionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void autoIncrementAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(holder);
    v8SetReturnValueBool(info, impl->autoIncrement());
}

static void autoIncrementAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    IDBObjectStoreV8Internal::autoIncrementAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void putMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "put", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue value;
    ScriptValue key;
    {
        value = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        key = ScriptValue(ScriptState::current(info.GetIsolate()), info[1]);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->put(scriptState, value, key, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void putMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::putMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void addMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "add", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue value;
    ScriptValue key;
    {
        value = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        key = ScriptValue(ScriptState::current(info.GetIsolate()), info[1]);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->add(scriptState, value, key, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void addMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::addMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "delete", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue key;
    {
        key = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->deleteFunction(scriptState, key, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void deleteMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::deleteMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clear", "IDBObjectStore", info.Holder(), info.GetIsolate());
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->clear(scriptState, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void clearMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::clearMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "get", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue key;
    {
        key = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->get(scriptState, key, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::getMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getAllMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getAll", "IDBObjectStore", info.Holder(), info.GetIsolate());
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue range;
    unsigned maxCount;
    {
        range = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            maxCount = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            maxCount = 4294967295u;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->getAll(scriptState, range, maxCount, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getAllMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::getAllMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getAllKeysMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getAllKeys", "IDBObjectStore", info.Holder(), info.GetIsolate());
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue range;
    unsigned maxCount;
    {
        range = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            maxCount = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            maxCount = 4294967295u;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->getAllKeys(scriptState, range, maxCount, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getAllKeysMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::getAllKeysMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void countMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "count", "IDBObjectStore", info.Holder(), info.GetIsolate());
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue key;
    {
        key = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->count(scriptState, key, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void countMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::countMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void openCursorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "openCursor", "IDBObjectStore", info.Holder(), info.GetIsolate());
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue range;
    V8StringResource<> direction;
    {
        range = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            direction = info[1];
            if (!direction.prepare())
                return;
            static const char* validValues[] = {
                "next",
                "nextunique",
                "prev",
                "prevunique",
            };
            if (!isValidEnum(direction, validValues, WTF_ARRAY_LENGTH(validValues), "IDBCursorDirection", exceptionState)) {
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            direction = String("next");
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->openCursor(scriptState, range, direction, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void openCursorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::openCursorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void openKeyCursorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "openKeyCursor", "IDBObjectStore", info.Holder(), info.GetIsolate());
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    ScriptValue range;
    V8StringResource<> direction;
    {
        range = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);
        if (!info[1]->IsUndefined()) {
            direction = info[1];
            if (!direction.prepare())
                return;
            static const char* validValues[] = {
                "next",
                "nextunique",
                "prev",
                "prevunique",
            };
            if (!isValidEnum(direction, validValues, WTF_ARRAY_LENGTH(validValues), "IDBCursorDirection", exceptionState)) {
                exceptionState.throwIfNeeded();
                return;
            }
        } else {
            direction = String("next");
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBRequest> result = impl->openKeyCursor(scriptState, range, direction, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void openKeyCursorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::openKeyCursorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createIndexMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createIndex", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    V8StringResource<> name;
    StringOrStringSequence keyPath;
    IDBIndexParameters options;
    {
        name = info[0];
        if (!name.prepare())
            return;
        V8StringOrStringSequence::toImpl(info.GetIsolate(), info[1], keyPath, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('options') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        V8IDBIndexParameters::toImpl(info.GetIsolate(), info[2], options, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RawPtr<IDBIndex> result = impl->createIndex(scriptState, name, keyPath, options, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createIndexMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::createIndexMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void indexMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "index", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    V8StringResource<> name;
    {
        name = info[0];
        if (!name.prepare())
            return;
    }
    RawPtr<IDBIndex> result = impl->index(name, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void indexMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::indexMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteIndexMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "deleteIndex", "IDBObjectStore", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IDBObjectStore* impl = V8IDBObjectStore::toImpl(info.Holder());
    V8StringResource<> name;
    {
        name = info[0];
        if (!name.prepare())
            return;
    }
    impl->deleteIndex(name, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void deleteIndexMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IDBObjectStoreV8Internal::deleteIndexMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace IDBObjectStoreV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8IDBObjectStoreAccessors[] = {
    {"name", IDBObjectStoreV8Internal::nameAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"keyPath", IDBObjectStoreV8Internal::keyPathAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"indexNames", IDBObjectStoreV8Internal::indexNamesAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"transaction", IDBObjectStoreV8Internal::transactionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"autoIncrement", IDBObjectStoreV8Internal::autoIncrementAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8IDBObjectStoreMethods[] = {
    {"put", IDBObjectStoreV8Internal::putMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"add", IDBObjectStoreV8Internal::addMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"delete", IDBObjectStoreV8Internal::deleteMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clear", IDBObjectStoreV8Internal::clearMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"get", IDBObjectStoreV8Internal::getMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"count", IDBObjectStoreV8Internal::countMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"openCursor", IDBObjectStoreV8Internal::openCursorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"createIndex", IDBObjectStoreV8Internal::createIndexMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"index", IDBObjectStoreV8Internal::indexMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteIndex", IDBObjectStoreV8Internal::deleteIndexMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8IDBObjectStoreTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "IDBObjectStore", v8::Local<v8::FunctionTemplate>(), V8IDBObjectStore::internalFieldCount,
        0, 0,
        V8IDBObjectStoreAccessors, WTF_ARRAY_LENGTH(V8IDBObjectStoreAccessors),
        V8IDBObjectStoreMethods, WTF_ARRAY_LENGTH(V8IDBObjectStoreMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    if (RuntimeEnabledFeatures::indexedDBExperimentalEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getAllMethodConfiguration = {
            "getAll", IDBObjectStoreV8Internal::getAllMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, getAllMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::indexedDBExperimentalEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getAllKeysMethodConfiguration = {
            "getAllKeys", IDBObjectStoreV8Internal::getAllKeysMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, getAllKeysMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::indexedDBExperimentalEnabled()) {
        const V8DOMConfiguration::MethodConfiguration openKeyCursorMethodConfiguration = {
            "openKeyCursor", IDBObjectStoreV8Internal::openKeyCursorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, openKeyCursorMethodConfiguration);
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8IDBObjectStore::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8IDBObjectStoreTemplate);
}

bool V8IDBObjectStore::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8IDBObjectStore::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

IDBObjectStore* V8IDBObjectStore::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8IDBObjectStore::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8IDBObjectStore::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
