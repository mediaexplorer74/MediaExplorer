// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WebGLRenderingContext.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Float32Array.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8HTMLImageElement.h"
#include "bindings/core/v8/V8HTMLVideoElement.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8Int32Array.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8WebGLActiveInfo.h"
#include "bindings/modules/v8/V8WebGLBuffer.h"
#include "bindings/modules/v8/V8WebGLContextAttributes.h"
#include "bindings/modules/v8/V8WebGLFramebuffer.h"
#include "bindings/modules/v8/V8WebGLProgram.h"
#include "bindings/modules/v8/V8WebGLRenderbuffer.h"
#include "bindings/modules/v8/V8WebGLShader.h"
#include "bindings/modules/v8/V8WebGLShaderPrecisionFormat.h"
#include "bindings/modules/v8/V8WebGLTexture.h"
#include "bindings/modules/v8/V8WebGLUniformLocation.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8WebGLRenderingContext::wrapperTypeInfo = { gin::kEmbedderBlink, V8WebGLRenderingContext::domTemplate, V8WebGLRenderingContext::refObject, V8WebGLRenderingContext::derefObject, V8WebGLRenderingContext::trace, 0, V8WebGLRenderingContext::visitDOMWrapper, V8WebGLRenderingContext::preparePrototypeObject, V8WebGLRenderingContext::installConditionallyEnabledProperties, "WebGLRenderingContext", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in WebGLRenderingContext.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& WebGLRenderingContext::s_wrapperTypeInfo = V8WebGLRenderingContext::wrapperTypeInfo;

namespace WebGLRenderingContextV8Internal {

static void canvasAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->canvas()), impl);
}

static void canvasAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WebGLRenderingContextV8Internal::canvasAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void drawingBufferWidthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(holder);
    v8SetReturnValueInt(info, impl->drawingBufferWidth());
}

static void drawingBufferWidthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WebGLRenderingContextV8Internal::drawingBufferWidthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void drawingBufferHeightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(holder);
    v8SetReturnValueInt(info, impl->drawingBufferHeight());
}

static void drawingBufferHeightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WebGLRenderingContextV8Internal::drawingBufferHeightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void activeTextureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "activeTexture", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned texture;
    {
        texture = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->activeTexture(texture);
}

static void activeTextureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::activeTextureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void attachShaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "attachShader", "WebGLRenderingContext", 2, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    WebGLShader* shader;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("attachShader", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!shader && !isUndefinedOrNull(info[1])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("attachShader", "WebGLRenderingContext", "parameter 2 is not of type 'WebGLShader'."));
            return;
        }
    }
    impl->attachShader(program, shader);
}

static void attachShaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::attachShaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bindAttribLocationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bindAttribLocation", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    unsigned index;
    V8StringResource<> name;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLProgram'.");
            exceptionState.throwIfNeeded();
            return;
        }
        index = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        name = info[2];
        if (!name.prepare())
            return;
    }
    impl->bindAttribLocation(program, index, name);
}

static void bindAttribLocationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bindAttribLocationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bindBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bindBuffer", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    WebGLBuffer* buffer;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        buffer = V8WebGLBuffer::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!buffer && !isUndefinedOrNull(info[1])) {
            exceptionState.throwTypeError("parameter 2 is not of type 'WebGLBuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bindBuffer(target, buffer);
}

static void bindBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bindBufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bindFramebufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bindFramebuffer", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    WebGLFramebuffer* framebuffer;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        framebuffer = V8WebGLFramebuffer::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!framebuffer && !isUndefinedOrNull(info[1])) {
            exceptionState.throwTypeError("parameter 2 is not of type 'WebGLFramebuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bindFramebuffer(target, framebuffer);
}

static void bindFramebufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bindFramebufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bindRenderbufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bindRenderbuffer", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    WebGLRenderbuffer* renderbuffer;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        renderbuffer = V8WebGLRenderbuffer::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!renderbuffer && !isUndefinedOrNull(info[1])) {
            exceptionState.throwTypeError("parameter 2 is not of type 'WebGLRenderbuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bindRenderbuffer(target, renderbuffer);
}

static void bindRenderbufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bindRenderbufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bindTextureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bindTexture", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    WebGLTexture* texture;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        texture = V8WebGLTexture::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!texture && !isUndefinedOrNull(info[1])) {
            exceptionState.throwTypeError("parameter 2 is not of type 'WebGLTexture'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bindTexture(target, texture);
}

static void bindTextureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bindTextureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void blendColorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "blendColor", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float red;
    float green;
    float blue;
    float alpha;
    {
        red = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        green = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        blue = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        alpha = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->blendColor(red, green, blue, alpha);
}

static void blendColorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::blendColorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void blendEquationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "blendEquation", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mode;
    {
        mode = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->blendEquation(mode);
}

static void blendEquationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::blendEquationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void blendEquationSeparateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "blendEquationSeparate", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned modeRGB;
    unsigned modeAlpha;
    {
        modeRGB = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        modeAlpha = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->blendEquationSeparate(modeRGB, modeAlpha);
}

static void blendEquationSeparateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::blendEquationSeparateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void blendFuncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "blendFunc", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned sfactor;
    unsigned dfactor;
    {
        sfactor = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dfactor = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->blendFunc(sfactor, dfactor);
}

static void blendFuncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::blendFuncMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void blendFuncSeparateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "blendFuncSeparate", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned srcRGB;
    unsigned dstRGB;
    unsigned srcAlpha;
    unsigned dstAlpha;
    {
        srcRGB = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dstRGB = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        srcAlpha = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        dstAlpha = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void blendFuncSeparateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::blendFuncSeparateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bufferData1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    long long size;
    unsigned usage;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        size = toInt64(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        usage = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->bufferData(target, size, usage);
}

static void bufferData2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    DOMArrayBufferView* data;
    unsigned usage;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        data = info[1]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[1])) : 0;
        if (!data) {
            exceptionState.throwTypeError("parameter 2 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
        usage = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->bufferData(target, data, usage);
}

static void bufferData3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    DOMArrayBuffer* data;
    unsigned usage;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        data = info[1]->IsArrayBuffer() ? V8ArrayBuffer::toImpl(v8::Local<v8::ArrayBuffer>::Cast(info[1])) : 0;
        if (!data && !isUndefinedOrNull(info[1])) {
            exceptionState.throwTypeError("parameter 2 is not of type 'ArrayBuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
        usage = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->bufferData(target, data, usage);
}

static void bufferDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 3:
        if (isUndefinedOrNull(info[1])) {
            bufferData3Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[1], info.GetIsolate())) {
            bufferData2Method(info);
            return;
        }
        if (V8ArrayBuffer::hasInstance(info[1], info.GetIsolate())) {
            bufferData3Method(info);
            return;
        }
        if (true) {
            bufferData1Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 3) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void bufferDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bufferDataMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bufferSubData1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferSubData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    long long offset;
    DOMArrayBufferView* data;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        offset = toInt64(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        data = info[2]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[2])) : 0;
        if (!data) {
            exceptionState.throwTypeError("parameter 3 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bufferSubData(target, offset, data);
}

static void bufferSubData2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferSubData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    long long offset;
    DOMArrayBuffer* data;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        offset = toInt64(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        data = info[2]->IsArrayBuffer() ? V8ArrayBuffer::toImpl(v8::Local<v8::ArrayBuffer>::Cast(info[2])) : 0;
        if (!data && !isUndefinedOrNull(info[2])) {
            exceptionState.throwTypeError("parameter 3 is not of type 'ArrayBuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->bufferSubData(target, offset, data);
}

static void bufferSubDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bufferSubData", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 3:
        if (isUndefinedOrNull(info[2])) {
            bufferSubData2Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[2], info.GetIsolate())) {
            bufferSubData1Method(info);
            return;
        }
        if (V8ArrayBuffer::hasInstance(info[2], info.GetIsolate())) {
            bufferSubData2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 3) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void bufferSubDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::bufferSubDataMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void checkFramebufferStatusMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "checkFramebufferStatus", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueUnsigned(info, impl->checkFramebufferStatus(target));
}

static void checkFramebufferStatusMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::checkFramebufferStatusMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clear", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mask;
    {
        mask = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->clear(mask);
}

static void clearMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::clearMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearColorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearColor", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float red;
    float green;
    float blue;
    float alpha;
    {
        red = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        green = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        blue = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        alpha = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->clearColor(red, green, blue, alpha);
}

static void clearColorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::clearColorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearDepthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearDepth", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float depth;
    {
        depth = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->clearDepth(depth);
}

static void clearDepthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::clearDepthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clearStencilMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearStencil", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    int s;
    {
        s = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->clearStencil(s);
}

static void clearStencilMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::clearStencilMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void colorMaskMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "colorMask", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    bool red;
    bool green;
    bool blue;
    bool alpha;
    {
        red = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        green = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        blue = toBoolean(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        alpha = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->colorMask(red, green, blue, alpha);
}

static void colorMaskMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::colorMaskMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void compileShaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "compileShader", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("compileShader", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLShader'."));
            return;
        }
    }
    impl->compileShader(shader);
}

static void compileShaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::compileShaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void compressedTexImage2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "compressedTexImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        setMinimumArityTypeError(exceptionState, 7, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    int width;
    int height;
    int border;
    DOMArrayBufferView* data;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        border = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        data = info[6]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[6])) : 0;
        if (!data && !isUndefinedOrNull(info[6])) {
            exceptionState.throwTypeError("parameter 7 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->compressedTexImage2D(target, level, internalformat, width, height, border, data);
}

static void compressedTexImage2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::compressedTexImage2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void compressedTexSubImage2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "compressedTexSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 8)) {
        setMinimumArityTypeError(exceptionState, 8, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    int width;
    int height;
    unsigned format;
    DOMArrayBufferView* data;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        data = info[7]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[7])) : 0;
        if (!data && !isUndefinedOrNull(info[7])) {
            exceptionState.throwTypeError("parameter 8 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);
}

static void compressedTexSubImage2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::compressedTexSubImage2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void copyTexImage2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "copyTexImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 8)) {
        setMinimumArityTypeError(exceptionState, 8, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    int x;
    int y;
    int width;
    int height;
    int border;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        border = toInt32(info.GetIsolate(), info[7], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->copyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

static void copyTexImage2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::copyTexImage2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void copyTexSubImage2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "copyTexSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 8)) {
        setMinimumArityTypeError(exceptionState, 8, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    int x;
    int y;
    int width;
    int height;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[7], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

static void copyTexSubImage2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::copyTexSubImage2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createBuffer());
}

static void createBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::createBufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createFramebufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createFramebuffer());
}

static void createFramebufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::createFramebufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createProgramMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createProgram());
}

static void createProgramMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::createProgramMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createRenderbufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createRenderbuffer());
}

static void createRenderbufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::createRenderbufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createShaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createShader", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned type;
    {
        type = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->createShader(type));
}

static void createShaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::createShaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createTextureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createTexture());
}

static void createTextureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::createTextureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cullFaceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "cullFace", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mode;
    {
        mode = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->cullFace(mode);
}

static void cullFaceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::cullFaceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteBuffer", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLBuffer* buffer;
    {
        buffer = V8WebGLBuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!buffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteBuffer", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLBuffer'."));
            return;
        }
    }
    impl->deleteBuffer(buffer);
}

static void deleteBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::deleteBufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteFramebufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteFramebuffer", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLFramebuffer* framebuffer;
    {
        framebuffer = V8WebGLFramebuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!framebuffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteFramebuffer", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLFramebuffer'."));
            return;
        }
    }
    impl->deleteFramebuffer(framebuffer);
}

static void deleteFramebufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::deleteFramebufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteProgramMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteProgram", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteProgram", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    impl->deleteProgram(program);
}

static void deleteProgramMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::deleteProgramMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteRenderbufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteRenderbuffer", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLRenderbuffer* renderbuffer;
    {
        renderbuffer = V8WebGLRenderbuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!renderbuffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteRenderbuffer", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLRenderbuffer'."));
            return;
        }
    }
    impl->deleteRenderbuffer(renderbuffer);
}

static void deleteRenderbufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::deleteRenderbufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteShaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteShader", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteShader", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLShader'."));
            return;
        }
    }
    impl->deleteShader(shader);
}

static void deleteShaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::deleteShaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deleteTextureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "deleteTexture", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLTexture* texture;
    {
        texture = V8WebGLTexture::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!texture && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("deleteTexture", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLTexture'."));
            return;
        }
    }
    impl->deleteTexture(texture);
}

static void deleteTextureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::deleteTextureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void depthFuncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "depthFunc", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned func;
    {
        func = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->depthFunc(func);
}

static void depthFuncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::depthFuncMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void depthMaskMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "depthMask", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    bool flag;
    {
        flag = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->depthMask(flag);
}

static void depthMaskMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::depthMaskMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void depthRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "depthRange", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float zNear;
    float zFar;
    {
        zNear = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zFar = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->depthRange(zNear, zFar);
}

static void depthRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::depthRangeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void detachShaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "detachShader", "WebGLRenderingContext", 2, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    WebGLShader* shader;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("detachShader", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!shader && !isUndefinedOrNull(info[1])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("detachShader", "WebGLRenderingContext", "parameter 2 is not of type 'WebGLShader'."));
            return;
        }
    }
    impl->detachShader(program, shader);
}

static void detachShaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::detachShaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disableMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disable", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned cap;
    {
        cap = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->disable(cap);
}

static void disableMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::disableMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disableVertexAttribArrayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "disableVertexAttribArray", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned index;
    {
        index = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->disableVertexAttribArray(index);
}

static void disableVertexAttribArrayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::disableVertexAttribArrayMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void drawArraysMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawArrays", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mode;
    int first;
    int count;
    {
        mode = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        first = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        count = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->drawArrays(mode, first, count);
}

static void drawArraysMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::drawArraysMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void drawElementsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "drawElements", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mode;
    int count;
    unsigned type;
    long long offset;
    {
        mode = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        count = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        offset = toInt64(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->drawElements(mode, count, type, offset);
}

static void drawElementsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::drawElementsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void enableMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "enable", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned cap;
    {
        cap = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->enable(cap);
}

static void enableMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::enableMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void enableVertexAttribArrayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "enableVertexAttribArray", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned index;
    {
        index = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->enableVertexAttribArray(index);
}

static void enableVertexAttribArrayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::enableVertexAttribArrayMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void finishMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    impl->finish();
}

static void finishMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::finishMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void flushMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    impl->flush();
}

static void flushMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::flushMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void framebufferRenderbufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "framebufferRenderbuffer", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned attachment;
    unsigned renderbuffertarget;
    WebGLRenderbuffer* renderbuffer;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        attachment = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        renderbuffertarget = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        renderbuffer = V8WebGLRenderbuffer::toImplWithTypeCheck(info.GetIsolate(), info[3]);
        if (!renderbuffer && !isUndefinedOrNull(info[3])) {
            exceptionState.throwTypeError("parameter 4 is not of type 'WebGLRenderbuffer'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

static void framebufferRenderbufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::framebufferRenderbufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void framebufferTexture2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "framebufferTexture2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned attachment;
    unsigned textarget;
    WebGLTexture* texture;
    int level;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        attachment = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        textarget = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        texture = V8WebGLTexture::toImplWithTypeCheck(info.GetIsolate(), info[3]);
        if (!texture && !isUndefinedOrNull(info[3])) {
            exceptionState.throwTypeError("parameter 4 is not of type 'WebGLTexture'.");
            exceptionState.throwIfNeeded();
            return;
        }
        level = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->framebufferTexture2D(target, attachment, textarget, texture, level);
}

static void framebufferTexture2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::framebufferTexture2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void frontFaceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "frontFace", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mode;
    {
        mode = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->frontFace(mode);
}

static void frontFaceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::frontFaceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void generateMipmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "generateMipmap", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->generateMipmap(target);
}

static void generateMipmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::generateMipmapMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getActiveAttribMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getActiveAttrib", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    unsigned index;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLProgram'.");
            exceptionState.throwIfNeeded();
            return;
        }
        index = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->getActiveAttrib(program, index));
}

static void getActiveAttribMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getActiveAttribMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getActiveUniformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getActiveUniform", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    unsigned index;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLProgram'.");
            exceptionState.throwIfNeeded();
            return;
        }
        index = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->getActiveUniform(program, index));
}

static void getActiveUniformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getActiveUniformMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getAttachedShadersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getAttachedShaders", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getAttachedShaders", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    Nullable<WillBeHeapVector<RefPtrWillBeMember<WebGLShader>>> result = impl->getAttachedShaders(program);
    if (result.isNull())
        v8SetReturnValueNull(info);
    else
        v8SetReturnValue(info, toV8(result.get(), info.Holder(), info.GetIsolate()));
}

static void getAttachedShadersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getAttachedShadersMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getAttribLocationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getAttribLocation", "WebGLRenderingContext", 2, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    V8StringResource<> name;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getAttribLocation", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
        name = info[1];
        if (!name.prepare())
            return;
    }
    v8SetReturnValueInt(info, impl->getAttribLocation(program, name));
}

static void getAttribLocationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getAttribLocationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getBufferParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getBufferParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned pname;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getBufferParameter(scriptState, target, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getBufferParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getBufferParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getContextAttributesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    Nullable<WebGLContextAttributes> result;
    impl->getContextAttributes(result);
    if (result.isNull())
        v8SetReturnValueNull(info);
    else
        v8SetReturnValue(info, result.get());
}

static void getContextAttributesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getContextAttributesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getErrorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValueUnsigned(info, impl->getError());
}

static void getErrorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getErrorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getExtensionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getExtension", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    V8StringResource<> name;
    {
        name = info[0];
        if (!name.prepare())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getExtension(scriptState, name);
    v8SetReturnValue(info, result.v8Value());
}

static void getExtensionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getExtensionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getFramebufferAttachmentParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getFramebufferAttachmentParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned attachment;
    unsigned pname;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        attachment = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getFramebufferAttachmentParameter(scriptState, target, attachment, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getFramebufferAttachmentParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getFramebufferAttachmentParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned pname;
    {
        pname = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getParameter(scriptState, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getProgramParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getProgramParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    unsigned pname;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLProgram'.");
            exceptionState.throwIfNeeded();
            return;
        }
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getProgramParameter(scriptState, program, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getProgramParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getProgramParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getProgramInfoLogMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getProgramInfoLog", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getProgramInfoLog", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    v8SetReturnValueStringOrNull(info, impl->getProgramInfoLog(program), info.GetIsolate());
}

static void getProgramInfoLogMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getProgramInfoLogMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getRenderbufferParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getRenderbufferParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned pname;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getRenderbufferParameter(scriptState, target, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getRenderbufferParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getRenderbufferParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getShaderParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getShaderParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    unsigned pname;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLShader'.");
            exceptionState.throwIfNeeded();
            return;
        }
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getShaderParameter(scriptState, shader, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getShaderParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getShaderParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getShaderInfoLogMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getShaderInfoLog", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getShaderInfoLog", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLShader'."));
            return;
        }
    }
    v8SetReturnValueStringOrNull(info, impl->getShaderInfoLog(shader), info.GetIsolate());
}

static void getShaderInfoLogMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getShaderInfoLogMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getShaderPrecisionFormatMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getShaderPrecisionFormat", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned shadertype;
    unsigned precisiontype;
    {
        shadertype = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        precisiontype = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, impl->getShaderPrecisionFormat(shadertype, precisiontype));
}

static void getShaderPrecisionFormatMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getShaderPrecisionFormatMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getShaderSourceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getShaderSource", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getShaderSource", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLShader'."));
            return;
        }
    }
    v8SetReturnValueStringOrNull(info, impl->getShaderSource(shader), info.GetIsolate());
}

static void getShaderSourceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getShaderSourceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getSupportedExtensionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    Nullable<Vector<String>> result = impl->getSupportedExtensions();
    if (result.isNull())
        v8SetReturnValueNull(info);
    else
        v8SetReturnValue(info, toV8(result.get(), info.Holder(), info.GetIsolate()));
}

static void getSupportedExtensionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getSupportedExtensionsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getTexParameterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getTexParameter", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned pname;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getTexParameter(scriptState, target, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getTexParameterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getTexParameterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getUniformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getUniform", "WebGLRenderingContext", 2, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    WebGLUniformLocation* location;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getUniform", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!location && !isUndefinedOrNull(info[1])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getUniform", "WebGLRenderingContext", "parameter 2 is not of type 'WebGLUniformLocation'."));
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getUniform(scriptState, program, location);
    v8SetReturnValue(info, result.v8Value());
}

static void getUniformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getUniformMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getUniformLocationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "getUniformLocation", "WebGLRenderingContext", 2, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    V8StringResource<> name;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getUniformLocation", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
        name = info[1];
        if (!name.prepare())
            return;
    }
    v8SetReturnValue(info, impl->getUniformLocation(program, name));
}

static void getUniformLocationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getUniformLocationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getVertexAttribMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getVertexAttrib", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned index;
    unsigned pname;
    {
        index = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptValue result = impl->getVertexAttrib(scriptState, index, pname);
    v8SetReturnValue(info, result.v8Value());
}

static void getVertexAttribMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getVertexAttribMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getVertexAttribOffsetMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getVertexAttribOffset", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned index;
    unsigned pname;
    {
        index = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValue(info, static_cast<double>(impl->getVertexAttribOffset(index, pname)));
}

static void getVertexAttribOffsetMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::getVertexAttribOffsetMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void hintMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "hint", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned mode;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        mode = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->hint(target, mode);
}

static void hintMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::hintMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isBuffer", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLBuffer* buffer;
    {
        buffer = V8WebGLBuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!buffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isBuffer", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLBuffer'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isBuffer(buffer));
}

static void isBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isBufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isContextLostMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    v8SetReturnValueBool(info, impl->isContextLost());
}

static void isContextLostMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isContextLostMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isEnabled", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned cap;
    {
        cap = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueBool(info, impl->isEnabled(cap));
}

static void isEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isFramebufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isFramebuffer", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLFramebuffer* framebuffer;
    {
        framebuffer = V8WebGLFramebuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!framebuffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isFramebuffer", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLFramebuffer'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isFramebuffer(framebuffer));
}

static void isFramebufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isFramebufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isProgramMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isProgram", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isProgram", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isProgram(program));
}

static void isProgramMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isProgramMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isRenderbufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isRenderbuffer", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLRenderbuffer* renderbuffer;
    {
        renderbuffer = V8WebGLRenderbuffer::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!renderbuffer && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isRenderbuffer", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLRenderbuffer'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isRenderbuffer(renderbuffer));
}

static void isRenderbufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isRenderbufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isShaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isShader", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isShader", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLShader'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isShader(shader));
}

static void isShaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isShaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void isTextureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isTexture", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLTexture* texture;
    {
        texture = V8WebGLTexture::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!texture && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isTexture", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLTexture'."));
            return;
        }
    }
    v8SetReturnValueBool(info, impl->isTexture(texture));
}

static void isTextureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::isTextureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void lineWidthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lineWidth", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float width;
    {
        width = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->lineWidth(width);
}

static void lineWidthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::lineWidthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void linkProgramMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "linkProgram", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("linkProgram", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    impl->linkProgram(program);
}

static void linkProgramMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::linkProgramMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pixelStoreiMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "pixelStorei", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned pname;
    int param;
    {
        pname = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        param = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->pixelStorei(pname, param);
}

static void pixelStoreiMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::pixelStoreiMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void polygonOffsetMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "polygonOffset", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float factor;
    float units;
    {
        factor = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        units = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->polygonOffset(factor, units);
}

static void polygonOffsetMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::polygonOffsetMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void readPixelsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "readPixels", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        setMinimumArityTypeError(exceptionState, 7, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    unsigned format;
    unsigned type;
    DOMArrayBufferView* pixels;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pixels = info[6]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[6])) : 0;
        if (!pixels && !isUndefinedOrNull(info[6])) {
            exceptionState.throwTypeError("parameter 7 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->readPixels(x, y, width, height, format, type, pixels);
}

static void readPixelsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::readPixelsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void renderbufferStorageMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "renderbufferStorage", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned internalformat;
    int width;
    int height;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->renderbufferStorage(target, internalformat, width, height);
}

static void renderbufferStorageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::renderbufferStorageMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sampleCoverageMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sampleCoverage", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    float value;
    bool invert;
    {
        value = toFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        invert = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->sampleCoverage(value, invert);
}

static void sampleCoverageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::sampleCoverageMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scissorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scissor", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->scissor(x, y, width, height);
}

static void scissorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::scissorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void shaderSourceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "shaderSource", "WebGLRenderingContext", 2, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLShader* shader;
    V8StringResource<> string;
    {
        shader = V8WebGLShader::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!shader && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("shaderSource", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLShader'."));
            return;
        }
        string = info[1];
        if (!string.prepare())
            return;
    }
    impl->shaderSource(shader, string);
}

static void shaderSourceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::shaderSourceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stencilFuncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stencilFunc", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned func;
    int ref;
    unsigned mask;
    {
        func = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        ref = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        mask = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->stencilFunc(func, ref, mask);
}

static void stencilFuncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::stencilFuncMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stencilFuncSeparateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stencilFuncSeparate", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned face;
    unsigned func;
    int ref;
    unsigned mask;
    {
        face = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        func = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        ref = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        mask = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->stencilFuncSeparate(face, func, ref, mask);
}

static void stencilFuncSeparateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::stencilFuncSeparateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stencilMaskMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stencilMask", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned mask;
    {
        mask = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->stencilMask(mask);
}

static void stencilMaskMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::stencilMaskMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stencilMaskSeparateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stencilMaskSeparate", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned face;
    unsigned mask;
    {
        face = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        mask = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->stencilMaskSeparate(face, mask);
}

static void stencilMaskSeparateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::stencilMaskSeparateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stencilOpMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stencilOp", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned fail;
    unsigned zfail;
    unsigned zpass;
    {
        fail = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zfail = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zpass = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->stencilOp(fail, zfail, zpass);
}

static void stencilOpMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::stencilOpMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stencilOpSeparateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stencilOpSeparate", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned face;
    unsigned fail;
    unsigned zfail;
    unsigned zpass;
    {
        face = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        fail = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zfail = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zpass = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->stencilOpSeparate(face, fail, zfail, zpass);
}

static void stencilOpSeparateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::stencilOpSeparateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void texParameterfMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texParameterf", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned pname;
    float param;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        param = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->texParameterf(target, pname, param);
}

static void texParameterfMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::texParameterfMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void texParameteriMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texParameteri", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    unsigned pname;
    int param;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pname = toUInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        param = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->texParameteri(target, pname, param);
}

static void texParameteriMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::texParameteriMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void texImage2D1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    int width;
    int height;
    int border;
    unsigned format;
    unsigned type;
    DOMArrayBufferView* pixels;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        border = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[7], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pixels = info[8]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[8])) : 0;
        if (!pixels && !isUndefinedOrNull(info[8])) {
            exceptionState.throwTypeError("parameter 9 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texImage2D(target, level, internalformat, width, height, border, format, type, pixels, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texImage2D2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    unsigned format;
    unsigned type;
    ImageData* pixels;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pixels = V8ImageData::toImplWithTypeCheck(info.GetIsolate(), info[5]);
        if (!pixels && !isUndefinedOrNull(info[5])) {
            exceptionState.throwTypeError("parameter 6 is not of type 'ImageData'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texImage2D(target, level, internalformat, format, type, pixels, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texImage2D3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    unsigned format;
    unsigned type;
    HTMLImageElement* image;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        image = V8HTMLImageElement::toImplWithTypeCheck(info.GetIsolate(), info[5]);
        if (!image) {
            exceptionState.throwTypeError("parameter 6 is not of type 'HTMLImageElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texImage2D(target, level, internalformat, format, type, image, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texImage2D4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    unsigned format;
    unsigned type;
    HTMLCanvasElement* canvas;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        canvas = V8HTMLCanvasElement::toImplWithTypeCheck(info.GetIsolate(), info[5]);
        if (!canvas) {
            exceptionState.throwTypeError("parameter 6 is not of type 'HTMLCanvasElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texImage2D(target, level, internalformat, format, type, canvas, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texImage2D5Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    unsigned internalformat;
    unsigned format;
    unsigned type;
    HTMLVideoElement* video;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        internalformat = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        video = V8HTMLVideoElement::toImplWithTypeCheck(info.GetIsolate(), info[5]);
        if (!video) {
            exceptionState.throwTypeError("parameter 6 is not of type 'HTMLVideoElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texImage2D(target, level, internalformat, format, type, video, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texImage2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(9, info.Length())) {
    case 6:
        if (isUndefinedOrNull(info[5])) {
            texImage2D2Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[5], info.GetIsolate())) {
            texImage2D2Method(info);
            return;
        }
        if (V8HTMLImageElement::hasInstance(info[5], info.GetIsolate())) {
            texImage2D3Method(info);
            return;
        }
        if (V8HTMLCanvasElement::hasInstance(info[5], info.GetIsolate())) {
            texImage2D4Method(info);
            return;
        }
        if (V8HTMLVideoElement::hasInstance(info[5], info.GetIsolate())) {
            texImage2D5Method(info);
            return;
        }
        break;
    case 9:
        if (true) {
            texImage2D1Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 6) {
            setArityTypeError(exceptionState, "[6, 9]", info.Length());
            exceptionState.throwIfNeeded();
            return;
        }
        break;
    }
    if (info.Length() < 6) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(6, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void texImage2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::texImage2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void texSubImage2D1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    int width;
    int height;
    unsigned format;
    unsigned type;
    DOMArrayBufferView* pixels;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[6], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[7], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pixels = info[8]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[8])) : 0;
        if (!pixels && !isUndefinedOrNull(info[8])) {
            exceptionState.throwTypeError("parameter 9 is not of type 'ArrayBufferView'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texSubImage2D2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    unsigned format;
    unsigned type;
    ImageData* pixels;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        pixels = V8ImageData::toImplWithTypeCheck(info.GetIsolate(), info[6]);
        if (!pixels && !isUndefinedOrNull(info[6])) {
            exceptionState.throwTypeError("parameter 7 is not of type 'ImageData'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texSubImage2D(target, level, xoffset, yoffset, format, type, pixels, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texSubImage2D3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    unsigned format;
    unsigned type;
    HTMLImageElement* image;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        image = V8HTMLImageElement::toImplWithTypeCheck(info.GetIsolate(), info[6]);
        if (!image) {
            exceptionState.throwTypeError("parameter 7 is not of type 'HTMLImageElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texSubImage2D(target, level, xoffset, yoffset, format, type, image, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texSubImage2D4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    unsigned format;
    unsigned type;
    HTMLCanvasElement* canvas;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        canvas = V8HTMLCanvasElement::toImplWithTypeCheck(info.GetIsolate(), info[6]);
        if (!canvas) {
            exceptionState.throwTypeError("parameter 7 is not of type 'HTMLCanvasElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texSubImage2D(target, level, xoffset, yoffset, format, type, canvas, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texSubImage2D5Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned target;
    int level;
    int xoffset;
    int yoffset;
    unsigned format;
    unsigned type;
    HTMLVideoElement* video;
    {
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        level = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        xoffset = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        yoffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        format = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        video = V8HTMLVideoElement::toImplWithTypeCheck(info.GetIsolate(), info[6]);
        if (!video) {
            exceptionState.throwTypeError("parameter 7 is not of type 'HTMLVideoElement'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->texSubImage2D(target, level, xoffset, yoffset, format, type, video, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void texSubImage2DMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "texSubImage2D", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(9, info.Length())) {
    case 7:
        if (isUndefinedOrNull(info[6])) {
            texSubImage2D2Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[6], info.GetIsolate())) {
            texSubImage2D2Method(info);
            return;
        }
        if (V8HTMLImageElement::hasInstance(info[6], info.GetIsolate())) {
            texSubImage2D3Method(info);
            return;
        }
        if (V8HTMLCanvasElement::hasInstance(info[6], info.GetIsolate())) {
            texSubImage2D4Method(info);
            return;
        }
        if (V8HTMLVideoElement::hasInstance(info[6], info.GetIsolate())) {
            texSubImage2D5Method(info);
            return;
        }
        break;
    case 9:
        if (true) {
            texSubImage2D1Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 7) {
            setArityTypeError(exceptionState, "[7, 9]", info.Length());
            exceptionState.throwIfNeeded();
            return;
        }
        break;
    }
    if (info.Length() < 7) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(7, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void texSubImage2DMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::texSubImage2DMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform1fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform1f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    float x;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform1f(location, x);
}

static void uniform1fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform1fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform1fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMFloat32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform1fv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform1fv", "WebGLRenderingContext", "parameter 2 is not of type 'Float32Array'."));
            return;
        }
    }
    impl->uniform1fv(location, v);
}

static void uniform1fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform1fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<float> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform1fv(location, v);
}

static void uniform1fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform1fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform1fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform1fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform1fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform1fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform1iMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform1i", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    int x;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform1i(location, x);
}

static void uniform1iMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform1iMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform1iv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMInt32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform1iv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsInt32Array() ? V8Int32Array::toImpl(v8::Local<v8::Int32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform1iv", "WebGLRenderingContext", "parameter 2 is not of type 'Int32Array'."));
            return;
        }
    }
    impl->uniform1iv(location, v);
}

static void uniform1iv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform1iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<int> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<int>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform1iv(location, v);
}

static void uniform1ivMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform1iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Int32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform1iv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform1iv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform1ivMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform1ivMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform2fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform2f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    float x;
    float y;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform2f(location, x, y);
}

static void uniform2fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform2fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform2fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMFloat32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform2fv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform2fv", "WebGLRenderingContext", "parameter 2 is not of type 'Float32Array'."));
            return;
        }
    }
    impl->uniform2fv(location, v);
}

static void uniform2fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<float> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform2fv(location, v);
}

static void uniform2fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform2fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform2fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform2fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform2fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform2iMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform2i", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    int x;
    int y;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform2i(location, x, y);
}

static void uniform2iMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform2iMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform2iv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMInt32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform2iv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsInt32Array() ? V8Int32Array::toImpl(v8::Local<v8::Int32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform2iv", "WebGLRenderingContext", "parameter 2 is not of type 'Int32Array'."));
            return;
        }
    }
    impl->uniform2iv(location, v);
}

static void uniform2iv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform2iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<int> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<int>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform2iv(location, v);
}

static void uniform2ivMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform2iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Int32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform2iv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform2iv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform2ivMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform2ivMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform3fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform3f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    float x;
    float y;
    float z;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        z = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform3f(location, x, y, z);
}

static void uniform3fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform3fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform3fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMFloat32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform3fv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform3fv", "WebGLRenderingContext", "parameter 2 is not of type 'Float32Array'."));
            return;
        }
    }
    impl->uniform3fv(location, v);
}

static void uniform3fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<float> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform3fv(location, v);
}

static void uniform3fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform3fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform3fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform3fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform3fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform3iMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform3i", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    int x;
    int y;
    int z;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        z = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform3i(location, x, y, z);
}

static void uniform3iMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform3iMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform3iv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMInt32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform3iv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsInt32Array() ? V8Int32Array::toImpl(v8::Local<v8::Int32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform3iv", "WebGLRenderingContext", "parameter 2 is not of type 'Int32Array'."));
            return;
        }
    }
    impl->uniform3iv(location, v);
}

static void uniform3iv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform3iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<int> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<int>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform3iv(location, v);
}

static void uniform3ivMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform3iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Int32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform3iv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform3iv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform3ivMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform3ivMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform4fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform4f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    float x;
    float y;
    float z;
    float w;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        z = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        w = toFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform4f(location, x, y, z, w);
}

static void uniform4fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform4fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform4fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMFloat32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform4fv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform4fv", "WebGLRenderingContext", "parameter 2 is not of type 'Float32Array'."));
            return;
        }
    }
    impl->uniform4fv(location, v);
}

static void uniform4fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<float> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform4fv(location, v);
}

static void uniform4fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform4fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform4fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform4fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform4fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform4iMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform4i", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    int x;
    int y;
    int z;
    int w;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        z = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        w = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform4i(location, x, y, z, w);
}

static void uniform4iMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform4iMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniform4iv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    DOMInt32Array* v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform4iv", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLUniformLocation'."));
            return;
        }
        v = info[1]->IsInt32Array() ? V8Int32Array::toImpl(v8::Local<v8::Int32Array>::Cast(info[1])) : 0;
        if (!v) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("uniform4iv", "WebGLRenderingContext", "parameter 2 is not of type 'Int32Array'."));
            return;
        }
    }
    impl->uniform4iv(location, v);
}

static void uniform4iv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform4iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    Vector<int> v;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        v = toImplArray<Vector<int>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniform4iv(location, v);
}

static void uniform4ivMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniform4iv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Int32Array::hasInstance(info[1], info.GetIsolate())) {
            uniform4iv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            uniform4iv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniform4ivMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniform4ivMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniformMatrix2fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    bool transpose;
    DOMFloat32Array* array;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        transpose = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        array = info[2]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[2])) : 0;
        if (!array) {
            exceptionState.throwTypeError("parameter 3 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->uniformMatrix2fv(location, transpose, array);
}

static void uniformMatrix2fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    bool transpose;
    Vector<float> array;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        transpose = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        array = toImplArray<Vector<float>>(info[2], 3, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniformMatrix2fv(location, transpose, array);
}

static void uniformMatrix2fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 3:
        if (V8Float32Array::hasInstance(info[2], info.GetIsolate())) {
            uniformMatrix2fv1Method(info);
            return;
        }
        if (info[2]->IsArray()) {
            uniformMatrix2fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 3) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniformMatrix2fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniformMatrix2fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniformMatrix3fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    bool transpose;
    DOMFloat32Array* array;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        transpose = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        array = info[2]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[2])) : 0;
        if (!array) {
            exceptionState.throwTypeError("parameter 3 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->uniformMatrix3fv(location, transpose, array);
}

static void uniformMatrix3fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    bool transpose;
    Vector<float> array;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        transpose = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        array = toImplArray<Vector<float>>(info[2], 3, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniformMatrix3fv(location, transpose, array);
}

static void uniformMatrix3fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 3:
        if (V8Float32Array::hasInstance(info[2], info.GetIsolate())) {
            uniformMatrix3fv1Method(info);
            return;
        }
        if (info[2]->IsArray()) {
            uniformMatrix3fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 3) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniformMatrix3fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniformMatrix3fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void uniformMatrix4fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    bool transpose;
    DOMFloat32Array* array;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        transpose = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        array = info[2]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[2])) : 0;
        if (!array) {
            exceptionState.throwTypeError("parameter 3 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->uniformMatrix4fv(location, transpose, array);
}

static void uniformMatrix4fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLUniformLocation* location;
    bool transpose;
    Vector<float> array;
    {
        location = V8WebGLUniformLocation::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!location && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'WebGLUniformLocation'.");
            exceptionState.throwIfNeeded();
            return;
        }
        transpose = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        array = toImplArray<Vector<float>>(info[2], 3, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->uniformMatrix4fv(location, transpose, array);
}

static void uniformMatrix4fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "uniformMatrix4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(3, info.Length())) {
    case 3:
        if (V8Float32Array::hasInstance(info[2], info.GetIsolate())) {
            uniformMatrix4fv1Method(info);
            return;
        }
        if (info[2]->IsArray()) {
            uniformMatrix4fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 3) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void uniformMatrix4fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::uniformMatrix4fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void useProgramMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "useProgram", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("useProgram", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    impl->useProgram(program);
}

static void useProgramMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::useProgramMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void validateProgramMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "validateProgram", "WebGLRenderingContext", 1, info.Length()), info.GetIsolate());
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    WebGLProgram* program;
    {
        program = V8WebGLProgram::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!program && !isUndefinedOrNull(info[0])) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("validateProgram", "WebGLRenderingContext", "parameter 1 is not of type 'WebGLProgram'."));
            return;
        }
    }
    impl->validateProgram(program);
}

static void validateProgramMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::validateProgramMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib1fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib1f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    float x;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib1f(indx, x);
}

static void vertexAttrib1fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib1fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib1fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib1fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    DOMFloat32Array* values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!values) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->vertexAttrib1fv(indx, values);
}

static void vertexAttrib1fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib1fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    Vector<float> values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib1fv(indx, values);
}

static void vertexAttrib1fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib1fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            vertexAttrib1fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            vertexAttrib1fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void vertexAttrib1fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib1fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib2fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib2f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    float x;
    float y;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib2f(indx, x, y);
}

static void vertexAttrib2fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib2fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib2fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    DOMFloat32Array* values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!values) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->vertexAttrib2fv(indx, values);
}

static void vertexAttrib2fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    Vector<float> values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib2fv(indx, values);
}

static void vertexAttrib2fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib2fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            vertexAttrib2fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            vertexAttrib2fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void vertexAttrib2fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib2fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib3fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib3f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    float x;
    float y;
    float z;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        z = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib3f(indx, x, y, z);
}

static void vertexAttrib3fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib3fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib3fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    DOMFloat32Array* values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!values) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->vertexAttrib3fv(indx, values);
}

static void vertexAttrib3fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    Vector<float> values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib3fv(indx, values);
}

static void vertexAttrib3fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib3fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            vertexAttrib3fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            vertexAttrib3fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void vertexAttrib3fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib3fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib4fMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib4f", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        setMinimumArityTypeError(exceptionState, 5, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    float x;
    float y;
    float z;
    float w;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x = toFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        z = toFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        w = toFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib4f(indx, x, y, z, w);
}

static void vertexAttrib4fMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib4fMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttrib4fv1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    DOMFloat32Array* values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!values) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->vertexAttrib4fv(indx, values);
}

static void vertexAttrib4fv2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    Vector<float> values;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        values = toImplArray<Vector<float>>(info[1], 2, info.GetIsolate(), exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttrib4fv(indx, values);
}

static void vertexAttrib4fvMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttrib4fv", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8Float32Array::hasInstance(info[1], info.GetIsolate())) {
            vertexAttrib4fv1Method(info);
            return;
        }
        if (info[1]->IsArray()) {
            vertexAttrib4fv2Method(info);
            return;
        }
        break;
    default:
        break;
    }
    if (info.Length() < 2) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
    return;
}

static void vertexAttrib4fvMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttrib4fvMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void vertexAttribPointerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vertexAttribPointer", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    unsigned indx;
    int size;
    unsigned type;
    bool normalized;
    int stride;
    long long offset;
    {
        indx = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        size = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        type = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        normalized = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        stride = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        offset = toInt64(info.GetIsolate(), info[5], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->vertexAttribPointer(indx, size, type, normalized, stride, offset);
}

static void vertexAttribPointerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::vertexAttribPointerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void viewportMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "viewport", "WebGLRenderingContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WebGLRenderingContext* impl = V8WebGLRenderingContext::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->viewport(x, y, width, height);
}

static void viewportMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WebGLRenderingContextV8Internal::viewportMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace WebGLRenderingContextV8Internal

void V8WebGLRenderingContext::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    WebGLRenderingContext* impl = scriptWrappable->toImpl<WebGLRenderingContext>();
    // The canvas() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->canvas())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

static const V8DOMConfiguration::AccessorConfiguration V8WebGLRenderingContextAccessors[] = {
    {"canvas", WebGLRenderingContextV8Internal::canvasAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"drawingBufferWidth", WebGLRenderingContextV8Internal::drawingBufferWidthAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"drawingBufferHeight", WebGLRenderingContextV8Internal::drawingBufferHeightAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8WebGLRenderingContextMethods[] = {
    {"activeTexture", WebGLRenderingContextV8Internal::activeTextureMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"attachShader", WebGLRenderingContextV8Internal::attachShaderMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"bindAttribLocation", WebGLRenderingContextV8Internal::bindAttribLocationMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"bindBuffer", WebGLRenderingContextV8Internal::bindBufferMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"bindFramebuffer", WebGLRenderingContextV8Internal::bindFramebufferMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"bindRenderbuffer", WebGLRenderingContextV8Internal::bindRenderbufferMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"bindTexture", WebGLRenderingContextV8Internal::bindTextureMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"blendColor", WebGLRenderingContextV8Internal::blendColorMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"blendEquation", WebGLRenderingContextV8Internal::blendEquationMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"blendEquationSeparate", WebGLRenderingContextV8Internal::blendEquationSeparateMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"blendFunc", WebGLRenderingContextV8Internal::blendFuncMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"blendFuncSeparate", WebGLRenderingContextV8Internal::blendFuncSeparateMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"bufferData", WebGLRenderingContextV8Internal::bufferDataMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"bufferSubData", WebGLRenderingContextV8Internal::bufferSubDataMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"checkFramebufferStatus", WebGLRenderingContextV8Internal::checkFramebufferStatusMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clear", WebGLRenderingContextV8Internal::clearMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clearColor", WebGLRenderingContextV8Internal::clearColorMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"clearDepth", WebGLRenderingContextV8Internal::clearDepthMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"clearStencil", WebGLRenderingContextV8Internal::clearStencilMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"colorMask", WebGLRenderingContextV8Internal::colorMaskMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"compileShader", WebGLRenderingContextV8Internal::compileShaderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"compressedTexImage2D", WebGLRenderingContextV8Internal::compressedTexImage2DMethodCallback, 0, 7, V8DOMConfiguration::ExposedToAllScripts},
    {"compressedTexSubImage2D", WebGLRenderingContextV8Internal::compressedTexSubImage2DMethodCallback, 0, 8, V8DOMConfiguration::ExposedToAllScripts},
    {"copyTexImage2D", WebGLRenderingContextV8Internal::copyTexImage2DMethodCallback, 0, 8, V8DOMConfiguration::ExposedToAllScripts},
    {"copyTexSubImage2D", WebGLRenderingContextV8Internal::copyTexSubImage2DMethodCallback, 0, 8, V8DOMConfiguration::ExposedToAllScripts},
    {"createBuffer", WebGLRenderingContextV8Internal::createBufferMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"createFramebuffer", WebGLRenderingContextV8Internal::createFramebufferMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"createProgram", WebGLRenderingContextV8Internal::createProgramMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"createRenderbuffer", WebGLRenderingContextV8Internal::createRenderbufferMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"createShader", WebGLRenderingContextV8Internal::createShaderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"createTexture", WebGLRenderingContextV8Internal::createTextureMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"cullFace", WebGLRenderingContextV8Internal::cullFaceMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteBuffer", WebGLRenderingContextV8Internal::deleteBufferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteFramebuffer", WebGLRenderingContextV8Internal::deleteFramebufferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteProgram", WebGLRenderingContextV8Internal::deleteProgramMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteRenderbuffer", WebGLRenderingContextV8Internal::deleteRenderbufferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteShader", WebGLRenderingContextV8Internal::deleteShaderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"deleteTexture", WebGLRenderingContextV8Internal::deleteTextureMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"depthFunc", WebGLRenderingContextV8Internal::depthFuncMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"depthMask", WebGLRenderingContextV8Internal::depthMaskMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"depthRange", WebGLRenderingContextV8Internal::depthRangeMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"detachShader", WebGLRenderingContextV8Internal::detachShaderMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"disable", WebGLRenderingContextV8Internal::disableMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"disableVertexAttribArray", WebGLRenderingContextV8Internal::disableVertexAttribArrayMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"drawArrays", WebGLRenderingContextV8Internal::drawArraysMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"drawElements", WebGLRenderingContextV8Internal::drawElementsMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"enable", WebGLRenderingContextV8Internal::enableMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"enableVertexAttribArray", WebGLRenderingContextV8Internal::enableVertexAttribArrayMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"finish", WebGLRenderingContextV8Internal::finishMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"flush", WebGLRenderingContextV8Internal::flushMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"framebufferRenderbuffer", WebGLRenderingContextV8Internal::framebufferRenderbufferMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"framebufferTexture2D", WebGLRenderingContextV8Internal::framebufferTexture2DMethodCallback, 0, 5, V8DOMConfiguration::ExposedToAllScripts},
    {"frontFace", WebGLRenderingContextV8Internal::frontFaceMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"generateMipmap", WebGLRenderingContextV8Internal::generateMipmapMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getActiveAttrib", WebGLRenderingContextV8Internal::getActiveAttribMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getActiveUniform", WebGLRenderingContextV8Internal::getActiveUniformMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getAttachedShaders", WebGLRenderingContextV8Internal::getAttachedShadersMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getAttribLocation", WebGLRenderingContextV8Internal::getAttribLocationMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getBufferParameter", WebGLRenderingContextV8Internal::getBufferParameterMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getContextAttributes", WebGLRenderingContextV8Internal::getContextAttributesMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getError", WebGLRenderingContextV8Internal::getErrorMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getExtension", WebGLRenderingContextV8Internal::getExtensionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getFramebufferAttachmentParameter", WebGLRenderingContextV8Internal::getFramebufferAttachmentParameterMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"getParameter", WebGLRenderingContextV8Internal::getParameterMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getProgramParameter", WebGLRenderingContextV8Internal::getProgramParameterMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getProgramInfoLog", WebGLRenderingContextV8Internal::getProgramInfoLogMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getRenderbufferParameter", WebGLRenderingContextV8Internal::getRenderbufferParameterMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getShaderParameter", WebGLRenderingContextV8Internal::getShaderParameterMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getShaderInfoLog", WebGLRenderingContextV8Internal::getShaderInfoLogMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getShaderPrecisionFormat", WebGLRenderingContextV8Internal::getShaderPrecisionFormatMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getShaderSource", WebGLRenderingContextV8Internal::getShaderSourceMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getSupportedExtensions", WebGLRenderingContextV8Internal::getSupportedExtensionsMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getTexParameter", WebGLRenderingContextV8Internal::getTexParameterMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getUniform", WebGLRenderingContextV8Internal::getUniformMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getUniformLocation", WebGLRenderingContextV8Internal::getUniformLocationMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getVertexAttrib", WebGLRenderingContextV8Internal::getVertexAttribMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"getVertexAttribOffset", WebGLRenderingContextV8Internal::getVertexAttribOffsetMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"hint", WebGLRenderingContextV8Internal::hintMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"isBuffer", WebGLRenderingContextV8Internal::isBufferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isContextLost", WebGLRenderingContextV8Internal::isContextLostMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"isEnabled", WebGLRenderingContextV8Internal::isEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isFramebuffer", WebGLRenderingContextV8Internal::isFramebufferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isProgram", WebGLRenderingContextV8Internal::isProgramMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isRenderbuffer", WebGLRenderingContextV8Internal::isRenderbufferMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isShader", WebGLRenderingContextV8Internal::isShaderMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"isTexture", WebGLRenderingContextV8Internal::isTextureMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"lineWidth", WebGLRenderingContextV8Internal::lineWidthMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"linkProgram", WebGLRenderingContextV8Internal::linkProgramMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"pixelStorei", WebGLRenderingContextV8Internal::pixelStoreiMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"polygonOffset", WebGLRenderingContextV8Internal::polygonOffsetMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"readPixels", WebGLRenderingContextV8Internal::readPixelsMethodCallback, 0, 7, V8DOMConfiguration::ExposedToAllScripts},
    {"renderbufferStorage", WebGLRenderingContextV8Internal::renderbufferStorageMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"sampleCoverage", WebGLRenderingContextV8Internal::sampleCoverageMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"scissor", WebGLRenderingContextV8Internal::scissorMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"shaderSource", WebGLRenderingContextV8Internal::shaderSourceMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"stencilFunc", WebGLRenderingContextV8Internal::stencilFuncMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"stencilFuncSeparate", WebGLRenderingContextV8Internal::stencilFuncSeparateMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"stencilMask", WebGLRenderingContextV8Internal::stencilMaskMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"stencilMaskSeparate", WebGLRenderingContextV8Internal::stencilMaskSeparateMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"stencilOp", WebGLRenderingContextV8Internal::stencilOpMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"stencilOpSeparate", WebGLRenderingContextV8Internal::stencilOpSeparateMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"texParameterf", WebGLRenderingContextV8Internal::texParameterfMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"texParameteri", WebGLRenderingContextV8Internal::texParameteriMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"texImage2D", WebGLRenderingContextV8Internal::texImage2DMethodCallback, 0, 6, V8DOMConfiguration::ExposedToAllScripts},
    {"texSubImage2D", WebGLRenderingContextV8Internal::texSubImage2DMethodCallback, 0, 7, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform1f", WebGLRenderingContextV8Internal::uniform1fMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform1fv", WebGLRenderingContextV8Internal::uniform1fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform1i", WebGLRenderingContextV8Internal::uniform1iMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform1iv", WebGLRenderingContextV8Internal::uniform1ivMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform2f", WebGLRenderingContextV8Internal::uniform2fMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform2fv", WebGLRenderingContextV8Internal::uniform2fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform2i", WebGLRenderingContextV8Internal::uniform2iMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform2iv", WebGLRenderingContextV8Internal::uniform2ivMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform3f", WebGLRenderingContextV8Internal::uniform3fMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform3fv", WebGLRenderingContextV8Internal::uniform3fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform3i", WebGLRenderingContextV8Internal::uniform3iMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform3iv", WebGLRenderingContextV8Internal::uniform3ivMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform4f", WebGLRenderingContextV8Internal::uniform4fMethodCallback, 0, 5, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform4fv", WebGLRenderingContextV8Internal::uniform4fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform4i", WebGLRenderingContextV8Internal::uniform4iMethodCallback, 0, 5, V8DOMConfiguration::ExposedToAllScripts},
    {"uniform4iv", WebGLRenderingContextV8Internal::uniform4ivMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"uniformMatrix2fv", WebGLRenderingContextV8Internal::uniformMatrix2fvMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"uniformMatrix3fv", WebGLRenderingContextV8Internal::uniformMatrix3fvMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"uniformMatrix4fv", WebGLRenderingContextV8Internal::uniformMatrix4fvMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"useProgram", WebGLRenderingContextV8Internal::useProgramMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"validateProgram", WebGLRenderingContextV8Internal::validateProgramMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib1f", WebGLRenderingContextV8Internal::vertexAttrib1fMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib1fv", WebGLRenderingContextV8Internal::vertexAttrib1fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib2f", WebGLRenderingContextV8Internal::vertexAttrib2fMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib2fv", WebGLRenderingContextV8Internal::vertexAttrib2fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib3f", WebGLRenderingContextV8Internal::vertexAttrib3fMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib3fv", WebGLRenderingContextV8Internal::vertexAttrib3fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib4f", WebGLRenderingContextV8Internal::vertexAttrib4fMethodCallback, 0, 5, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttrib4fv", WebGLRenderingContextV8Internal::vertexAttrib4fvMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"vertexAttribPointer", WebGLRenderingContextV8Internal::vertexAttribPointerMethodCallback, 0, 6, V8DOMConfiguration::ExposedToAllScripts},
    {"viewport", WebGLRenderingContextV8Internal::viewportMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8WebGLRenderingContextTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "WebGLRenderingContext", v8::Local<v8::FunctionTemplate>(), V8WebGLRenderingContext::internalFieldCount,
        0, 0,
        V8WebGLRenderingContextAccessors, WTF_ARRAY_LENGTH(V8WebGLRenderingContextAccessors),
        V8WebGLRenderingContextMethods, WTF_ARRAY_LENGTH(V8WebGLRenderingContextMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8WebGLRenderingContextConstants[] = {
        {"DEPTH_BUFFER_BIT", 0x00000100, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BUFFER_BIT", 0x00000400, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_BUFFER_BIT", 0x00004000, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"POINTS", 0x0000, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINES", 0x0001, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINE_LOOP", 0x0002, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINE_STRIP", 0x0003, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TRIANGLES", 0x0004, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TRIANGLE_STRIP", 0x0005, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TRIANGLE_FAN", 0x0006, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ZERO", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SRC_COLOR", 0x0300, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE_MINUS_SRC_COLOR", 0x0301, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SRC_ALPHA", 0x0302, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE_MINUS_SRC_ALPHA", 0x0303, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DST_ALPHA", 0x0304, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE_MINUS_DST_ALPHA", 0x0305, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DST_COLOR", 0x0306, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE_MINUS_DST_COLOR", 0x0307, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SRC_ALPHA_SATURATE", 0x0308, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FUNC_ADD", 0x8006, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_EQUATION", 0x8009, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_EQUATION_RGB", 0x8009, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_EQUATION_ALPHA", 0x883D, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FUNC_SUBTRACT", 0x800A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FUNC_REVERSE_SUBTRACT", 0x800B, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_DST_RGB", 0x80C8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_SRC_RGB", 0x80C9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_DST_ALPHA", 0x80CA, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_SRC_ALPHA", 0x80CB, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CONSTANT_COLOR", 0x8001, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE_MINUS_CONSTANT_COLOR", 0x8002, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CONSTANT_ALPHA", 0x8003, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ONE_MINUS_CONSTANT_ALPHA", 0x8004, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND_COLOR", 0x8005, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ARRAY_BUFFER", 0x8892, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ELEMENT_ARRAY_BUFFER", 0x8893, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ARRAY_BUFFER_BINDING", 0x8894, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ELEMENT_ARRAY_BUFFER_BINDING", 0x8895, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STREAM_DRAW", 0x88E0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STATIC_DRAW", 0x88E4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DYNAMIC_DRAW", 0x88E8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BUFFER_SIZE", 0x8764, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BUFFER_USAGE", 0x8765, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CURRENT_VERTEX_ATTRIB", 0x8626, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRONT", 0x0404, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BACK", 0x0405, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRONT_AND_BACK", 0x0408, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_2D", 0x0DE1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CULL_FACE", 0x0B44, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLEND", 0x0BE2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DITHER", 0x0BD0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_TEST", 0x0B90, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_TEST", 0x0B71, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SCISSOR_TEST", 0x0C11, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"POLYGON_OFFSET_FILL", 0x8037, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLE_ALPHA_TO_COVERAGE", 0x809E, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLE_COVERAGE", 0x80A0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NO_ERROR", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INVALID_ENUM", 0x0500, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INVALID_VALUE", 0x0501, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INVALID_OPERATION", 0x0502, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"OUT_OF_MEMORY", 0x0505, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CW", 0x0900, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CCW", 0x0901, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINE_WIDTH", 0x0B21, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ALIASED_POINT_SIZE_RANGE", 0x846D, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ALIASED_LINE_WIDTH_RANGE", 0x846E, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CULL_FACE_MODE", 0x0B45, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRONT_FACE", 0x0B46, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_RANGE", 0x0B70, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_WRITEMASK", 0x0B72, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_CLEAR_VALUE", 0x0B73, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_FUNC", 0x0B74, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_CLEAR_VALUE", 0x0B91, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_FUNC", 0x0B92, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_FAIL", 0x0B94, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_PASS_DEPTH_FAIL", 0x0B95, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_PASS_DEPTH_PASS", 0x0B96, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_REF", 0x0B97, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_VALUE_MASK", 0x0B93, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_WRITEMASK", 0x0B98, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_FUNC", 0x8800, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_FAIL", 0x8801, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_PASS_DEPTH_FAIL", 0x8802, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_PASS_DEPTH_PASS", 0x8803, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_REF", 0x8CA3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_VALUE_MASK", 0x8CA4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BACK_WRITEMASK", 0x8CA5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VIEWPORT", 0x0BA2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SCISSOR_BOX", 0x0C10, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_CLEAR_VALUE", 0x0C22, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_WRITEMASK", 0x0C23, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNPACK_ALIGNMENT", 0x0CF5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"PACK_ALIGNMENT", 0x0D05, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_TEXTURE_SIZE", 0x0D33, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_VIEWPORT_DIMS", 0x0D3A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SUBPIXEL_BITS", 0x0D50, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RED_BITS", 0x0D52, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"GREEN_BITS", 0x0D53, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BLUE_BITS", 0x0D54, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ALPHA_BITS", 0x0D55, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_BITS", 0x0D56, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_BITS", 0x0D57, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"POLYGON_OFFSET_UNITS", 0x2A00, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"POLYGON_OFFSET_FACTOR", 0x8038, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_BINDING_2D", 0x8069, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLE_BUFFERS", 0x80A8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLES", 0x80A9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLE_COVERAGE_VALUE", 0x80AA, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLE_COVERAGE_INVERT", 0x80AB, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COMPRESSED_TEXTURE_FORMATS", 0x86A3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DONT_CARE", 0x1100, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FASTEST", 0x1101, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NICEST", 0x1102, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"GENERATE_MIPMAP_HINT", 0x8192, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BYTE", 0x1400, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNSIGNED_BYTE", 0x1401, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SHORT", 0x1402, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNSIGNED_SHORT", 0x1403, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INT", 0x1404, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNSIGNED_INT", 0x1405, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT", 0x1406, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_COMPONENT", 0x1902, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ALPHA", 0x1906, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RGB", 0x1907, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RGBA", 0x1908, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LUMINANCE", 0x1909, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LUMINANCE_ALPHA", 0x190A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNSIGNED_SHORT_4_4_4_4", 0x8033, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNSIGNED_SHORT_5_5_5_1", 0x8034, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNSIGNED_SHORT_5_6_5", 0x8363, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAGMENT_SHADER", 0x8B30, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_SHADER", 0x8B31, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_VERTEX_ATTRIBS", 0x8869, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_VERTEX_UNIFORM_VECTORS", 0x8DFB, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_VARYING_VECTORS", 0x8DFC, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_COMBINED_TEXTURE_IMAGE_UNITS", 0x8B4D, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_VERTEX_TEXTURE_IMAGE_UNITS", 0x8B4C, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_TEXTURE_IMAGE_UNITS", 0x8872, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_FRAGMENT_UNIFORM_VECTORS", 0x8DFD, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SHADER_TYPE", 0x8B4F, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DELETE_STATUS", 0x8B80, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINK_STATUS", 0x8B82, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VALIDATE_STATUS", 0x8B83, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ATTACHED_SHADERS", 0x8B85, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ACTIVE_UNIFORMS", 0x8B86, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ACTIVE_ATTRIBUTES", 0x8B89, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SHADING_LANGUAGE_VERSION", 0x8B8C, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CURRENT_PROGRAM", 0x8B8D, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NEVER", 0x0200, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LESS", 0x0201, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"EQUAL", 0x0202, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LEQUAL", 0x0203, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"GREATER", 0x0204, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NOTEQUAL", 0x0205, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"GEQUAL", 0x0206, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ALWAYS", 0x0207, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"KEEP", 0x1E00, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"REPLACE", 0x1E01, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INCR", 0x1E02, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DECR", 0x1E03, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INVERT", 0x150A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INCR_WRAP", 0x8507, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DECR_WRAP", 0x8508, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VENDOR", 0x1F00, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERER", 0x1F01, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERSION", 0x1F02, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NEAREST", 0x2600, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINEAR", 0x2601, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NEAREST_MIPMAP_NEAREST", 0x2700, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINEAR_MIPMAP_NEAREST", 0x2701, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NEAREST_MIPMAP_LINEAR", 0x2702, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LINEAR_MIPMAP_LINEAR", 0x2703, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_MAG_FILTER", 0x2800, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_MIN_FILTER", 0x2801, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_WRAP_S", 0x2802, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_WRAP_T", 0x2803, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE", 0x1702, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP", 0x8513, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_BINDING_CUBE_MAP", 0x8514, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP_POSITIVE_X", 0x8515, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP_NEGATIVE_X", 0x8516, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP_POSITIVE_Y", 0x8517, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP_NEGATIVE_Y", 0x8518, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP_POSITIVE_Z", 0x8519, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE_CUBE_MAP_NEGATIVE_Z", 0x851A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_CUBE_MAP_TEXTURE_SIZE", 0x851C, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE0", 0x84C0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE1", 0x84C1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE2", 0x84C2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE3", 0x84C3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE4", 0x84C4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE5", 0x84C5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE6", 0x84C6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE7", 0x84C7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE8", 0x84C8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE9", 0x84C9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE10", 0x84CA, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE11", 0x84CB, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE12", 0x84CC, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE13", 0x84CD, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE14", 0x84CE, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE15", 0x84CF, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE16", 0x84D0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE17", 0x84D1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE18", 0x84D2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE19", 0x84D3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE20", 0x84D4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE21", 0x84D5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE22", 0x84D6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE23", 0x84D7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE24", 0x84D8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE25", 0x84D9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE26", 0x84DA, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE27", 0x84DB, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE28", 0x84DC, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE29", 0x84DD, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE30", 0x84DE, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"TEXTURE31", 0x84DF, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"ACTIVE_TEXTURE", 0x84E0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"REPEAT", 0x2901, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CLAMP_TO_EDGE", 0x812F, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MIRRORED_REPEAT", 0x8370, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT_VEC2", 0x8B50, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT_VEC3", 0x8B51, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT_VEC4", 0x8B52, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INT_VEC2", 0x8B53, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INT_VEC3", 0x8B54, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INT_VEC4", 0x8B55, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BOOL", 0x8B56, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BOOL_VEC2", 0x8B57, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BOOL_VEC3", 0x8B58, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BOOL_VEC4", 0x8B59, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT_MAT2", 0x8B5A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT_MAT3", 0x8B5B, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FLOAT_MAT4", 0x8B5C, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLER_2D", 0x8B5E, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"SAMPLER_CUBE", 0x8B60, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_ENABLED", 0x8622, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_SIZE", 0x8623, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_STRIDE", 0x8624, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_TYPE", 0x8625, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_NORMALIZED", 0x886A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_POINTER", 0x8645, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", 0x889F, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"IMPLEMENTATION_COLOR_READ_TYPE", 0x8B9A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"IMPLEMENTATION_COLOR_READ_FORMAT", 0x8B9B, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COMPILE_STATUS", 0x8B81, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LOW_FLOAT", 0x8DF0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MEDIUM_FLOAT", 0x8DF1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"HIGH_FLOAT", 0x8DF2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"LOW_INT", 0x8DF3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MEDIUM_INT", 0x8DF4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"HIGH_INT", 0x8DF5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER", 0x8D40, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER", 0x8D41, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RGBA4", 0x8056, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RGB5_A1", 0x8057, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RGB565", 0x8D62, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_COMPONENT16", 0x81A5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_INDEX", 0x1901, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_INDEX8", 0x8D48, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_STENCIL", 0x84F9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_WIDTH", 0x8D42, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_HEIGHT", 0x8D43, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_INTERNAL_FORMAT", 0x8D44, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_RED_SIZE", 0x8D50, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_GREEN_SIZE", 0x8D51, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_BLUE_SIZE", 0x8D52, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_ALPHA_SIZE", 0x8D53, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_DEPTH_SIZE", 0x8D54, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_STENCIL_SIZE", 0x8D55, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", 0x8CD0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", 0x8CD1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", 0x8CD2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", 0x8CD3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"COLOR_ATTACHMENT0", 0x8CE0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_ATTACHMENT", 0x8D00, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"STENCIL_ATTACHMENT", 0x8D20, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"DEPTH_STENCIL_ATTACHMENT", 0x821A, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"NONE", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_COMPLETE", 0x8CD5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_INCOMPLETE_ATTACHMENT", 0x8CD6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", 0x8CD7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_INCOMPLETE_DIMENSIONS", 0x8CD9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_UNSUPPORTED", 0x8CDD, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"FRAMEBUFFER_BINDING", 0x8CA6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"RENDERBUFFER_BINDING", 0x8CA7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"MAX_RENDERBUFFER_SIZE", 0x84E8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"INVALID_FRAMEBUFFER_OPERATION", 0x0506, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNPACK_FLIP_Y_WEBGL", 0x9240, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNPACK_PREMULTIPLY_ALPHA_WEBGL", 0x9241, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"CONTEXT_LOST_WEBGL", 0x9242, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"UNPACK_COLORSPACE_CONVERSION_WEBGL", 0x9243, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
        {"BROWSER_DEFAULT_WEBGL", 0x9244, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedLong},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8WebGLRenderingContextConstants, WTF_ARRAY_LENGTH(V8WebGLRenderingContextConstants));

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8WebGLRenderingContext::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8WebGLRenderingContextTemplate);
}

bool V8WebGLRenderingContext::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WebGLRenderingContext::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WebGLRenderingContext* V8WebGLRenderingContext::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8WebGLRenderingContext::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<WebGLRenderingContext>()->ref();
#endif
}

void V8WebGLRenderingContext::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<WebGLRenderingContext>()->deref();
#endif
}

} // namespace blink
