// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CrossOriginConnectEvent.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8CrossOriginServiceWorkerClient.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8CrossOriginConnectEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8CrossOriginConnectEvent::domTemplate, V8CrossOriginConnectEvent::refObject, V8CrossOriginConnectEvent::derefObject, V8CrossOriginConnectEvent::trace, 0, 0, V8CrossOriginConnectEvent::preparePrototypeObject, V8CrossOriginConnectEvent::installConditionallyEnabledProperties, "CrossOriginConnectEvent", &V8Event::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CrossOriginConnectEvent.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CrossOriginConnectEvent::s_wrapperTypeInfo = V8CrossOriginConnectEvent::wrapperTypeInfo;

namespace CrossOriginConnectEventV8Internal {

static void clientAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    CrossOriginConnectEvent* impl = V8CrossOriginConnectEvent::toImpl(holder);
    RawPtr<CrossOriginServiceWorkerClient> cppValue(impl->client());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "client"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void clientAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    CrossOriginConnectEventV8Internal::clientAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void acceptConnectionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "acceptConnection", "CrossOriginConnectEvent", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    CrossOriginConnectEvent* impl = V8CrossOriginConnectEvent::toImpl(info.Holder());
    ScriptPromise shouldAccept;
    {
        shouldAccept = ScriptPromise::cast(ScriptState::current(info.GetIsolate()), info[0]);
        if (!shouldAccept.isUndefinedOrNull() && !shouldAccept.isObject()) {
            exceptionState.throwTypeError("parameter 1 ('shouldAccept') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    impl->acceptConnection(scriptState, shouldAccept, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void acceptConnectionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CrossOriginConnectEventV8Internal::acceptConnectionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace CrossOriginConnectEventV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8CrossOriginConnectEventAccessors[] = {
    {"client", CrossOriginConnectEventV8Internal::clientAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8CrossOriginConnectEventMethods[] = {
    {"acceptConnection", CrossOriginConnectEventV8Internal::acceptConnectionMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8CrossOriginConnectEventTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::navigatorConnectEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CrossOriginConnectEvent", V8Event::domTemplate(isolate), V8CrossOriginConnectEvent::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CrossOriginConnectEvent", V8Event::domTemplate(isolate), V8CrossOriginConnectEvent::internalFieldCount,
            0, 0,
            V8CrossOriginConnectEventAccessors, WTF_ARRAY_LENGTH(V8CrossOriginConnectEventAccessors),
            V8CrossOriginConnectEventMethods, WTF_ARRAY_LENGTH(V8CrossOriginConnectEventMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8CrossOriginConnectEvent::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8CrossOriginConnectEventTemplate);
}

bool V8CrossOriginConnectEvent::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8CrossOriginConnectEvent::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CrossOriginConnectEvent* V8CrossOriginConnectEvent::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8CrossOriginConnectEvent::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<CrossOriginConnectEvent>()->ref();
#endif
}

void V8CrossOriginConnectEvent::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<CrossOriginConnectEvent>()->deref();
#endif
}

} // namespace blink
