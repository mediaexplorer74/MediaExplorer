// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGPathElement.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGAnimatedNumber.h"
#include "bindings/core/v8/V8SVGPathSegArcAbs.h"
#include "bindings/core/v8/V8SVGPathSegArcRel.h"
#include "bindings/core/v8/V8SVGPathSegClosePath.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicRel.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicSmoothAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicSmoothRel.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticRel.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticSmoothAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticSmoothRel.h"
#include "bindings/core/v8/V8SVGPathSegLinetoAbs.h"
#include "bindings/core/v8/V8SVGPathSegLinetoHorizontalAbs.h"
#include "bindings/core/v8/V8SVGPathSegLinetoHorizontalRel.h"
#include "bindings/core/v8/V8SVGPathSegLinetoRel.h"
#include "bindings/core/v8/V8SVGPathSegLinetoVerticalAbs.h"
#include "bindings/core/v8/V8SVGPathSegLinetoVerticalRel.h"
#include "bindings/core/v8/V8SVGPathSegList.h"
#include "bindings/core/v8/V8SVGPathSegMovetoAbs.h"
#include "bindings/core/v8/V8SVGPathSegMovetoRel.h"
#include "bindings/core/v8/V8SVGPoint.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGPathElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGPathElement::domTemplate, V8SVGPathElement::refObject, V8SVGPathElement::derefObject, V8SVGPathElement::trace, 0, 0, V8SVGPathElement::preparePrototypeObject, V8SVGPathElement::installConditionallyEnabledProperties, "SVGPathElement", &V8SVGGeometryElement::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::NodeClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGPathElement.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGPathElement::s_wrapperTypeInfo = V8SVGPathElement::wrapperTypeInfo;

namespace SVGPathElementV8Internal {

static void pathLengthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathElement* impl = V8SVGPathElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->pathLength()), impl);
}

static void pathLengthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVG1DOM);
    SVGPathElementV8Internal::pathLengthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pathSegListAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathElement* impl = V8SVGPathElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->pathSegList()), impl);
}

static void pathSegListAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::pathSegListAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void animatedPathSegListAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathElement* impl = V8SVGPathElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->animatedPathSegList()), impl);
}

static void animatedPathSegListAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::animatedPathSegListAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void normalizedPathSegListAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathElement* impl = V8SVGPathElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->normalizedPathSegList()), impl);
}

static void normalizedPathSegListAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::normalizedPathSegListAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void animatedNormalizedPathSegListAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGPathElement* impl = V8SVGPathElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->animatedNormalizedPathSegList()), impl);
}

static void animatedNormalizedPathSegListAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::animatedNormalizedPathSegListAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getTotalLengthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    v8SetReturnValue(info, impl->getTotalLength());
}

static void getTotalLengthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SVGPathElementV8Internal::getTotalLengthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getPointAtLengthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getPointAtLength", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float distance;
    {
        distance = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->getPointAtLength(distance)), impl);
}

static void getPointAtLengthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SVGPathElementV8Internal::getPointAtLengthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getPathSegAtLengthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getPathSegAtLength", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float distance;
    {
        distance = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueUnsigned(info, impl->getPathSegAtLength(distance));
}

static void getPathSegAtLengthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SVGPathElementV8Internal::getPathSegAtLengthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegClosePathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegClosePath()), impl);
}

static void createSVGPathSegClosePathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegClosePathMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegMovetoAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegMovetoAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegMovetoAbs(x, y)), impl);
}

static void createSVGPathSegMovetoAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegMovetoAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegMovetoRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegMovetoRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegMovetoRel(x, y)), impl);
}

static void createSVGPathSegMovetoRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegMovetoRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegLinetoAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegLinetoAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegLinetoAbs(x, y)), impl);
}

static void createSVGPathSegLinetoAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegLinetoAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegLinetoRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegLinetoRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegLinetoRel(x, y)), impl);
}

static void createSVGPathSegLinetoRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegLinetoRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoCubicAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoCubicAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float x1;
    float y1;
    float x2;
    float y2;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x1 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x2 = toRestrictedFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y2 = toRestrictedFloat(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2)), impl);
}

static void createSVGPathSegCurvetoCubicAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoCubicAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoCubicRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoCubicRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 6)) {
        setMinimumArityTypeError(exceptionState, 6, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float x1;
    float y1;
    float x2;
    float y2;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x1 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x2 = toRestrictedFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y2 = toRestrictedFloat(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoCubicRel(x, y, x1, y1, x2, y2)), impl);
}

static void createSVGPathSegCurvetoCubicRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoCubicRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoQuadraticAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoQuadraticAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float x1;
    float y1;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x1 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1)), impl);
}

static void createSVGPathSegCurvetoQuadraticAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoQuadraticRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoQuadraticRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float x1;
    float y1;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x1 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y1 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoQuadraticRel(x, y, x1, y1)), impl);
}

static void createSVGPathSegCurvetoQuadraticRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegArcAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegArcAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        setMinimumArityTypeError(exceptionState, 7, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float r1;
    float r2;
    float angle;
    bool largeArcFlag;
    bool sweepFlag;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        r1 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        r2 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        angle = toRestrictedFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        largeArcFlag = toBoolean(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        sweepFlag = toBoolean(info.GetIsolate(), info[6], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegArcAbs(x, y, r1, r2, angle, largeArcFlag, sweepFlag)), impl);
}

static void createSVGPathSegArcAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegArcAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegArcRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegArcRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        setMinimumArityTypeError(exceptionState, 7, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float r1;
    float r2;
    float angle;
    bool largeArcFlag;
    bool sweepFlag;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        r1 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        r2 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        angle = toRestrictedFloat(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        largeArcFlag = toBoolean(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        sweepFlag = toBoolean(info.GetIsolate(), info[6], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegArcRel(x, y, r1, r2, angle, largeArcFlag, sweepFlag)), impl);
}

static void createSVGPathSegArcRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegArcRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegLinetoHorizontalAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegLinetoHorizontalAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegLinetoHorizontalAbs(x)), impl);
}

static void createSVGPathSegLinetoHorizontalAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegLinetoHorizontalAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegLinetoHorizontalRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegLinetoHorizontalRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegLinetoHorizontalRel(x)), impl);
}

static void createSVGPathSegLinetoHorizontalRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegLinetoHorizontalRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegLinetoVerticalAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegLinetoVerticalAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float y;
    {
        y = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegLinetoVerticalAbs(y)), impl);
}

static void createSVGPathSegLinetoVerticalAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegLinetoVerticalAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegLinetoVerticalRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegLinetoVerticalRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float y;
    {
        y = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegLinetoVerticalRel(y)), impl);
}

static void createSVGPathSegLinetoVerticalRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegLinetoVerticalRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoCubicSmoothAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoCubicSmoothAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float x2;
    float y2;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x2 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y2 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2)), impl);
}

static void createSVGPathSegCurvetoCubicSmoothAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoCubicSmoothAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoCubicSmoothRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoCubicSmoothRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    float x2;
    float y2;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        x2 = toRestrictedFloat(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y2 = toRestrictedFloat(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoCubicSmoothRel(x, y, x2, y2)), impl);
}

static void createSVGPathSegCurvetoCubicSmoothRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoCubicSmoothRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoQuadraticSmoothAbsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoQuadraticSmoothAbs", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoQuadraticSmoothAbs(x, y)), impl);
}

static void createSVGPathSegCurvetoQuadraticSmoothAbsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticSmoothAbsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createSVGPathSegCurvetoQuadraticSmoothRelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createSVGPathSegCurvetoQuadraticSmoothRel", "SVGPathElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGPathElement* impl = V8SVGPathElement::toImpl(info.Holder());
    float x;
    float y;
    {
        x = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPathSegCurvetoQuadraticSmoothRel(x, y)), impl);
}

static void createSVGPathSegCurvetoQuadraticSmoothRelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::SVGPathSegDOM);
    SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticSmoothRelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace SVGPathElementV8Internal

static const V8DOMConfiguration::MethodConfiguration V8SVGPathElementMethods[] = {
    {"getTotalLength", SVGPathElementV8Internal::getTotalLengthMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getPointAtLength", SVGPathElementV8Internal::getPointAtLengthMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"getPathSegAtLength", SVGPathElementV8Internal::getPathSegAtLengthMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8SVGPathElementTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SVGPathElement", V8SVGGeometryElement::domTemplate(isolate), V8SVGPathElement::internalFieldCount,
        0, 0,
        0, 0,
        V8SVGPathElementMethods, WTF_ARRAY_LENGTH(V8SVGPathElementMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"pathLength", SVGPathElementV8Internal::pathLengthAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"pathSegList", SVGPathElementV8Internal::pathSegListAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"animatedPathSegList", SVGPathElementV8Internal::animatedPathSegListAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"normalizedPathSegList", SVGPathElementV8Internal::normalizedPathSegListAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration =\
        {"animatedNormalizedPathSegList", SVGPathElementV8Internal::animatedNormalizedPathSegListAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegClosePathMethodConfiguration = {
            "createSVGPathSegClosePath", SVGPathElementV8Internal::createSVGPathSegClosePathMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegClosePathMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegMovetoAbsMethodConfiguration = {
            "createSVGPathSegMovetoAbs", SVGPathElementV8Internal::createSVGPathSegMovetoAbsMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegMovetoAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegMovetoRelMethodConfiguration = {
            "createSVGPathSegMovetoRel", SVGPathElementV8Internal::createSVGPathSegMovetoRelMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegMovetoRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegLinetoAbsMethodConfiguration = {
            "createSVGPathSegLinetoAbs", SVGPathElementV8Internal::createSVGPathSegLinetoAbsMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegLinetoAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegLinetoRelMethodConfiguration = {
            "createSVGPathSegLinetoRel", SVGPathElementV8Internal::createSVGPathSegLinetoRelMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegLinetoRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoCubicAbsMethodConfiguration = {
            "createSVGPathSegCurvetoCubicAbs", SVGPathElementV8Internal::createSVGPathSegCurvetoCubicAbsMethodCallback, 0, 6, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoCubicAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoCubicRelMethodConfiguration = {
            "createSVGPathSegCurvetoCubicRel", SVGPathElementV8Internal::createSVGPathSegCurvetoCubicRelMethodCallback, 0, 6, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoCubicRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoQuadraticAbsMethodConfiguration = {
            "createSVGPathSegCurvetoQuadraticAbs", SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticAbsMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoQuadraticAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoQuadraticRelMethodConfiguration = {
            "createSVGPathSegCurvetoQuadraticRel", SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticRelMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoQuadraticRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegArcAbsMethodConfiguration = {
            "createSVGPathSegArcAbs", SVGPathElementV8Internal::createSVGPathSegArcAbsMethodCallback, 0, 7, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegArcAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegArcRelMethodConfiguration = {
            "createSVGPathSegArcRel", SVGPathElementV8Internal::createSVGPathSegArcRelMethodCallback, 0, 7, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegArcRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegLinetoHorizontalAbsMethodConfiguration = {
            "createSVGPathSegLinetoHorizontalAbs", SVGPathElementV8Internal::createSVGPathSegLinetoHorizontalAbsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegLinetoHorizontalAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegLinetoHorizontalRelMethodConfiguration = {
            "createSVGPathSegLinetoHorizontalRel", SVGPathElementV8Internal::createSVGPathSegLinetoHorizontalRelMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegLinetoHorizontalRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegLinetoVerticalAbsMethodConfiguration = {
            "createSVGPathSegLinetoVerticalAbs", SVGPathElementV8Internal::createSVGPathSegLinetoVerticalAbsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegLinetoVerticalAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegLinetoVerticalRelMethodConfiguration = {
            "createSVGPathSegLinetoVerticalRel", SVGPathElementV8Internal::createSVGPathSegLinetoVerticalRelMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegLinetoVerticalRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoCubicSmoothAbsMethodConfiguration = {
            "createSVGPathSegCurvetoCubicSmoothAbs", SVGPathElementV8Internal::createSVGPathSegCurvetoCubicSmoothAbsMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoCubicSmoothAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoCubicSmoothRelMethodConfiguration = {
            "createSVGPathSegCurvetoCubicSmoothRel", SVGPathElementV8Internal::createSVGPathSegCurvetoCubicSmoothRelMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoCubicSmoothRelMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoQuadraticSmoothAbsMethodConfiguration = {
            "createSVGPathSegCurvetoQuadraticSmoothAbs", SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticSmoothAbsMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoQuadraticSmoothAbsMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::svg1DOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration createSVGPathSegCurvetoQuadraticSmoothRelMethodConfiguration = {
            "createSVGPathSegCurvetoQuadraticSmoothRel", SVGPathElementV8Internal::createSVGPathSegCurvetoQuadraticSmoothRelMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, createSVGPathSegCurvetoQuadraticSmoothRelMethodConfiguration);
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8SVGPathElement::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGPathElementTemplate);
}

bool V8SVGPathElement::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGPathElement::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGPathElement* V8SVGPathElement::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8SVGPathElement::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGPathElement>()->ref();
#endif
}

void V8SVGPathElement::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGPathElement>()->deref();
#endif
}

} // namespace blink
