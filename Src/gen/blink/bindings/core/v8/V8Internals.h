// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef V8Internals_h
#define V8Internals_h

#include "bindings/core/v8/ScriptWrappable.h"
#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8Binding.h"
#include "bindings/core/v8/V8DOMWrapper.h"
#include "bindings/core/v8/WrapperTypeInfo.h"
#include "core/testing/Internals.h"
#include "platform/heap/Handle.h"

namespace blink {

class V8Internals {
public:
    static bool hasInstance(v8::Local<v8::Value>, v8::Isolate*);
    static v8::Local<v8::Object> findInstanceInPrototypeChain(v8::Local<v8::Value>, v8::Isolate*);
    static v8::Local<v8::FunctionTemplate> domTemplate(v8::Isolate*);
    static Internals* toImpl(v8::Local<v8::Object> object)
    {
        return toScriptWrappable(object)->toImpl<Internals>();
    }
    static Internals* toImplWithTypeCheck(v8::Isolate*, v8::Local<v8::Value>);
    static WrapperTypeInfo wrapperTypeInfo;
    static void refObject(ScriptWrappable*);
    static void derefObject(ScriptWrappable*);
    template<typename VisitorDispatcher>
    static void trace(VisitorDispatcher visitor, ScriptWrappable* scriptWrappable)
    {
        visitor->trace(scriptWrappable->toImpl<Internals>());
    }
    static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
    static void installConditionallyEnabledProperties(v8::Local<v8::Object>, v8::Isolate*) { }
    static void preparePrototypeObject(v8::Isolate*, v8::Local<v8::Object> prototypeObject, v8::Local<v8::FunctionTemplate> interfaceTemplate);
    static void updateWrapperTypeInfo(InstallTemplateFunction, PreparePrototypeObjectFunction);
    static void installV8InternalsTemplate(v8::Local<v8::FunctionTemplate>, v8::Isolate*);

private:
    static InstallTemplateFunction installV8InternalsTemplateFunction;
};

template <>
struct V8TypeOf<Internals> {
    typedef V8Internals Type;
};

} // namespace blink

#endif // V8Internals_h
