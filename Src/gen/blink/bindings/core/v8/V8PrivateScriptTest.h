// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef V8PrivateScriptTest_h
#define V8PrivateScriptTest_h

#include "bindings/core/v8/ScriptWrappable.h"
#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8Binding.h"
#include "bindings/core/v8/V8DOMWrapper.h"
#include "bindings/core/v8/WrapperTypeInfo.h"
#include "core/testing/PrivateScriptTest.h"
#include "platform/heap/Handle.h"

namespace blink {

class V8PrivateScriptTest {
public:
    class PrivateScript {
    public:
        static bool doNothingMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool return123Method(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result);
        static bool echoIntegerMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value, int* result);
        static bool echoStringMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, String value, String* result);
        static bool echoNodeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> value, RefPtrWillBeRawPtr<Node>* result);
        static bool addIntegerMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result);
        static bool addStringMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, String value1, String value2, String* result);
        static bool setIntegerToPrototypeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value);
        static bool getIntegerFromPrototypeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result);
        static bool setIntegerToDocumentMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, int value);
        static bool getIntegerFromDocumentMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, int* result);
        static bool createElementMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, RefPtrWillBeRawPtr<Node>* result);
        static bool appendChildMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node1, PassRefPtrWillBeRawPtr<Node> node2);
        static bool firstChildMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, RefPtrWillBeRawPtr<Node>* result);
        static bool nextSiblingMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, RefPtrWillBeRawPtr<Node>* result);
        static bool innerHTMLMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, String* result);
        static bool setInnerHTMLMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node, String string);
        static bool addClickListenerMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> node);
        static bool clickNodeMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document, PassRefPtrWillBeRawPtr<Node> node);
        static bool voidMethodThrowsDOMSyntaxErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool voidMethodThrowsErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool voidMethodThrowsTypeErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool voidMethodThrowsRangeErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool voidMethodThrowsSyntaxErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool voidMethodThrowsReferenceErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool voidMethodThrowsStackOverflowErrorMethod(LocalFrame* frame, PrivateScriptTest* holderImpl);
        static bool addIntegerForPrivateScriptOnlyMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result);
        static bool addIntegerImplementedInCPPMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result);
        static bool dispatchDocumentOnloadMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Document> document);
        static bool addIntegerInPartialMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result);
        static bool addInteger2InPartialMethod(LocalFrame* frame, PrivateScriptTest* holderImpl, int value1, int value2, int* result);
        static bool readonlyShortAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result);
        static bool shortAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, int* result);
        static bool shortAttributeAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, int cppValue);
        static bool stringAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result);
        static bool stringAttributeAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue);
        static bool nodeAttributeAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, RefPtrWillBeRawPtr<Node>* result);
        static bool nodeAttributeAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> cppValue);
        static bool nodeAttributeThrowsIndexSizeErrorAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, RefPtrWillBeRawPtr<Node>* result);
        static bool nodeAttributeThrowsIndexSizeErrorAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, PassRefPtrWillBeRawPtr<Node> cppValue);
        static bool stringAttributeForPrivateScriptOnlyAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result);
        static bool stringAttributeForPrivateScriptOnlyAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue);
        static bool stringAttributeImplementedInCPPAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result);
        static bool stringAttributeImplementedInCPPAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue);
        static bool stringAttributeInPartialAttributeGetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String* result);
        static bool stringAttributeInPartialAttributeSetter(LocalFrame* frame, PrivateScriptTest* holderImpl, String cppValue);
    };

    static bool hasInstance(v8::Local<v8::Value>, v8::Isolate*);
    static v8::Local<v8::Object> findInstanceInPrototypeChain(v8::Local<v8::Value>, v8::Isolate*);
    static v8::Local<v8::FunctionTemplate> domTemplate(v8::Isolate*);
    static PrivateScriptTest* toImpl(v8::Local<v8::Object> object)
    {
        return toScriptWrappable(object)->toImpl<PrivateScriptTest>();
    }
    static PrivateScriptTest* toImplWithTypeCheck(v8::Isolate*, v8::Local<v8::Value>);
    static const WrapperTypeInfo wrapperTypeInfo;
    static void refObject(ScriptWrappable*);
    static void derefObject(ScriptWrappable*);
    template<typename VisitorDispatcher>
    static void trace(VisitorDispatcher visitor, ScriptWrappable* scriptWrappable)
    {
        visitor->trace(scriptWrappable->toImpl<PrivateScriptTest>());
    }
    static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
    static void installConditionallyEnabledProperties(v8::Local<v8::Object>, v8::Isolate*) { }
    static void preparePrototypeObject(v8::Isolate*, v8::Local<v8::Object> prototypeObject, v8::Local<v8::FunctionTemplate> interfaceTemplate) { }
};

template <>
struct V8TypeOf<PrivateScriptTest> {
    typedef V8PrivateScriptTest Type;
};

} // namespace blink

#endif // V8PrivateScriptTest_h
