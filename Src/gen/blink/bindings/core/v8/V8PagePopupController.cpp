// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8PagePopupController.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8PagePopupController::wrapperTypeInfo = { gin::kEmbedderBlink, V8PagePopupController::domTemplate, V8PagePopupController::refObject, V8PagePopupController::derefObject, V8PagePopupController::trace, 0, 0, V8PagePopupController::preparePrototypeObject, V8PagePopupController::installConditionallyEnabledProperties, "PagePopupController", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in PagePopupController.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& PagePopupController::s_wrapperTypeInfo = V8PagePopupController::wrapperTypeInfo;

namespace PagePopupControllerV8Internal {

static void setValueAndClosePopupMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setValueAndClosePopup", "PagePopupController", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    int numberValue;
    V8StringResource<> stringValue;
    {
        numberValue = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        stringValue = info[1];
        if (!stringValue.prepare())
            return;
    }
    impl->setValueAndClosePopup(numberValue, stringValue);
}

static void setValueAndClosePopupMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::setValueAndClosePopupMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setValue", "PagePopupController", 1, info.Length()), info.GetIsolate());
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    V8StringResource<> value;
    {
        value = info[0];
        if (!value.prepare())
            return;
    }
    impl->setValue(value);
}

static void setValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::setValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void closePopupMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    impl->closePopup();
}

static void closePopupMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::closePopupMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void selectFontsFromOwnerDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "selectFontsFromOwnerDocument", "PagePopupController", 1, info.Length()), info.GetIsolate());
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    Document* targetDocument;
    {
        targetDocument = V8Document::toImplWithTypeCheck(info.GetIsolate(), info[0]);
    }
    impl->selectFontsFromOwnerDocument(targetDocument);
}

static void selectFontsFromOwnerDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::selectFontsFromOwnerDocumentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void localizeNumberStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "localizeNumberString", "PagePopupController", 1, info.Length()), info.GetIsolate());
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    V8StringResource<> numberString;
    {
        numberString = info[0];
        if (!numberString.prepare())
            return;
    }
    v8SetReturnValueString(info, impl->localizeNumberString(numberString), info.GetIsolate());
}

static void localizeNumberStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::localizeNumberStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void formatMonthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "formatMonth", "PagePopupController", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    int year;
    int zeroBaseMonth;
    {
        year = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zeroBaseMonth = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->formatMonth(year, zeroBaseMonth), info.GetIsolate());
}

static void formatMonthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::formatMonthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void formatShortMonthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "formatShortMonth", "PagePopupController", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    int year;
    int zeroBaseMonth;
    {
        year = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        zeroBaseMonth = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    v8SetReturnValueString(info, impl->formatShortMonth(year, zeroBaseMonth), info.GetIsolate());
}

static void formatShortMonthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::formatShortMonthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void formatWeekMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "formatWeek", "PagePopupController", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    int year;
    int weekNumber;
    V8StringResource<> localizedStartDate;
    {
        year = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        weekNumber = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        localizedStartDate = info[2];
        if (!localizedStartDate.prepare())
            return;
    }
    v8SetReturnValueString(info, impl->formatWeek(year, weekNumber, localizedStartDate), info.GetIsolate());
}

static void formatWeekMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::formatWeekMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void histogramEnumerationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "histogramEnumeration", "PagePopupController", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    V8StringResource<> name;
    int sample;
    int boundaryValue;
    {
        name = info[0];
        if (!name.prepare())
            return;
        sample = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        boundaryValue = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->histogramEnumeration(name, sample, boundaryValue);
}

static void histogramEnumerationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::histogramEnumerationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setWindowRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setWindowRect", "PagePopupController", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        setMinimumArityTypeError(exceptionState, 4, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    PagePopupController* impl = V8PagePopupController::toImpl(info.Holder());
    int x;
    int y;
    int width;
    int height;
    {
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        width = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setWindowRect(x, y, width, height);
}

static void setWindowRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    PagePopupControllerV8Internal::setWindowRectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace PagePopupControllerV8Internal

static const V8DOMConfiguration::MethodConfiguration V8PagePopupControllerMethods[] = {
    {"setValueAndClosePopup", PagePopupControllerV8Internal::setValueAndClosePopupMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setValue", PagePopupControllerV8Internal::setValueMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"closePopup", PagePopupControllerV8Internal::closePopupMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"selectFontsFromOwnerDocument", PagePopupControllerV8Internal::selectFontsFromOwnerDocumentMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"localizeNumberString", PagePopupControllerV8Internal::localizeNumberStringMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"formatMonth", PagePopupControllerV8Internal::formatMonthMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"formatShortMonth", PagePopupControllerV8Internal::formatShortMonthMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"formatWeek", PagePopupControllerV8Internal::formatWeekMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"histogramEnumeration", PagePopupControllerV8Internal::histogramEnumerationMethodCallback, 0, 3, V8DOMConfiguration::ExposedToAllScripts},
    {"setWindowRect", PagePopupControllerV8Internal::setWindowRectMethodCallback, 0, 4, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8PagePopupControllerTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::pagePopupEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "PagePopupController", v8::Local<v8::FunctionTemplate>(), V8PagePopupController::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "PagePopupController", v8::Local<v8::FunctionTemplate>(), V8PagePopupController::internalFieldCount,
            0, 0,
            0, 0,
            V8PagePopupControllerMethods, WTF_ARRAY_LENGTH(V8PagePopupControllerMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8PagePopupController::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8PagePopupControllerTemplate);
}

bool V8PagePopupController::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8PagePopupController::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

PagePopupController* V8PagePopupController::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8PagePopupController::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<PagePopupController>()->ref();
#endif
}

void V8PagePopupController::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<PagePopupController>()->deref();
#endif
}

} // namespace blink
