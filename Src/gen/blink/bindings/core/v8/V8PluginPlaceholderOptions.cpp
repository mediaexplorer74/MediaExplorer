// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8PluginPlaceholderOptions.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8PluginPlaceholderOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PluginPlaceholderOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block;
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> closeableValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "closeable")).ToLocal(&closeableValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (closeableValue.IsEmpty() || closeableValue->IsUndefined()) {
            // Do nothing.
        } else {
            bool closeable = toBoolean(isolate, closeableValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setCloseable(closeable);
        }
    }

    {
        v8::Local<v8::Value> messageValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "message")).ToLocal(&messageValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (messageValue.IsEmpty() || messageValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> message = messageValue;
            if (!message.prepare(exceptionState))
                return;
            impl.setMessage(message);
        }
    }

}

v8::Local<v8::Value> toV8(const PluginPlaceholderOptions& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PluginPlaceholderOptions(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8PluginPlaceholderOptions(const PluginPlaceholderOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasCloseable()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "closeable"), v8Boolean(impl.closeable(), isolate))))
            return false;
    }

    if (impl.hasMessage()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "message"), v8String(isolate, impl.message()))))
            return false;
    }

    return true;
}

PluginPlaceholderOptions NativeValueTraits<PluginPlaceholderOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PluginPlaceholderOptions impl;
    V8PluginPlaceholderOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
