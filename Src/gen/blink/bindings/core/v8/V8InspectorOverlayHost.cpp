// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InspectorOverlayHost.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8InspectorOverlayHost::wrapperTypeInfo = { gin::kEmbedderBlink, V8InspectorOverlayHost::domTemplate, V8InspectorOverlayHost::refObject, V8InspectorOverlayHost::derefObject, V8InspectorOverlayHost::trace, 0, 0, V8InspectorOverlayHost::preparePrototypeObject, V8InspectorOverlayHost::installConditionallyEnabledProperties, "InspectorOverlayHost", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in InspectorOverlayHost.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& InspectorOverlayHost::s_wrapperTypeInfo = V8InspectorOverlayHost::wrapperTypeInfo;

namespace InspectorOverlayHostV8Internal {

static void resumeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorOverlayHost* impl = V8InspectorOverlayHost::toImpl(info.Holder());
    impl->resume();
}

static void resumeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InspectorOverlayHostV8Internal::resumeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stepOverMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorOverlayHost* impl = V8InspectorOverlayHost::toImpl(info.Holder());
    impl->stepOver();
}

static void stepOverMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InspectorOverlayHostV8Internal::stepOverMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void startPropertyChangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "startPropertyChange", "InspectorOverlayHost", 1, info.Length()), info.GetIsolate());
        return;
    }
    InspectorOverlayHost* impl = V8InspectorOverlayHost::toImpl(info.Holder());
    V8StringResource<> propertyName;
    {
        propertyName = info[0];
        if (!propertyName.prepare())
            return;
    }
    impl->startPropertyChange(propertyName);
}

static void startPropertyChangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InspectorOverlayHostV8Internal::startPropertyChangeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void changePropertyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "changeProperty", "InspectorOverlayHost", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InspectorOverlayHost* impl = V8InspectorOverlayHost::toImpl(info.Holder());
    float cssDelta;
    {
        cssDelta = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->changeProperty(cssDelta);
}

static void changePropertyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InspectorOverlayHostV8Internal::changePropertyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void endPropertyChangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorOverlayHost* impl = V8InspectorOverlayHost::toImpl(info.Holder());
    impl->endPropertyChange();
}

static void endPropertyChangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InspectorOverlayHostV8Internal::endPropertyChangeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace InspectorOverlayHostV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InspectorOverlayHostMethods[] = {
    {"resume", InspectorOverlayHostV8Internal::resumeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"stepOver", InspectorOverlayHostV8Internal::stepOverMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"startPropertyChange", InspectorOverlayHostV8Internal::startPropertyChangeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"changeProperty", InspectorOverlayHostV8Internal::changePropertyMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"endPropertyChange", InspectorOverlayHostV8Internal::endPropertyChangeMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8InspectorOverlayHostTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "InspectorOverlayHost", v8::Local<v8::FunctionTemplate>(), V8InspectorOverlayHost::internalFieldCount,
        0, 0,
        0, 0,
        V8InspectorOverlayHostMethods, WTF_ARRAY_LENGTH(V8InspectorOverlayHostMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8InspectorOverlayHost::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8InspectorOverlayHostTemplate);
}

bool V8InspectorOverlayHost::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8InspectorOverlayHost::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InspectorOverlayHost* V8InspectorOverlayHost::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8InspectorOverlayHost::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<InspectorOverlayHost>()->ref();
#endif
}

void V8InspectorOverlayHost::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<InspectorOverlayHost>()->deref();
#endif
}

} // namespace blink
