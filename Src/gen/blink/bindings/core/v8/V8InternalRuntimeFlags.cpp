// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InternalRuntimeFlags.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8InternalRuntimeFlags::wrapperTypeInfo = { gin::kEmbedderBlink, V8InternalRuntimeFlags::domTemplate, V8InternalRuntimeFlags::refObject, V8InternalRuntimeFlags::derefObject, V8InternalRuntimeFlags::trace, 0, 0, V8InternalRuntimeFlags::preparePrototypeObject, V8InternalRuntimeFlags::installConditionallyEnabledProperties, "InternalRuntimeFlags", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in InternalRuntimeFlags.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& InternalRuntimeFlags::s_wrapperTypeInfo = V8InternalRuntimeFlags::wrapperTypeInfo;

namespace InternalRuntimeFlagsV8Internal {

static void appBannerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->appBannerEnabled());
}

static void appBannerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::appBannerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void alwaysUseComplexTextEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->alwaysUseComplexTextEnabled());
}

static void alwaysUseComplexTextEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::alwaysUseComplexTextEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void applicationCacheEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->applicationCacheEnabled());
}

static void applicationCacheEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::applicationCacheEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void audioOutputDevicesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->audioOutputDevicesEnabled());
}

static void audioOutputDevicesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::audioOutputDevicesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void audioVideoTracksEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->audioVideoTracksEnabled());
}

static void audioVideoTracksEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::audioVideoTracksEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void authorShadowDOMForAnyElementEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->authorShadowDOMForAnyElementEnabled());
}

static void authorShadowDOMForAnyElementEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::authorShadowDOMForAnyElementEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void backgroundSyncEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->backgroundSyncEnabled());
}

static void backgroundSyncEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::backgroundSyncEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void backgroundSyncV2EnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->backgroundSyncV2Enabled());
}

static void backgroundSyncV2EnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::backgroundSyncV2EnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void bleedingEdgeFastPathsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->bleedingEdgeFastPathsEnabled());
}

static void bleedingEdgeFastPathsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::bleedingEdgeFastPathsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void blinkSchedulerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->blinkSchedulerEnabled());
}

static void blinkSchedulerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::blinkSchedulerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void clientHintsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->clientHintsEnabled());
}

static void clientHintsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::clientHintsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void columnFillEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->columnFillEnabled());
}

static void columnFillEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::columnFillEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void compositedSelectionUpdateEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->compositedSelectionUpdateEnabled());
}

static void compositedSelectionUpdateEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::compositedSelectionUpdateEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void compositorWorkerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->compositorWorkerEnabled());
}

static void compositorWorkerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::compositorWorkerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void compositorAnimationTimelinesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->compositorAnimationTimelinesEnabled());
}

static void compositorAnimationTimelinesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::compositorAnimationTimelinesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void contextMenuEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->contextMenuEnabled());
}

static void contextMenuEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::contextMenuEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void createShadowRootWithParameterEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->createShadowRootWithParameterEnabled());
}

static void createShadowRootWithParameterEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::createShadowRootWithParameterEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void credentialManagerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->credentialManagerEnabled());
}

static void credentialManagerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::credentialManagerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void css3TextEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->css3TextEnabled());
}

static void css3TextEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::css3TextEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void css3TextDecorationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->css3TextDecorationsEnabled());
}

static void css3TextDecorationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::css3TextDecorationsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssAttributeCaseSensitivityEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssAttributeCaseSensitivityEnabled());
}

static void cssAttributeCaseSensitivityEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssAttributeCaseSensitivityEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssCompositingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssCompositingEnabled());
}

static void cssCompositingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssCompositingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssFontSizeAdjustEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssFontSizeAdjustEnabled());
}

static void cssFontSizeAdjustEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssFontSizeAdjustEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssGridLayoutEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssGridLayoutEnabled());
}

static void cssGridLayoutEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssGridLayoutEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssIndependentTransformPropertiesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssIndependentTransformPropertiesEnabled());
}

static void cssIndependentTransformPropertiesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssIndependentTransformPropertiesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssMaskSourceTypeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssMaskSourceTypeEnabled());
}

static void cssMaskSourceTypeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssMaskSourceTypeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssMotionPathEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssMotionPathEnabled());
}

static void cssMotionPathEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssMotionPathEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssomSmoothScrollEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssomSmoothScrollEnabled());
}

static void cssomSmoothScrollEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssomSmoothScrollEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssScrollBlocksOnEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssScrollBlocksOnEnabled());
}

static void cssScrollBlocksOnEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssScrollBlocksOnEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssTouchActionPanDirectionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssTouchActionPanDirectionsEnabled());
}

static void cssTouchActionPanDirectionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssTouchActionPanDirectionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssViewportEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssViewportEnabled());
}

static void cssViewportEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssViewportEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cssScrollSnapPointsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->cssScrollSnapPointsEnabled());
}

static void cssScrollSnapPointsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssScrollSnapPointsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void customSchemeHandlerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->customSchemeHandlerEnabled());
}

static void customSchemeHandlerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::customSchemeHandlerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void databaseEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->databaseEnabled());
}

static void databaseEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::databaseEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void decodeToYUVEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->decodeToYUVEnabled());
}

static void decodeToYUVEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::decodeToYUVEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void deviceLightEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->deviceLightEnabled());
}

static void deviceLightEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::deviceLightEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void displayList2dCanvasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->displayList2dCanvasEnabled());
}

static void displayList2dCanvasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::displayList2dCanvasEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void dOMConvenienceAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->dOMConvenienceAPIEnabled());
}

static void dOMConvenienceAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::dOMConvenienceAPIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void forceDisplayList2dCanvasEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->forceDisplayList2dCanvasEnabled());
}

static void forceDisplayList2dCanvasEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::forceDisplayList2dCanvasEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void encryptedMediaEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->encryptedMediaEnabled());
}

static void encryptedMediaEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::encryptedMediaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void enumerateDevicesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->enumerateDevicesEnabled());
}

static void enumerateDevicesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::enumerateDevicesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void execCommandInJavaScriptEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->execCommandInJavaScriptEnabled());
}

static void execCommandInJavaScriptEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::execCommandInJavaScriptEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void computedAccessibilityInfoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->computedAccessibilityInfoEnabled());
}

static void computedAccessibilityInfoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::computedAccessibilityInfoEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void experimentalCanvasFeaturesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalCanvasFeaturesEnabled());
}

static void experimentalCanvasFeaturesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::experimentalCanvasFeaturesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void experimentalContentSecurityPolicyFeaturesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalContentSecurityPolicyFeaturesEnabled());
}

static void experimentalContentSecurityPolicyFeaturesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::experimentalContentSecurityPolicyFeaturesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void fastMobileScrollingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fastMobileScrollingEnabled());
}

static void fastMobileScrollingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fastMobileScrollingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void fileAPIBlobCloseEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fileAPIBlobCloseEnabled());
}

static void fileAPIBlobCloseEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fileAPIBlobCloseEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void fileSystemEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fileSystemEnabled());
}

static void fileSystemEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fileSystemEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void formDataNewMethodsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->formDataNewMethodsEnabled());
}

static void formDataNewMethodsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::formDataNewMethodsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void fullscreenUnprefixedEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fullscreenUnprefixedEnabled());
}

static void fullscreenUnprefixedEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fullscreenUnprefixedEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void frameTimingSupportEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->frameTimingSupportEnabled());
}

static void frameTimingSupportEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::frameTimingSupportEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void geofencingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->geofencingEnabled());
}

static void geofencingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::geofencingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void geometryInterfacesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->geometryInterfacesEnabled());
}

static void geometryInterfacesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::geometryInterfacesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void globalCacheStorageEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->globalCacheStorageEnabled());
}

static void globalCacheStorageEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::globalCacheStorageEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void imageColorProfilesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->imageColorProfilesEnabled());
}

static void imageColorProfilesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::imageColorProfilesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void imageRenderingPixelatedEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->imageRenderingPixelatedEnabled());
}

static void imageRenderingPixelatedEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::imageRenderingPixelatedEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void indexedDBExperimentalEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->indexedDBExperimentalEnabled());
}

static void indexedDBExperimentalEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::indexedDBExperimentalEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void inputDeviceEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->inputDeviceEnabled());
}

static void inputDeviceEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::inputDeviceEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void inputModeAttributeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->inputModeAttributeEnabled());
}

static void inputModeAttributeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::inputModeAttributeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void keyboardEventCodeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->keyboardEventCodeEnabled());
}

static void keyboardEventCodeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::keyboardEventCodeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void keyboardEventKeyEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->keyboardEventKeyEnabled());
}

static void keyboardEventKeyEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::keyboardEventKeyEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void langAttributeAwareFormControlUIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->langAttributeAwareFormControlUIEnabled());
}

static void langAttributeAwareFormControlUIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::langAttributeAwareFormControlUIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void linkPreconnectEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->linkPreconnectEnabled());
}

static void linkPreconnectEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::linkPreconnectEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void linkPreloadEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->linkPreloadEnabled());
}

static void linkPreloadEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::linkPreloadEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void linkHeaderEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->linkHeaderEnabled());
}

static void linkHeaderEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::linkHeaderEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void fractionalScrollOffsetsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->fractionalScrollOffsetsEnabled());
}

static void fractionalScrollOffsetsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fractionalScrollOffsetsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaEnabled());
}

static void mediaEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaCaptureEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaCaptureEnabled());
}

static void mediaCaptureEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaCaptureEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaControllerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaControllerEnabled());
}

static void mediaControllerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaControllerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaSessionEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaSessionEnabled());
}

static void mediaSessionEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaSessionEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaSourceEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaSourceEnabled());
}

static void mediaSourceEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaSourceEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaSourceExperimentalEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaSourceExperimentalEnabled());
}

static void mediaSourceExperimentalEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaSourceExperimentalEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaStreamSpeechEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->mediaStreamSpeechEnabled());
}

static void mediaStreamSpeechEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaStreamSpeechEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void memoryInfoInWorkersEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->memoryInfoInWorkersEnabled());
}

static void memoryInfoInWorkersEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::memoryInfoInWorkersEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void navigatorConnectEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->navigatorConnectEnabled());
}

static void navigatorConnectEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::navigatorConnectEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void navigatorContentUtilsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->navigatorContentUtilsEnabled());
}

static void navigatorContentUtilsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::navigatorContentUtilsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void networkInformationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->networkInformationEnabled());
}

static void networkInformationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::networkInformationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void notificationConstructorEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationConstructorEnabled());
}

static void notificationConstructorEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::notificationConstructorEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void notificationExperimentalEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationExperimentalEnabled());
}

static void notificationExperimentalEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::notificationExperimentalEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void notificationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->notificationsEnabled());
}

static void notificationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::notificationsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void orientationEventEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->orientationEventEnabled());
}

static void orientationEventEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::orientationEventEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void overlayFullscreenVideoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->overlayFullscreenVideoEnabled());
}

static void overlayFullscreenVideoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::overlayFullscreenVideoEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void overlayScrollbarsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->overlayScrollbarsEnabled());
}

static void overlayScrollbarsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::overlayScrollbarsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pagePopupEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pagePopupEnabled());
}

static void pagePopupEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pagePopupEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pathOpsSVGClippingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pathOpsSVGClippingEnabled());
}

static void pathOpsSVGClippingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pathOpsSVGClippingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void permissionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->permissionsEnabled());
}

static void permissionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::permissionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pointerEventEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pointerEventEnabled());
}

static void pointerEventEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pointerEventEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void preciseMemoryInfoEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->preciseMemoryInfoEnabled());
}

static void preciseMemoryInfoEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::preciseMemoryInfoEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void prefixedEncryptedMediaEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->prefixedEncryptedMediaEnabled());
}

static void prefixedEncryptedMediaEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::prefixedEncryptedMediaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void prefixedVideoFullscreenEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->prefixedVideoFullscreenEnabled());
}

static void prefixedVideoFullscreenEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::prefixedVideoFullscreenEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void presentationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->presentationEnabled());
}

static void presentationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::presentationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void promiseRejectionEventEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->promiseRejectionEventEnabled());
}

static void promiseRejectionEventEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::promiseRejectionEventEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pushMessagingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pushMessagingEnabled());
}

static void pushMessagingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pushMessagingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void pushMessagingDataEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->pushMessagingDataEnabled());
}

static void pushMessagingDataEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pushMessagingDataEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void quotaPromiseEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->quotaPromiseEnabled());
}

static void quotaPromiseEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::quotaPromiseEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void reducedReferrerGranularityEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->reducedReferrerGranularityEnabled());
}

static void reducedReferrerGranularityEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::reducedReferrerGranularityEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void requestAutocompleteEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->requestAutocompleteEnabled());
}

static void requestAutocompleteEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::requestAutocompleteEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sandboxBlocksModalsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sandboxBlocksModalsEnabled());
}

static void sandboxBlocksModalsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::sandboxBlocksModalsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void screenOrientationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->screenOrientationEnabled());
}

static void screenOrientationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::screenOrientationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scriptedSpeechEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scriptedSpeechEnabled());
}

static void scriptedSpeechEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::scriptedSpeechEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollTopLeftInteropEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollTopLeftInteropEnabled());
}

static void scrollTopLeftInteropEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::scrollTopLeftInteropEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void selectionForComposedTreeEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->selectionForComposedTreeEnabled());
}

static void selectionForComposedTreeEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::selectionForComposedTreeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void serviceWorkerCacheAddAllEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerCacheAddAllEnabled());
}

static void serviceWorkerCacheAddAllEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::serviceWorkerCacheAddAllEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void serviceWorkerClientAttributesEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerClientAttributesEnabled());
}

static void serviceWorkerClientAttributesEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::serviceWorkerClientAttributesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void serviceWorkerNotificationsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerNotificationsEnabled());
}

static void serviceWorkerNotificationsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::serviceWorkerNotificationsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void serviceWorkerPerformanceTimelineEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerPerformanceTimelineEnabled());
}

static void serviceWorkerPerformanceTimelineEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::serviceWorkerPerformanceTimelineEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void shadowRootDelegatesFocusEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->shadowRootDelegatesFocusEnabled());
}

static void shadowRootDelegatesFocusEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::shadowRootDelegatesFocusEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sharedArrayBufferEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sharedArrayBufferEnabled());
}

static void sharedArrayBufferEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::sharedArrayBufferEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sharedWorkerEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->sharedWorkerEnabled());
}

static void sharedWorkerEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::sharedWorkerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void slimmingPaintEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintEnabled());
}

static void slimmingPaintEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::slimmingPaintEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void slimmingPaintCompositorLayerizationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintCompositorLayerizationEnabled());
}

static void slimmingPaintCompositorLayerizationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::slimmingPaintCompositorLayerizationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void slimmingPaintUnderInvalidationCheckingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintUnderInvalidationCheckingEnabled());
}

static void slimmingPaintUnderInvalidationCheckingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::slimmingPaintUnderInvalidationCheckingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void slimmingPaintStrictCullRectClippingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->slimmingPaintStrictCullRectClippingEnabled());
}

static void slimmingPaintStrictCullRectClippingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::slimmingPaintStrictCullRectClippingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void staleWhileRevalidateCacheControlEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->staleWhileRevalidateCacheControlEnabled());
}

static void staleWhileRevalidateCacheControlEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::staleWhileRevalidateCacheControlEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void experimentalStreamEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->experimentalStreamEnabled());
}

static void experimentalStreamEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::experimentalStreamEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void suboriginsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->suboriginsEnabled());
}

static void suboriginsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::suboriginsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void textBlobEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->textBlobEnabled());
}

static void textBlobEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::textBlobEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void threadedParserDataReceiverEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->threadedParserDataReceiverEnabled());
}

static void threadedParserDataReceiverEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::threadedParserDataReceiverEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void touchEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->touchEnabled());
}

static void touchEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::touchEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void touchIconLoadingEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->touchIconLoadingEnabled());
}

static void touchIconLoadingEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::touchIconLoadingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void unsafeES3APIsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->unsafeES3APIsEnabled());
}

static void unsafeES3APIsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::unsafeES3APIsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void unsandboxedAuxiliaryEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->unsandboxedAuxiliaryEnabled());
}

static void unsandboxedAuxiliaryEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::unsandboxedAuxiliaryEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void userSelectAllEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->userSelectAllEnabled());
}

static void userSelectAllEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::userSelectAllEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webAnimationsAPIEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webAnimationsAPIEnabled());
}

static void webAnimationsAPIEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAnimationsAPIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webAnimationsSVGEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webAnimationsSVGEnabled());
}

static void webAnimationsSVGEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAnimationsSVGEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

#if ENABLE(WEB_AUDIO)
static void webAudioEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webAudioEnabled());
}
#endif // ENABLE(WEB_AUDIO)

#if ENABLE(WEB_AUDIO)
static void webAudioEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAudioEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}
#endif // ENABLE(WEB_AUDIO)

static void webBluetoothEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webBluetoothEnabled());
}

static void webBluetoothEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webBluetoothEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webGLDraftExtensionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webGLDraftExtensionsEnabled());
}

static void webGLDraftExtensionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webGLDraftExtensionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webGLImageChromiumEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webGLImageChromiumEnabled());
}

static void webGLImageChromiumEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webGLImageChromiumEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webVREnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webVREnabled());
}

static void webVREnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webVREnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webVTTRegionsEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->webVTTRegionsEnabled());
}

static void webVTTRegionsEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webVTTRegionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void v8IdleTasksEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->v8IdleTasksEnabled());
}

static void v8IdleTasksEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::v8IdleTasksEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void xsltEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->xsltEnabled());
}

static void xsltEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::xsltEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void svg1DOMEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->svg1DOMEnabled());
}

static void svg1DOMEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::svg1DOMEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollCustomizationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollCustomizationEnabled());
}

static void scrollCustomizationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::scrollCustomizationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void scrollRestorationEnabledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toImpl(holder);
    v8SetReturnValueBool(info, impl->scrollRestorationEnabled());
}

static void scrollRestorationEnabledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::scrollRestorationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace InternalRuntimeFlagsV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8InternalRuntimeFlagsAccessors[] = {
    {"appBannerEnabled", InternalRuntimeFlagsV8Internal::appBannerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"alwaysUseComplexTextEnabled", InternalRuntimeFlagsV8Internal::alwaysUseComplexTextEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"applicationCacheEnabled", InternalRuntimeFlagsV8Internal::applicationCacheEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"audioOutputDevicesEnabled", InternalRuntimeFlagsV8Internal::audioOutputDevicesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"audioVideoTracksEnabled", InternalRuntimeFlagsV8Internal::audioVideoTracksEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"authorShadowDOMForAnyElementEnabled", InternalRuntimeFlagsV8Internal::authorShadowDOMForAnyElementEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"backgroundSyncEnabled", InternalRuntimeFlagsV8Internal::backgroundSyncEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"backgroundSyncV2Enabled", InternalRuntimeFlagsV8Internal::backgroundSyncV2EnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"bleedingEdgeFastPathsEnabled", InternalRuntimeFlagsV8Internal::bleedingEdgeFastPathsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"blinkSchedulerEnabled", InternalRuntimeFlagsV8Internal::blinkSchedulerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"clientHintsEnabled", InternalRuntimeFlagsV8Internal::clientHintsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"columnFillEnabled", InternalRuntimeFlagsV8Internal::columnFillEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"compositedSelectionUpdateEnabled", InternalRuntimeFlagsV8Internal::compositedSelectionUpdateEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"compositorWorkerEnabled", InternalRuntimeFlagsV8Internal::compositorWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"compositorAnimationTimelinesEnabled", InternalRuntimeFlagsV8Internal::compositorAnimationTimelinesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"contextMenuEnabled", InternalRuntimeFlagsV8Internal::contextMenuEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"createShadowRootWithParameterEnabled", InternalRuntimeFlagsV8Internal::createShadowRootWithParameterEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"credentialManagerEnabled", InternalRuntimeFlagsV8Internal::credentialManagerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"css3TextEnabled", InternalRuntimeFlagsV8Internal::css3TextEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"css3TextDecorationsEnabled", InternalRuntimeFlagsV8Internal::css3TextDecorationsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssAttributeCaseSensitivityEnabled", InternalRuntimeFlagsV8Internal::cssAttributeCaseSensitivityEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssCompositingEnabled", InternalRuntimeFlagsV8Internal::cssCompositingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssFontSizeAdjustEnabled", InternalRuntimeFlagsV8Internal::cssFontSizeAdjustEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssGridLayoutEnabled", InternalRuntimeFlagsV8Internal::cssGridLayoutEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssIndependentTransformPropertiesEnabled", InternalRuntimeFlagsV8Internal::cssIndependentTransformPropertiesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssMaskSourceTypeEnabled", InternalRuntimeFlagsV8Internal::cssMaskSourceTypeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssMotionPathEnabled", InternalRuntimeFlagsV8Internal::cssMotionPathEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssomSmoothScrollEnabled", InternalRuntimeFlagsV8Internal::cssomSmoothScrollEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssScrollBlocksOnEnabled", InternalRuntimeFlagsV8Internal::cssScrollBlocksOnEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssTouchActionPanDirectionsEnabled", InternalRuntimeFlagsV8Internal::cssTouchActionPanDirectionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssViewportEnabled", InternalRuntimeFlagsV8Internal::cssViewportEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"cssScrollSnapPointsEnabled", InternalRuntimeFlagsV8Internal::cssScrollSnapPointsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"customSchemeHandlerEnabled", InternalRuntimeFlagsV8Internal::customSchemeHandlerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"databaseEnabled", InternalRuntimeFlagsV8Internal::databaseEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"decodeToYUVEnabled", InternalRuntimeFlagsV8Internal::decodeToYUVEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"deviceLightEnabled", InternalRuntimeFlagsV8Internal::deviceLightEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"displayList2dCanvasEnabled", InternalRuntimeFlagsV8Internal::displayList2dCanvasEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"dOMConvenienceAPIEnabled", InternalRuntimeFlagsV8Internal::dOMConvenienceAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"forceDisplayList2dCanvasEnabled", InternalRuntimeFlagsV8Internal::forceDisplayList2dCanvasEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"encryptedMediaEnabled", InternalRuntimeFlagsV8Internal::encryptedMediaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"enumerateDevicesEnabled", InternalRuntimeFlagsV8Internal::enumerateDevicesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"execCommandInJavaScriptEnabled", InternalRuntimeFlagsV8Internal::execCommandInJavaScriptEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"computedAccessibilityInfoEnabled", InternalRuntimeFlagsV8Internal::computedAccessibilityInfoEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalCanvasFeaturesEnabled", InternalRuntimeFlagsV8Internal::experimentalCanvasFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalContentSecurityPolicyFeaturesEnabled", InternalRuntimeFlagsV8Internal::experimentalContentSecurityPolicyFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fastMobileScrollingEnabled", InternalRuntimeFlagsV8Internal::fastMobileScrollingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fileAPIBlobCloseEnabled", InternalRuntimeFlagsV8Internal::fileAPIBlobCloseEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fileSystemEnabled", InternalRuntimeFlagsV8Internal::fileSystemEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"formDataNewMethodsEnabled", InternalRuntimeFlagsV8Internal::formDataNewMethodsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fullscreenUnprefixedEnabled", InternalRuntimeFlagsV8Internal::fullscreenUnprefixedEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"frameTimingSupportEnabled", InternalRuntimeFlagsV8Internal::frameTimingSupportEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"geofencingEnabled", InternalRuntimeFlagsV8Internal::geofencingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"geometryInterfacesEnabled", InternalRuntimeFlagsV8Internal::geometryInterfacesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"globalCacheStorageEnabled", InternalRuntimeFlagsV8Internal::globalCacheStorageEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"imageColorProfilesEnabled", InternalRuntimeFlagsV8Internal::imageColorProfilesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"imageRenderingPixelatedEnabled", InternalRuntimeFlagsV8Internal::imageRenderingPixelatedEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"indexedDBExperimentalEnabled", InternalRuntimeFlagsV8Internal::indexedDBExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"inputDeviceEnabled", InternalRuntimeFlagsV8Internal::inputDeviceEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"inputModeAttributeEnabled", InternalRuntimeFlagsV8Internal::inputModeAttributeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"keyboardEventCodeEnabled", InternalRuntimeFlagsV8Internal::keyboardEventCodeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"keyboardEventKeyEnabled", InternalRuntimeFlagsV8Internal::keyboardEventKeyEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"langAttributeAwareFormControlUIEnabled", InternalRuntimeFlagsV8Internal::langAttributeAwareFormControlUIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"linkPreconnectEnabled", InternalRuntimeFlagsV8Internal::linkPreconnectEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"linkPreloadEnabled", InternalRuntimeFlagsV8Internal::linkPreloadEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"linkHeaderEnabled", InternalRuntimeFlagsV8Internal::linkHeaderEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"fractionalScrollOffsetsEnabled", InternalRuntimeFlagsV8Internal::fractionalScrollOffsetsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaEnabled", InternalRuntimeFlagsV8Internal::mediaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaCaptureEnabled", InternalRuntimeFlagsV8Internal::mediaCaptureEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaControllerEnabled", InternalRuntimeFlagsV8Internal::mediaControllerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaSessionEnabled", InternalRuntimeFlagsV8Internal::mediaSessionEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaSourceEnabled", InternalRuntimeFlagsV8Internal::mediaSourceEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaSourceExperimentalEnabled", InternalRuntimeFlagsV8Internal::mediaSourceExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"mediaStreamSpeechEnabled", InternalRuntimeFlagsV8Internal::mediaStreamSpeechEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"memoryInfoInWorkersEnabled", InternalRuntimeFlagsV8Internal::memoryInfoInWorkersEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"navigatorConnectEnabled", InternalRuntimeFlagsV8Internal::navigatorConnectEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"navigatorContentUtilsEnabled", InternalRuntimeFlagsV8Internal::navigatorContentUtilsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"networkInformationEnabled", InternalRuntimeFlagsV8Internal::networkInformationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationConstructorEnabled", InternalRuntimeFlagsV8Internal::notificationConstructorEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationExperimentalEnabled", InternalRuntimeFlagsV8Internal::notificationExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notificationsEnabled", InternalRuntimeFlagsV8Internal::notificationsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"orientationEventEnabled", InternalRuntimeFlagsV8Internal::orientationEventEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"overlayFullscreenVideoEnabled", InternalRuntimeFlagsV8Internal::overlayFullscreenVideoEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"overlayScrollbarsEnabled", InternalRuntimeFlagsV8Internal::overlayScrollbarsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pagePopupEnabled", InternalRuntimeFlagsV8Internal::pagePopupEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pathOpsSVGClippingEnabled", InternalRuntimeFlagsV8Internal::pathOpsSVGClippingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"permissionsEnabled", InternalRuntimeFlagsV8Internal::permissionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pointerEventEnabled", InternalRuntimeFlagsV8Internal::pointerEventEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"preciseMemoryInfoEnabled", InternalRuntimeFlagsV8Internal::preciseMemoryInfoEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"prefixedEncryptedMediaEnabled", InternalRuntimeFlagsV8Internal::prefixedEncryptedMediaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"prefixedVideoFullscreenEnabled", InternalRuntimeFlagsV8Internal::prefixedVideoFullscreenEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"presentationEnabled", InternalRuntimeFlagsV8Internal::presentationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"promiseRejectionEventEnabled", InternalRuntimeFlagsV8Internal::promiseRejectionEventEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pushMessagingEnabled", InternalRuntimeFlagsV8Internal::pushMessagingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"pushMessagingDataEnabled", InternalRuntimeFlagsV8Internal::pushMessagingDataEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"quotaPromiseEnabled", InternalRuntimeFlagsV8Internal::quotaPromiseEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"reducedReferrerGranularityEnabled", InternalRuntimeFlagsV8Internal::reducedReferrerGranularityEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"requestAutocompleteEnabled", InternalRuntimeFlagsV8Internal::requestAutocompleteEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sandboxBlocksModalsEnabled", InternalRuntimeFlagsV8Internal::sandboxBlocksModalsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"screenOrientationEnabled", InternalRuntimeFlagsV8Internal::screenOrientationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scriptedSpeechEnabled", InternalRuntimeFlagsV8Internal::scriptedSpeechEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollTopLeftInteropEnabled", InternalRuntimeFlagsV8Internal::scrollTopLeftInteropEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"selectionForComposedTreeEnabled", InternalRuntimeFlagsV8Internal::selectionForComposedTreeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerCacheAddAllEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerCacheAddAllEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerClientAttributesEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerClientAttributesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerNotificationsEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerNotificationsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"serviceWorkerPerformanceTimelineEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerPerformanceTimelineEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"shadowRootDelegatesFocusEnabled", InternalRuntimeFlagsV8Internal::shadowRootDelegatesFocusEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sharedArrayBufferEnabled", InternalRuntimeFlagsV8Internal::sharedArrayBufferEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sharedWorkerEnabled", InternalRuntimeFlagsV8Internal::sharedWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintCompositorLayerizationEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintCompositorLayerizationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintUnderInvalidationCheckingEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintUnderInvalidationCheckingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"slimmingPaintStrictCullRectClippingEnabled", InternalRuntimeFlagsV8Internal::slimmingPaintStrictCullRectClippingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"staleWhileRevalidateCacheControlEnabled", InternalRuntimeFlagsV8Internal::staleWhileRevalidateCacheControlEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"experimentalStreamEnabled", InternalRuntimeFlagsV8Internal::experimentalStreamEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"suboriginsEnabled", InternalRuntimeFlagsV8Internal::suboriginsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"textBlobEnabled", InternalRuntimeFlagsV8Internal::textBlobEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"threadedParserDataReceiverEnabled", InternalRuntimeFlagsV8Internal::threadedParserDataReceiverEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"touchEnabled", InternalRuntimeFlagsV8Internal::touchEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"touchIconLoadingEnabled", InternalRuntimeFlagsV8Internal::touchIconLoadingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"unsafeES3APIsEnabled", InternalRuntimeFlagsV8Internal::unsafeES3APIsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"unsandboxedAuxiliaryEnabled", InternalRuntimeFlagsV8Internal::unsandboxedAuxiliaryEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"userSelectAllEnabled", InternalRuntimeFlagsV8Internal::userSelectAllEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webAnimationsAPIEnabled", InternalRuntimeFlagsV8Internal::webAnimationsAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webAnimationsSVGEnabled", InternalRuntimeFlagsV8Internal::webAnimationsSVGEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
#if ENABLE(WEB_AUDIO)
    {"webAudioEnabled", InternalRuntimeFlagsV8Internal::webAudioEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
#endif // ENABLE(WEB_AUDIO)
    {"webBluetoothEnabled", InternalRuntimeFlagsV8Internal::webBluetoothEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webGLDraftExtensionsEnabled", InternalRuntimeFlagsV8Internal::webGLDraftExtensionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webGLImageChromiumEnabled", InternalRuntimeFlagsV8Internal::webGLImageChromiumEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webVREnabled", InternalRuntimeFlagsV8Internal::webVREnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webVTTRegionsEnabled", InternalRuntimeFlagsV8Internal::webVTTRegionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"v8IdleTasksEnabled", InternalRuntimeFlagsV8Internal::v8IdleTasksEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"xsltEnabled", InternalRuntimeFlagsV8Internal::xsltEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"svg1DOMEnabled", InternalRuntimeFlagsV8Internal::svg1DOMEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollCustomizationEnabled", InternalRuntimeFlagsV8Internal::scrollCustomizationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"scrollRestorationEnabled", InternalRuntimeFlagsV8Internal::scrollRestorationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8InternalRuntimeFlagsTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "InternalRuntimeFlags", v8::Local<v8::FunctionTemplate>(), V8InternalRuntimeFlags::internalFieldCount,
        0, 0,
        V8InternalRuntimeFlagsAccessors, WTF_ARRAY_LENGTH(V8InternalRuntimeFlagsAccessors),
        0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8InternalRuntimeFlags::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8InternalRuntimeFlagsTemplate);
}

bool V8InternalRuntimeFlags::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8InternalRuntimeFlags::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InternalRuntimeFlags* V8InternalRuntimeFlags::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8InternalRuntimeFlags::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8InternalRuntimeFlags::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
