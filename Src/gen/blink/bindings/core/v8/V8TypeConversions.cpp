// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8TypeConversions.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8TypeConversions::wrapperTypeInfo = { gin::kEmbedderBlink, V8TypeConversions::domTemplate, V8TypeConversions::refObject, V8TypeConversions::derefObject, V8TypeConversions::trace, 0, 0, V8TypeConversions::preparePrototypeObject, V8TypeConversions::installConditionallyEnabledProperties, "TypeConversions", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in TypeConversions.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& TypeConversions::s_wrapperTypeInfo = V8TypeConversions::wrapperTypeInfo;

namespace TypeConversionsV8Internal {

static void testLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueInt(info, impl->testLong());
}

static void testLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestLong(cppValue);
}

static void testLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueInt(info, impl->testLong());
}

static void testEnforceRangeLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    int cppValue = toInt32(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestLong(cppValue);
}

static void testEnforceRangeLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUnsignedLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedLong());
}

static void testUnsignedLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testUnsignedLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUnsignedLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUnsignedLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUnsignedLong(cppValue);
}

static void testUnsignedLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testUnsignedLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeUnsignedLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedLong());
}

static void testEnforceRangeUnsignedLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeUnsignedLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeUnsignedLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUnsignedLong(cppValue);
}

static void testEnforceRangeUnsignedLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testLongLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testLongLong()));
}

static void testLongLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    long long cppValue = toInt64(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestLongLong(cppValue);
}

static void testLongLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeLongLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testLongLong()));
}

static void testEnforceRangeLongLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    long long cppValue = toInt64(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestLongLong(cppValue);
}

static void testEnforceRangeLongLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUnsignedLongLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testUnsignedLongLong()));
}

static void testUnsignedLongLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testUnsignedLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUnsignedLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUnsignedLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned long long cppValue = toUInt64(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUnsignedLongLong(cppValue);
}

static void testUnsignedLongLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testUnsignedLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeUnsignedLongLongAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testUnsignedLongLong()));
}

static void testEnforceRangeUnsignedLongLongAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeUnsignedLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeUnsignedLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned long long cppValue = toUInt64(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUnsignedLongLong(cppValue);
}

static void testEnforceRangeUnsignedLongLongAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueInt(info, impl->testByte());
}

static void testByteAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testByteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByte", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    int cppValue = toInt8(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestByte(cppValue);
}

static void testByteAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testByteAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeByteAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueInt(info, impl->testByte());
}

static void testEnforceRangeByteAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeByteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeByteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeByte", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    int cppValue = toInt8(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestByte(cppValue);
}

static void testEnforceRangeByteAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeByteAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testOctetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->testOctet());
}

static void testOctetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testOctetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testOctetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testOctet", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned cppValue = toUInt8(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestOctet(cppValue);
}

static void testOctetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testOctetAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeOctetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->testOctet());
}

static void testEnforceRangeOctetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeOctetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeOctetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeOctet", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned cppValue = toUInt8(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestOctet(cppValue);
}

static void testEnforceRangeOctetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeOctetAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testShortAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueInt(info, impl->testShort());
}

static void testShortAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    int cppValue = toInt16(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestShort(cppValue);
}

static void testShortAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeShortAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueInt(info, impl->testShort());
}

static void testEnforceRangeShortAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    int cppValue = toInt16(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestShort(cppValue);
}

static void testEnforceRangeShortAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUnsignedShortAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedShort());
}

static void testUnsignedShortAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testUnsignedShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUnsignedShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUnsignedShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned cppValue = toUInt16(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUnsignedShort(cppValue);
}

static void testUnsignedShortAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testUnsignedShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeUnsignedShortAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedShort());
}

static void testEnforceRangeUnsignedShortAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testEnforceRangeUnsignedShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeUnsignedShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    unsigned cppValue = toUInt16(info.GetIsolate(), v8Value, EnforceRange, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUnsignedShort(cppValue);
}

static void testEnforceRangeUnsignedShortAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueString(info, impl->testByteString(), info.GetIsolate());
}

static void testByteStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testByteStringAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteStringAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByteString", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    V8StringResource<> cppValue = toByteString(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestByteString(cppValue);
}

static void testByteStringAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testByteStringAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueStringOrNull(info, impl->testByteString(), info.GetIsolate());
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByteStringTreatReturnedNullStringAsNullAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    V8StringResource<> cppValue = toByteString(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestByteString(cppValue);
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueStringOrUndefined(info, impl->testByteString(), info.GetIsolate());
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByteStringTreatReturnedNullStringAsUndefinedAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    V8StringResource<> cppValue = toByteString(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestByteString(cppValue);
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUSVStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueString(info, impl->testUSVString(), info.GetIsolate());
}

static void testUSVStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testUSVStringAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUSVStringAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUSVString", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    V8StringResource<> cppValue = toUSVString(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUSVString(cppValue);
}

static void testUSVStringAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testUSVStringAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUSVStringTreatReturnedNullStringAsNullAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueStringOrNull(info, impl->testUSVString(), info.GetIsolate());
}

static void testUSVStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsNullAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUSVStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUSVStringTreatReturnedNullStringAsNullAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    V8StringResource<> cppValue = toUSVString(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUSVString(cppValue);
}

static void testUSVStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    v8SetReturnValueStringOrUndefined(info, impl->testUSVString(), info.GetIsolate());
}

static void testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUSVStringTreatReturnedNullStringAsUndefinedAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(holder);
    V8StringResource<> cppValue = toUSVString(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setTestUSVString(cppValue);
}

static void testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getTestByteStringTreatReturnedNullStringAsNullMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    v8SetReturnValueStringOrNull(info, impl->testByteString(), info.GetIsolate());
}

static void getTestByteStringTreatReturnedNullStringAsNullMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsNullMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    v8SetReturnValueStringOrUndefined(info, impl->testByteString(), info.GetIsolate());
}

static void getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTestByteStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestByteString", "TypeConversions", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    V8StringResource<> byteString;
    {
        byteString = toByteString(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTestByteString(byteString);
}

static void setTestByteStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::setTestByteStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTestByteStringDefaultNullMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestByteStringDefaultNull", "TypeConversions", info.Holder(), info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    V8StringResource<> byteString;
    {
        if (!info[0]->IsUndefined()) {
            byteString = toByteString(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            byteString = nullptr;
        }
    }
    impl->setTestByteString(byteString);
}

static void setTestByteStringDefaultNullMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::setTestByteStringDefaultNullMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getTestUSVStringTreatReturnedNullStringAsNullMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    v8SetReturnValueStringOrNull(info, impl->testUSVString(), info.GetIsolate());
}

static void getTestUSVStringTreatReturnedNullStringAsNullMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::getTestUSVStringTreatReturnedNullStringAsNullMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void getTestUSVStringTreatReturnedNullStringAsUndefinedMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    v8SetReturnValueStringOrUndefined(info, impl->testUSVString(), info.GetIsolate());
}

static void getTestUSVStringTreatReturnedNullStringAsUndefinedMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::getTestUSVStringTreatReturnedNullStringAsUndefinedMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTestUSVStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestUSVString", "TypeConversions", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    V8StringResource<> usvString;
    {
        usvString = toUSVString(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTestUSVString(usvString);
}

static void setTestUSVStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::setTestUSVStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTestUSVStringDefaultNullMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestUSVStringDefaultNull", "TypeConversions", info.Holder(), info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toImpl(info.Holder());
    V8StringResource<> usvString;
    {
        if (!info[0]->IsUndefined()) {
            usvString = toUSVString(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.throwIfNeeded())
                return;
        } else {
            usvString = nullptr;
        }
    }
    impl->setTestUSVString(usvString);
}

static void setTestUSVStringDefaultNullMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    TypeConversionsV8Internal::setTestUSVStringDefaultNullMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace TypeConversionsV8Internal

static const V8DOMConfiguration::AccessorConfiguration V8TypeConversionsAccessors[] = {
    {"testLong", TypeConversionsV8Internal::testLongAttributeGetterCallback, TypeConversionsV8Internal::testLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeLong", TypeConversionsV8Internal::testEnforceRangeLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testUnsignedLong", TypeConversionsV8Internal::testUnsignedLongAttributeGetterCallback, TypeConversionsV8Internal::testUnsignedLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeUnsignedLong", TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testLongLong", TypeConversionsV8Internal::testLongLongAttributeGetterCallback, TypeConversionsV8Internal::testLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeLongLong", TypeConversionsV8Internal::testEnforceRangeLongLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testUnsignedLongLong", TypeConversionsV8Internal::testUnsignedLongLongAttributeGetterCallback, TypeConversionsV8Internal::testUnsignedLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeUnsignedLongLong", TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testByte", TypeConversionsV8Internal::testByteAttributeGetterCallback, TypeConversionsV8Internal::testByteAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeByte", TypeConversionsV8Internal::testEnforceRangeByteAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeByteAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testOctet", TypeConversionsV8Internal::testOctetAttributeGetterCallback, TypeConversionsV8Internal::testOctetAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeOctet", TypeConversionsV8Internal::testEnforceRangeOctetAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeOctetAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testShort", TypeConversionsV8Internal::testShortAttributeGetterCallback, TypeConversionsV8Internal::testShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeShort", TypeConversionsV8Internal::testEnforceRangeShortAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testUnsignedShort", TypeConversionsV8Internal::testUnsignedShortAttributeGetterCallback, TypeConversionsV8Internal::testUnsignedShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testEnforceRangeUnsignedShort", TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testByteString", TypeConversionsV8Internal::testByteStringAttributeGetterCallback, TypeConversionsV8Internal::testByteStringAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testByteStringTreatReturnedNullStringAsNullAttribute", TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback, TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testByteStringTreatReturnedNullStringAsUndefinedAttribute", TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback, TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testUSVString", TypeConversionsV8Internal::testUSVStringAttributeGetterCallback, TypeConversionsV8Internal::testUSVStringAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testUSVStringTreatReturnedNullStringAsNullAttribute", TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback, TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"testUSVStringTreatReturnedNullStringAsUndefinedAttribute", TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback, TypeConversionsV8Internal::testUSVStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8TypeConversionsMethods[] = {
    {"getTestByteStringTreatReturnedNullStringAsNullMethod", TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsNullMethodMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getTestByteStringTreatReturnedNullStringAsUndefinedMethod", TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setTestByteString", TypeConversionsV8Internal::setTestByteStringMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTestByteStringDefaultNull", TypeConversionsV8Internal::setTestByteStringDefaultNullMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getTestUSVStringTreatReturnedNullStringAsNullMethod", TypeConversionsV8Internal::getTestUSVStringTreatReturnedNullStringAsNullMethodMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"getTestUSVStringTreatReturnedNullStringAsUndefinedMethod", TypeConversionsV8Internal::getTestUSVStringTreatReturnedNullStringAsUndefinedMethodMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
    {"setTestUSVString", TypeConversionsV8Internal::setTestUSVStringMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTestUSVStringDefaultNull", TypeConversionsV8Internal::setTestUSVStringDefaultNullMethodCallback, 0, 0, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8TypeConversionsTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "TypeConversions", v8::Local<v8::FunctionTemplate>(), V8TypeConversions::internalFieldCount,
        0, 0,
        V8TypeConversionsAccessors, WTF_ARRAY_LENGTH(V8TypeConversionsAccessors),
        V8TypeConversionsMethods, WTF_ARRAY_LENGTH(V8TypeConversionsMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8TypeConversions::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8TypeConversionsTemplate);
}

bool V8TypeConversions::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8TypeConversions::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

TypeConversions* V8TypeConversions::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8TypeConversions::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8TypeConversions::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
