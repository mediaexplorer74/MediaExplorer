// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGLength.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGElement.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGLength::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGLength::domTemplate, V8SVGLength::refObject, V8SVGLength::derefObject, V8SVGLength::trace, 0, V8SVGLength::visitDOMWrapper, V8SVGLength::preparePrototypeObject, V8SVGLength::installConditionallyEnabledProperties, "SVGLength", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGLengthTearOff.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGLengthTearOff::s_wrapperTypeInfo = V8SVGLength::wrapperTypeInfo;

namespace SVGLengthTearOffV8Internal {

static void unitTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->unitType());
}

static void unitTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SVGLengthTearOffV8Internal::unitTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "value", "SVGLength", holder, info.GetIsolate());
    float cppValue(impl->value(exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValue(info, cppValue);
}

static void valueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SVGLengthTearOffV8Internal::valueAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "value", "SVGLength", holder, info.GetIsolate());
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    float cppValue = toRestrictedFloat(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setValue(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void valueAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    SVGLengthTearOffV8Internal::valueAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueInSpecifiedUnitsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    v8SetReturnValue(info, impl->valueInSpecifiedUnits());
}

static void valueInSpecifiedUnitsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueInSpecifiedUnitsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "valueInSpecifiedUnits", "SVGLength", holder, info.GetIsolate());
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    float cppValue = toRestrictedFloat(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    impl->setValueInSpecifiedUnits(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void valueInSpecifiedUnitsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueAsStringAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    v8SetReturnValueString(info, impl->valueAsString(), info.GetIsolate());
}

static void valueAsStringAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    SVGLengthTearOffV8Internal::valueAsStringAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueAsStringAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "valueAsString", "SVGLength", holder, info.GetIsolate());
    SVGLengthTearOff* impl = V8SVGLength::toImpl(holder);
    V8StringResource<TreatNullAsNullString> cppValue = v8Value;
    if (!cppValue.prepare())
        return;
    impl->setValueAsString(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void valueAsStringAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    SVGLengthTearOffV8Internal::valueAsStringAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void newValueSpecifiedUnitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "newValueSpecifiedUnits", "SVGLength", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGLengthTearOff* impl = V8SVGLength::toImpl(info.Holder());
    unsigned unitType;
    float valueInSpecifiedUnits;
    {
        unitType = toUInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        valueInSpecifiedUnits = toRestrictedFloat(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->newValueSpecifiedUnits(unitType, valueInSpecifiedUnits, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void newValueSpecifiedUnitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SVGLengthTearOffV8Internal::newValueSpecifiedUnitsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void convertToSpecifiedUnitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "convertToSpecifiedUnits", "SVGLength", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    SVGLengthTearOff* impl = V8SVGLength::toImpl(info.Holder());
    unsigned unitType;
    {
        unitType = toUInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->convertToSpecifiedUnits(unitType, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void convertToSpecifiedUnitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    SVGLengthTearOffV8Internal::convertToSpecifiedUnitsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace SVGLengthTearOffV8Internal

void V8SVGLength::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    SVGLengthTearOff* impl = scriptWrappable->toImpl<SVGLengthTearOff>();
    v8::Local<v8::Object> creationContext = v8::Local<v8::Object>::New(isolate, wrapper);
    V8WrapperInstantiationScope scope(creationContext, isolate);
    SVGElement* contextElement = impl->contextElement();
    if (contextElement) {
        if (DOMDataStore::containsWrapper(contextElement, isolate))
            DOMDataStore::setWrapperReference(wrapper, contextElement, isolate);
    }
}

static const V8DOMConfiguration::AccessorConfiguration V8SVGLengthAccessors[] = {
    {"unitType", SVGLengthTearOffV8Internal::unitTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"value", SVGLengthTearOffV8Internal::valueAttributeGetterCallback, SVGLengthTearOffV8Internal::valueAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"valueInSpecifiedUnits", SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeGetterCallback, SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"valueAsString", SVGLengthTearOffV8Internal::valueAsStringAttributeGetterCallback, SVGLengthTearOffV8Internal::valueAsStringAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static const V8DOMConfiguration::MethodConfiguration V8SVGLengthMethods[] = {
    {"newValueSpecifiedUnits", SVGLengthTearOffV8Internal::newValueSpecifiedUnitsMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"convertToSpecifiedUnits", SVGLengthTearOffV8Internal::convertToSpecifiedUnitsMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8SVGLengthTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::svg1DOMEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SVGLength", v8::Local<v8::FunctionTemplate>(), V8SVGLength::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SVGLength", v8::Local<v8::FunctionTemplate>(), V8SVGLength::internalFieldCount,
            0, 0,
            V8SVGLengthAccessors, WTF_ARRAY_LENGTH(V8SVGLengthAccessors),
            V8SVGLengthMethods, WTF_ARRAY_LENGTH(V8SVGLengthMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    static const V8DOMConfiguration::ConstantConfiguration V8SVGLengthConstants[] = {
        {"SVG_LENGTHTYPE_UNKNOWN", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_NUMBER", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_PERCENTAGE", 2, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_EMS", 3, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_EXS", 4, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_PX", 5, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_CM", 6, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_MM", 7, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_IN", 8, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_PT", 9, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_LENGTHTYPE_PC", 10, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8SVGLengthConstants, WTF_ARRAY_LENGTH(V8SVGLengthConstants));
    static_assert(0 == SVGLengthTearOff::SVG_LENGTHTYPE_UNKNOWN, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_UNKNOWN does not match with implementation");
    static_assert(1 == SVGLengthTearOff::SVG_LENGTHTYPE_NUMBER, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_NUMBER does not match with implementation");
    static_assert(2 == SVGLengthTearOff::SVG_LENGTHTYPE_PERCENTAGE, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_PERCENTAGE does not match with implementation");
    static_assert(3 == SVGLengthTearOff::SVG_LENGTHTYPE_EMS, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_EMS does not match with implementation");
    static_assert(4 == SVGLengthTearOff::SVG_LENGTHTYPE_EXS, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_EXS does not match with implementation");
    static_assert(5 == SVGLengthTearOff::SVG_LENGTHTYPE_PX, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_PX does not match with implementation");
    static_assert(6 == SVGLengthTearOff::SVG_LENGTHTYPE_CM, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_CM does not match with implementation");
    static_assert(7 == SVGLengthTearOff::SVG_LENGTHTYPE_MM, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_MM does not match with implementation");
    static_assert(8 == SVGLengthTearOff::SVG_LENGTHTYPE_IN, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_IN does not match with implementation");
    static_assert(9 == SVGLengthTearOff::SVG_LENGTHTYPE_PT, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_PT does not match with implementation");
    static_assert(10 == SVGLengthTearOff::SVG_LENGTHTYPE_PC, "the value of SVGLengthTearOff_SVG_LENGTHTYPE_PC does not match with implementation");

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8SVGLength::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGLengthTemplate);
}

bool V8SVGLength::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGLength::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGLengthTearOff* V8SVGLength::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8SVGLength::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGLengthTearOff>()->ref();
#endif
}

void V8SVGLength::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGLengthTearOff>()->deref();
#endif
}

} // namespace blink
