// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InternalSettings.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8InternalSettings::wrapperTypeInfo = { gin::kEmbedderBlink, V8InternalSettings::domTemplate, V8InternalSettings::refObject, V8InternalSettings::derefObject, V8InternalSettings::trace, 0, 0, V8InternalSettings::preparePrototypeObject, V8InternalSettings::installConditionallyEnabledProperties, "InternalSettings", &V8InternalSettingsGenerated::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in InternalSettings.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& InternalSettings::s_wrapperTypeInfo = V8InternalSettings::wrapperTypeInfo;

namespace InternalSettingsV8Internal {

static void setMockScrollbarsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMockScrollbarsEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMockScrollbarsEnabled(enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setMockScrollbarsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setMockScrollbarsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMockGestureTapHighlightsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMockGestureTapHighlightsEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setMockGestureTapHighlightsEnabled(enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setMockGestureTapHighlightsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setMockGestureTapHighlightsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setStandardFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setStandardFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setStandardFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setStandardFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setStandardFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSerifFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSerifFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setSerifFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setSerifFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setSerifFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSansSerifFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSansSerifFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setSansSerifFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setSansSerifFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setSansSerifFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setFixedFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFixedFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setFixedFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setFixedFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setFixedFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setCursiveFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setCursiveFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setCursiveFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setCursiveFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setCursiveFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setFantasyFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFantasyFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setFantasyFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setFantasyFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setFantasyFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPictographFontFamilyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPictographFontFamily", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> family;
    V8StringResource<> script;
    {
        family = info[0];
        if (!family.prepare())
            return;
        script = info[1];
        if (!script.prepare())
            return;
    }
    impl->setPictographFontFamily(family, script, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setPictographFontFamilyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setPictographFontFamilyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextAutosizingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTextAutosizingEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTextAutosizingEnabled(enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setTextAutosizingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setTextAutosizingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextAutosizingWindowSizeOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTextAutosizingWindowSizeOverride", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    int width;
    int height;
    {
        width = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        height = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setTextAutosizingWindowSizeOverride(width, height, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setTextAutosizingWindowSizeOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setTextAutosizingWindowSizeOverrideMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setTextTrackKindUserPreferenceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTextTrackKindUserPreference", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> preference;
    {
        preference = info[0];
        if (!preference.prepare())
            return;
    }
    impl->setTextTrackKindUserPreference(preference, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setTextTrackKindUserPreferenceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setTextTrackKindUserPreferenceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAccessibilityFontScaleFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccessibilityFontScaleFactor", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    float fontScaleFactor;
    {
        fontScaleFactor = toRestrictedFloat(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAccessibilityFontScaleFactor(fontScaleFactor, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setAccessibilityFontScaleFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setAccessibilityFontScaleFactorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMediaTypeOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMediaTypeOverride", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> mediaTypeOverride;
    {
        mediaTypeOverride = info[0];
        if (!mediaTypeOverride.prepare())
            return;
    }
    impl->setMediaTypeOverride(mediaTypeOverride, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setMediaTypeOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setMediaTypeOverrideMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDisplayModeOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDisplayModeOverride", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> displayModeOverride;
    {
        displayModeOverride = info[0];
        if (!displayModeOverride.prepare())
            return;
    }
    impl->setDisplayModeOverride(displayModeOverride, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setDisplayModeOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setDisplayModeOverrideMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setEditingBehaviorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setEditingBehavior", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> behavior;
    {
        behavior = info[0];
        if (!behavior.prepare())
            return;
    }
    impl->setEditingBehavior(behavior, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setEditingBehaviorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setEditingBehaviorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setImagesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setImagesEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setImagesEnabled(enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setImagesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setImagesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setDefaultVideoPosterURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDefaultVideoPosterURL", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> poster;
    {
        poster = info[0];
        if (!poster.prepare())
            return;
    }
    impl->setDefaultVideoPosterURL(poster, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setDefaultVideoPosterURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setDefaultVideoPosterURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setViewportEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setViewportEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setViewportEnabled(enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setViewportEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setViewportEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setViewportMetaEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setViewportMetaEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setViewportMetaEnabled(enabled, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setViewportMetaEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setViewportMetaEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAvailablePointerTypesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAvailablePointerTypes", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> pointers;
    {
        pointers = info[0];
        if (!pointers.prepare())
            return;
    }
    impl->setAvailablePointerTypes(pointers, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setAvailablePointerTypesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setAvailablePointerTypesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPrimaryPointerTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPrimaryPointerType", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> pointer;
    {
        pointer = info[0];
        if (!pointer.prepare())
            return;
    }
    impl->setPrimaryPointerType(pointer, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setPrimaryPointerTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setPrimaryPointerTypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAvailableHoverTypesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAvailableHoverTypes", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> types;
    {
        types = info[0];
        if (!types.prepare())
            return;
    }
    impl->setAvailableHoverTypes(types, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setAvailableHoverTypesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setAvailableHoverTypesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setPrimaryHoverTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPrimaryHoverType", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> type;
    {
        type = info[0];
        if (!type.prepare())
            return;
    }
    impl->setPrimaryHoverType(type, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setPrimaryHoverTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setPrimaryHoverTypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setImageAnimationPolicyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setImageAnimationPolicy", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    V8StringResource<> policy;
    {
        policy = info[0];
        if (!policy.prepare())
            return;
    }
    impl->setImageAnimationPolicy(policy, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setImageAnimationPolicyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setImageAnimationPolicyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setAuthorShadowDOMForAnyElementEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAuthorShadowDOMForAnyElementEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setAuthorShadowDOMForAnyElementEnabled(enabled);
}

static void setAuthorShadowDOMForAnyElementEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setAuthorShadowDOMForAnyElementEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLangAttributeAwareFormControlUIEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLangAttributeAwareFormControlUIEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLangAttributeAwareFormControlUIEnabled(enabled);
}

static void setLangAttributeAwareFormControlUIEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setLangAttributeAwareFormControlUIEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setOverlayScrollbarsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setOverlayScrollbarsEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setOverlayScrollbarsEnabled(enabled);
}

static void setOverlayScrollbarsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setOverlayScrollbarsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setExperimentalContentSecurityPolicyFeaturesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setExperimentalContentSecurityPolicyFeaturesEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setExperimentalContentSecurityPolicyFeaturesEnabled(enabled);
}

static void setExperimentalContentSecurityPolicyFeaturesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setExperimentalContentSecurityPolicyFeaturesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setImageColorProfilesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setImageColorProfilesEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setImageColorProfilesEnabled(enabled);
}

static void setImageColorProfilesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setImageColorProfilesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setScrollTopLeftInteropEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setScrollTopLeftInteropEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setScrollTopLeftInteropEnabled(enabled);
}

static void setScrollTopLeftInteropEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setScrollTopLeftInteropEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setLinkHeaderEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLinkHeaderEnabled", "InternalSettings", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    InternalSettings* impl = V8InternalSettings::toImpl(info.Holder());
    bool enabled;
    {
        enabled = toBoolean(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    impl->setLinkHeaderEnabled(enabled);
}

static void setLinkHeaderEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    InternalSettingsV8Internal::setLinkHeaderEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace InternalSettingsV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InternalSettingsMethods[] = {
    {"setMockScrollbarsEnabled", InternalSettingsV8Internal::setMockScrollbarsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMockGestureTapHighlightsEnabled", InternalSettingsV8Internal::setMockGestureTapHighlightsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setStandardFontFamily", InternalSettingsV8Internal::setStandardFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setSerifFontFamily", InternalSettingsV8Internal::setSerifFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setSansSerifFontFamily", InternalSettingsV8Internal::setSansSerifFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setFixedFontFamily", InternalSettingsV8Internal::setFixedFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setCursiveFontFamily", InternalSettingsV8Internal::setCursiveFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setFantasyFontFamily", InternalSettingsV8Internal::setFantasyFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setPictographFontFamily", InternalSettingsV8Internal::setPictographFontFamilyMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextAutosizingEnabled", InternalSettingsV8Internal::setTextAutosizingEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextAutosizingWindowSizeOverride", InternalSettingsV8Internal::setTextAutosizingWindowSizeOverrideMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts},
    {"setTextTrackKindUserPreference", InternalSettingsV8Internal::setTextTrackKindUserPreferenceMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAccessibilityFontScaleFactor", InternalSettingsV8Internal::setAccessibilityFontScaleFactorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setMediaTypeOverride", InternalSettingsV8Internal::setMediaTypeOverrideMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDisplayModeOverride", InternalSettingsV8Internal::setDisplayModeOverrideMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setEditingBehavior", InternalSettingsV8Internal::setEditingBehaviorMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setImagesEnabled", InternalSettingsV8Internal::setImagesEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setDefaultVideoPosterURL", InternalSettingsV8Internal::setDefaultVideoPosterURLMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setViewportEnabled", InternalSettingsV8Internal::setViewportEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setViewportMetaEnabled", InternalSettingsV8Internal::setViewportMetaEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAvailablePointerTypes", InternalSettingsV8Internal::setAvailablePointerTypesMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPrimaryPointerType", InternalSettingsV8Internal::setPrimaryPointerTypeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAvailableHoverTypes", InternalSettingsV8Internal::setAvailableHoverTypesMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setPrimaryHoverType", InternalSettingsV8Internal::setPrimaryHoverTypeMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setImageAnimationPolicy", InternalSettingsV8Internal::setImageAnimationPolicyMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setAuthorShadowDOMForAnyElementEnabled", InternalSettingsV8Internal::setAuthorShadowDOMForAnyElementEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLangAttributeAwareFormControlUIEnabled", InternalSettingsV8Internal::setLangAttributeAwareFormControlUIEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setOverlayScrollbarsEnabled", InternalSettingsV8Internal::setOverlayScrollbarsEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setExperimentalContentSecurityPolicyFeaturesEnabled", InternalSettingsV8Internal::setExperimentalContentSecurityPolicyFeaturesEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setImageColorProfilesEnabled", InternalSettingsV8Internal::setImageColorProfilesEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setScrollTopLeftInteropEnabled", InternalSettingsV8Internal::setScrollTopLeftInteropEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
    {"setLinkHeaderEnabled", InternalSettingsV8Internal::setLinkHeaderEnabledMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

static void installV8InternalSettingsTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "InternalSettings", V8InternalSettingsGenerated::domTemplate(isolate), V8InternalSettings::internalFieldCount,
        0, 0,
        0, 0,
        V8InternalSettingsMethods, WTF_ARRAY_LENGTH(V8InternalSettingsMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Local<v8::FunctionTemplate> V8InternalSettings::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8InternalSettingsTemplate);
}

bool V8InternalSettings::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8InternalSettings::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InternalSettings* V8InternalSettings::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8InternalSettings::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<InternalSettings>()->ref();
#endif
}

void V8InternalSettings::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<InternalSettings>()->deref();
#endif
}

} // namespace blink
